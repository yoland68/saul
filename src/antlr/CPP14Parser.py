# Generated from CPP14.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0090")
        buf.write("\u09a6\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\3\2\5\2\u0192\n\2\3\2")
        buf.write("\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u019e\n\3\3\4")
        buf.write("\3\4\5\4\u01a2\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\5\5\u01ad\n\5\3\6\3\6\5\6\u01b1\n\6\3\6\3\6\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01c0\n\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u01c7\n\7\3\7\3\7\3\7\7\7\u01cc\n\7")
        buf.write("\f\7\16\7\u01cf\13\7\3\b\3\b\5\b\u01d3\n\b\3\b\3\b\3\t")
        buf.write("\3\t\5\t\u01d9\n\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\5\n")
        buf.write("\u01e3\n\n\3\13\3\13\3\f\3\f\3\f\5\f\u01ea\n\f\3\f\3\f")
        buf.write("\3\f\3\f\5\f\u01f0\n\f\7\f\u01f2\n\f\f\f\16\f\u01f5\13")
        buf.write("\f\3\r\3\r\5\r\u01f9\n\r\3\16\3\16\3\16\3\16\5\16\u01ff")
        buf.write("\n\16\3\17\3\17\3\17\3\17\3\17\5\17\u0206\n\17\3\20\3")
        buf.write("\20\3\20\3\20\5\20\u020c\n\20\3\20\5\20\u020f\n\20\3\20")
        buf.write("\5\20\u0212\n\20\3\20\5\20\u0215\n\20\3\21\3\21\3\21\3")
        buf.write("\21\3\21\5\21\u021c\n\21\3\21\3\21\3\21\3\21\3\21\5\21")
        buf.write("\u0223\n\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0257")
        buf.write("\n\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\5\21\u0266\n\21\3\21\3\21\3\21\3\21\5")
        buf.write("\21\u026c\n\21\3\21\3\21\3\21\3\21\5\21\u0272\n\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\7\21")
        buf.write("\u027f\n\21\f\21\16\21\u0282\13\21\3\22\3\22\3\23\5\23")
        buf.write("\u0287\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\5\23\u0296\n\23\3\23\3\23\3\23")
        buf.write("\3\23\5\23\u029c\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\5\24\u02ba\n\24\3\25\3\25\3\26\5\26\u02bf\n\26\3\26\3")
        buf.write("\26\5\26\u02c3\n\26\3\26\3\26\5\26\u02c7\n\26\3\26\5\26")
        buf.write("\u02ca\n\26\3\26\3\26\5\26\u02ce\n\26\3\26\3\26\3\26\3")
        buf.write("\26\5\26\u02d4\n\26\5\26\u02d6\n\26\3\27\3\27\3\27\3\27")
        buf.write("\3\30\3\30\5\30\u02de\n\30\3\31\3\31\5\31\u02e2\n\31\3")
        buf.write("\31\5\31\u02e5\n\31\3\32\3\32\3\32\3\32\3\32\5\32\u02ec")
        buf.write("\n\32\3\32\3\32\3\32\3\32\3\32\5\32\u02f3\n\32\7\32\u02f5")
        buf.write("\n\32\f\32\16\32\u02f8\13\32\3\33\3\33\5\33\u02fc\n\33")
        buf.write("\3\33\3\33\5\33\u0300\n\33\3\34\5\34\u0303\n\34\3\34\3")
        buf.write("\34\3\34\5\34\u0308\n\34\3\34\3\34\3\34\3\34\5\34\u030e")
        buf.write("\n\34\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\5\36\u031b\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\7\37\u0326\n\37\f\37\16\37\u0329\13\37\3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \7 \u0337\n \f \16 ")
        buf.write("\u033a\13 \3!\3!\3!\3!\3!\3!\3!\3!\3!\7!\u0345\n!\f!\16")
        buf.write("!\u0348\13!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\7")
        buf.write("\"\u0354\n\"\f\"\16\"\u0357\13\"\3#\3#\3#\3#\3#\3#\3#")
        buf.write("\3#\3#\3#\3#\3#\3#\3#\3#\7#\u0368\n#\f#\16#\u036b\13#")
        buf.write("\3$\3$\3$\3$\3$\3$\3$\3$\3$\7$\u0376\n$\f$\16$\u0379\13")
        buf.write("$\3%\3%\3%\3%\3%\3%\7%\u0381\n%\f%\16%\u0384\13%\3&\3")
        buf.write("&\3&\3&\3&\3&\7&\u038c\n&\f&\16&\u038f\13&\3\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\7\'\u0397\n\'\f\'\16\'\u039a\13\'\3(\3(\3")
        buf.write("(\3(\3(\3(\7(\u03a2\n(\f(\16(\u03a5\13(\3)\3)\3)\3)\3")
        buf.write(")\3)\7)\u03ad\n)\f)\16)\u03b0\13)\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\5*\u03b9\n*\3+\3+\3+\3+\3+\3+\5+\u03c1\n+\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\5,\u03ce\n,\3-\3-\3-\3-\3-\3-\7")
        buf.write("-\u03d6\n-\f-\16-\u03d9\13-\3.\3.\3/\3/\5/\u03df\n/\3")
        buf.write("/\3/\5/\u03e3\n/\3/\3/\5/\u03e7\n/\3/\3/\5/\u03eb\n/\3")
        buf.write("/\3/\5/\u03ef\n/\3/\3/\3/\5/\u03f4\n/\3/\5/\u03f7\n/\3")
        buf.write("\60\5\60\u03fa\n\60\3\60\3\60\3\60\3\60\5\60\u0400\n\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0408\n\60\3\60\3")
        buf.write("\60\3\60\5\60\u040d\n\60\3\61\5\61\u0410\n\61\3\61\3\61")
        buf.write("\3\62\3\62\5\62\u0416\n\62\3\62\3\62\3\63\3\63\3\63\3")
        buf.write("\63\3\63\7\63\u041f\n\63\f\63\16\63\u0422\13\63\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0438\n")
        buf.write("\64\3\65\3\65\5\65\u043c\n\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\5\65\u0444\n\65\3\65\3\65\3\65\3\65\5\65\u044a\n")
        buf.write("\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u045e\n")
        buf.write("\66\3\66\3\66\5\66\u0462\n\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u046f\n\66\3\67\3")
        buf.write("\67\5\67\u0473\n\67\38\58\u0476\n8\38\38\38\39\39\59\u047d")
        buf.write("\n9\3:\3:\3:\3:\3:\3:\5:\u0485\n:\3:\3:\3:\3:\3:\3:\3")
        buf.write(":\3:\5:\u048f\n:\3;\3;\3<\3<\3<\3<\3<\7<\u0498\n<\f<\16")
        buf.write("<\u049b\13<\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u04a6\n=\3>")
        buf.write("\3>\3>\3>\3>\3>\3>\3>\5>\u04b0\n>\3?\3?\3?\5?\u04b5\n")
        buf.write("?\3?\3?\3?\3?\3@\5@\u04bc\n@\3@\5@\u04bf\n@\3@\3@\3@\5")
        buf.write("@\u04c4\n@\3@\3@\3@\5@\u04c9\n@\3A\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\3B\3B\3C\3C\3C\3D\3D\3D\3D\3D\3D\5D\u04de\nD\3E\3E\5")
        buf.write("E\u04e2\nE\3E\3E\3E\5E\u04e7\nE\3F\3F\3G\3G\3H\3H\3I\3")
        buf.write("I\3I\5I\u04f2\nI\3J\3J\3J\3J\5J\u04f8\nJ\3K\3K\5K\u04fc")
        buf.write("\nK\3K\3K\3K\5K\u0501\nK\3L\3L\5L\u0505\nL\3L\3L\3L\5")
        buf.write("L\u050a\nL\3M\5M\u050d\nM\3M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u0523\nM\3N\3N\3N\3")
        buf.write("N\5N\u0529\nN\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u0534\nO\3")
        buf.write("P\3P\5P\u0538\nP\3P\5P\u053b\nP\3P\3P\3P\3P\3P\3P\3P\3")
        buf.write("P\5P\u0545\nP\3P\3P\3P\3P\5P\u054b\nP\3P\5P\u054e\nP\3")
        buf.write("Q\3Q\3R\3R\3R\5R\u0555\nR\3R\3R\3R\3R\3R\3R\3R\3R\5R\u055f")
        buf.write("\nR\3S\3S\5S\u0563\nS\3S\5S\u0566\nS\3S\5S\u0569\nS\3")
        buf.write("S\3S\5S\u056d\nS\3S\3S\3S\5S\u0572\nS\5S\u0574\nS\3T\3")
        buf.write("T\5T\u0578\nT\3T\3T\5T\u057c\nT\3T\3T\3U\3U\3U\3U\3U\5")
        buf.write("U\u0585\nU\3V\3V\3V\3W\3W\3W\3W\3W\3W\7W\u0590\nW\fW\16")
        buf.write("W\u0593\13W\3X\3X\3X\3X\3X\5X\u059a\nX\3Y\3Y\3Z\3Z\5Z")
        buf.write("\u05a0\nZ\3[\3[\3\\\3\\\5\\\u05a6\n\\\3]\3]\5]\u05aa\n")
        buf.write("]\3^\5^\u05ad\n^\3^\3^\3^\3^\3^\3^\3_\5_\u05b6\n_\3_\3")
        buf.write("_\3_\3_\3_\3_\3`\5`\u05bf\n`\3`\3`\3`\3`\3`\3a\5a\u05c7")
        buf.write("\na\3b\3b\3c\3c\3c\3c\3c\3c\3d\5d\u05d2\nd\3d\3d\3e\3")
        buf.write("e\5e\u05d8\ne\3e\3e\3e\3e\3e\3e\3e\3e\3e\5e\u05e3\ne\3")
        buf.write("f\5f\u05e6\nf\3f\3f\3f\5f\u05eb\nf\3f\3f\3f\3g\3g\3g\3")
        buf.write("g\3g\3g\3h\3h\3h\3h\5h\u05fa\nh\3h\3h\3h\3h\5h\u0600\n")
        buf.write("h\3i\3i\3i\3i\3i\7i\u0607\ni\fi\16i\u060a\13i\3j\3j\3")
        buf.write("j\3j\3j\3j\3j\5j\u0613\nj\3k\3k\3k\3k\5k\u0619\nk\3k\3")
        buf.write("k\3k\3k\3k\3k\5k\u0621\nk\3k\3k\5k\u0625\nk\3l\3l\5l\u0629")
        buf.write("\nl\3l\3l\3l\5l\u062e\nl\3l\3l\3l\5l\u0633\nl\3l\3l\3")
        buf.write("l\3l\3l\7l\u063a\nl\fl\16l\u063d\13l\3m\3m\5m\u0641\n")
        buf.write("m\3n\3n\5n\u0645\nn\3o\3o\3o\3o\3p\3p\3q\3q\3q\3q\3r\3")
        buf.write("r\5r\u0653\nr\3r\3r\7r\u0657\nr\fr\16r\u065a\13r\3s\3")
        buf.write("s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\5s\u0668\ns\3t\3t\3t\3")
        buf.write("t\3t\3t\7t\u0670\nt\ft\16t\u0673\13t\3u\3u\5u\u0677\n")
        buf.write("u\3v\3v\3v\3v\3v\5v\u067e\nv\3w\3w\3w\3w\5w\u0684\nw\3")
        buf.write("x\3x\3x\5x\u0689\nx\3x\3x\3x\3x\5x\u068f\nx\3x\3x\3x\3")
        buf.write("x\3x\5x\u0696\nx\3x\3x\5x\u069a\nx\7x\u069c\nx\fx\16x")
        buf.write("\u069f\13x\3y\3y\3y\3y\5y\u06a5\ny\3y\5y\u06a8\ny\3y\5")
        buf.write("y\u06ab\ny\3y\5y\u06ae\ny\3z\3z\3z\5z\u06b3\nz\3{\3{\5")
        buf.write("{\u06b7\n{\3{\5{\u06ba\n{\3{\3{\5{\u06be\n{\3{\3{\5{\u06c2")
        buf.write("\n{\3{\3{\3{\5{\u06c7\n{\3{\5{\u06ca\n{\5{\u06cc\n{\3")
        buf.write("|\3|\5|\u06d0\n|\3}\3}\3~\3~\3\177\5\177\u06d7\n\177\3")
        buf.write("\177\3\177\3\u0080\3\u0080\5\u0080\u06dd\n\u0080\3\u0081")
        buf.write("\3\u0081\5\u0081\u06e1\n\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\5\u0081\u06e7\n\u0081\3\u0082\3\u0082\3\u0082")
        buf.write("\5\u0082\u06ec\n\u0082\5\u0082\u06ee\n\u0082\3\u0083\3")
        buf.write("\u0083\3\u0083\3\u0083\5\u0083\u06f4\n\u0083\3\u0083\3")
        buf.write("\u0083\5\u0083\u06f8\n\u0083\3\u0083\3\u0083\3\u0083\3")
        buf.write("\u0083\5\u0083\u06fe\n\u0083\3\u0083\3\u0083\3\u0083\3")
        buf.write("\u0083\3\u0083\5\u0083\u0705\n\u0083\3\u0083\3\u0083\5")
        buf.write("\u0083\u0709\n\u0083\7\u0083\u070b\n\u0083\f\u0083\16")
        buf.write("\u0083\u070e\13\u0083\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\5\u0084\u0714\n\u0084\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u071e\n\u0085")
        buf.write("\3\u0085\3\u0085\5\u0085\u0722\n\u0085\7\u0085\u0724\n")
        buf.write("\u0085\f\u0085\16\u0085\u0727\13\u0085\3\u0086\5\u0086")
        buf.write("\u072a\n\u0086\3\u0086\5\u0086\u072d\n\u0086\3\u0086\3")
        buf.write("\u0086\3\u0086\3\u0086\5\u0086\u0733\n\u0086\3\u0087\3")
        buf.write("\u0087\3\u0087\3\u0087\3\u0087\3\u0087\7\u0087\u073b\n")
        buf.write("\u0087\f\u0087\16\u0087\u073e\13\u0087\3\u0088\5\u0088")
        buf.write("\u0741\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088")
        buf.write("\u0747\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\5\u0088\u074f\n\u0088\3\u0088\3\u0088\5\u0088")
        buf.write("\u0753\n\u0088\3\u0088\5\u0088\u0756\n\u0088\3\u0088\3")
        buf.write("\u0088\5\u0088\u075a\n\u0088\3\u0088\3\u0088\3\u0088\5")
        buf.write("\u0088\u075f\n\u0088\3\u0089\5\u0089\u0762\n\u0089\3\u0089")
        buf.write("\5\u0089\u0765\n\u0089\3\u0089\3\u0089\5\u0089\u0769\n")
        buf.write("\u0089\3\u0089\3\u0089\3\u008a\5\u008a\u076e\n\u008a\3")
        buf.write("\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\5\u008a\u0778\n\u008a\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\5\u008b\u077f\n\u008b\3\u008c\3\u008c")
        buf.write("\3\u008c\5\u008c\u0784\n\u008c\3\u008d\3\u008d\5\u008d")
        buf.write("\u0788\n\u008d\3\u008e\3\u008e\3\u008e\5\u008e\u078d\n")
        buf.write("\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0793\n")
        buf.write("\u008e\7\u008e\u0795\n\u008e\f\u008e\16\u008e\u0798\13")
        buf.write("\u008e\3\u008f\3\u008f\3\u008f\5\u008f\u079d\n\u008f\3")
        buf.write("\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u07a3\n\u008f\3")
        buf.write("\u0090\3\u0090\5\u0090\u07a7\n\u0090\3\u0091\3\u0091\3")
        buf.write("\u0091\5\u0091\u07ac\n\u0091\3\u0091\3\u0091\3\u0092\3")
        buf.write("\u0092\5\u0092\u07b2\n\u0092\3\u0092\3\u0092\5\u0092\u07b6")
        buf.write("\n\u0092\3\u0092\5\u0092\u07b9\n\u0092\3\u0092\3\u0092")
        buf.write("\5\u0092\u07bd\n\u0092\3\u0092\5\u0092\u07c0\n\u0092\5")
        buf.write("\u0092\u07c2\n\u0092\3\u0093\5\u0093\u07c5\n\u0093\3\u0093")
        buf.write("\3\u0093\3\u0094\3\u0094\3\u0095\3\u0095\3\u0096\3\u0096")
        buf.write("\5\u0096\u07cf\n\u0096\3\u0096\3\u0096\3\u0096\5\u0096")
        buf.write("\u07d4\n\u0096\5\u0096\u07d6\n\u0096\3\u0097\5\u0097\u07d9")
        buf.write("\n\u0097\3\u0097\5\u0097\u07dc\n\u0097\3\u0097\5\u0097")
        buf.write("\u07df\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\5\u0097\u07e8\n\u0097\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\7\u0098\u07f0\n\u0098")
        buf.write("\f\u0098\16\u0098\u07f3\13\u0098\3\u0099\3\u0099\5\u0099")
        buf.write("\u07f7\n\u0099\3\u0099\5\u0099\u07fa\n\u0099\3\u0099\3")
        buf.write("\u0099\5\u0099\u07fe\n\u0099\3\u0099\5\u0099\u0801\n\u0099")
        buf.write("\3\u0099\5\u0099\u0804\n\u0099\3\u0099\3\u0099\5\u0099")
        buf.write("\u0808\n\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\7\u009a\u080f\n\u009a\f\u009a\16\u009a\u0812\13\u009a")
        buf.write("\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009d")
        buf.write("\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\5\u009e\u0820")
        buf.write("\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0826")
        buf.write("\n\u009e\7\u009e\u0828\n\u009e\f\u009e\16\u009e\u082b")
        buf.write("\13\u009e\3\u009f\5\u009f\u082e\n\u009f\3\u009f\3\u009f")
        buf.write("\5\u009f\u0832\n\u009f\3\u009f\3\u009f\5\u009f\u0836\n")
        buf.write("\u009f\3\u009f\3\u009f\5\u009f\u083a\n\u009f\3\u009f\3")
        buf.write("\u009f\5\u009f\u083e\n\u009f\3\u009f\3\u009f\5\u009f\u0842")
        buf.write("\n\u009f\3\u00a0\5\u00a0\u0845\n\u00a0\3\u00a0\3\u00a0")
        buf.write("\5\u00a0\u0849\n\u00a0\3\u00a1\3\u00a1\3\u00a2\3\u00a2")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\5\u00a4\u0854")
        buf.write("\n\u00a4\3\u00a5\3\u00a5\5\u00a5\u0858\n\u00a5\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a7\3\u00a7\5\u00a7\u085f\n\u00a7")
        buf.write("\3\u00a7\3\u00a7\5\u00a7\u0863\n\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\5\u00a7\u0868\n\u00a7\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\5\u00a8\u086d\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\5\u00a8\u0874\n\u00a8\3\u00a9\3\u00a9\5\u00a9")
        buf.write("\u0878\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0882\n\u00ab\3\u00ac")
        buf.write("\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\3\u00ad\7\u00ad\u0890\n\u00ad")
        buf.write("\f\u00ad\16\u00ad\u0893\13\u00ad\3\u00ae\3\u00ae\5\u00ae")
        buf.write("\u0897\n\u00ae\3\u00af\3\u00af\5\u00af\u089b\n\u00af\3")
        buf.write("\u00af\5\u00af\u089e\n\u00af\3\u00af\3\u00af\5\u00af\u08a2")
        buf.write("\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u08a8")
        buf.write("\n\u00af\3\u00af\5\u00af\u08ab\n\u00af\3\u00af\3\u00af")
        buf.write("\5\u00af\u08af\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u08b9\n\u00af")
        buf.write("\3\u00af\5\u00af\u08bc\n\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\5\u00af\u08c4\n\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\5\u00af\u08c9\n\u00af\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\5\u00b0\u08ce\n\u00b0\3\u00b0\3\u00b0\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u08d6\n\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u08dd\n\u00b1")
        buf.write("\3\u00b1\3\u00b1\5\u00b1\u08e1\n\u00b1\3\u00b2\3\u00b2")
        buf.write("\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u08e8\n\u00b3\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u08ee\n\u00b3\7\u00b3")
        buf.write("\u08f0\n\u00b3\f\u00b3\16\u00b3\u08f3\13\u00b3\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\5\u00b4\u08f8\n\u00b4\3\u00b5\3\u00b5")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0901")
        buf.write("\n\u00b5\3\u00b5\3\u00b5\5\u00b5\u0905\n\u00b5\3\u00b6")
        buf.write("\5\u00b6\u0908\n\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b9\3\u00b9\5\u00b9\u0918\n\u00b9\3\u00b9")
        buf.write("\3\u00b9\3\u00b9\3\u00ba\3\u00ba\5\u00ba\u091f\n\u00ba")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bc")
        buf.write("\5\u00bc\u0928\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\5\u00bc\u092e\n\u00bc\3\u00bc\3\u00bc\5\u00bc\u0932\n")
        buf.write("\u00bc\3\u00bc\5\u00bc\u0935\n\u00bc\3\u00bd\3\u00bd\5")
        buf.write("\u00bd\u0939\n\u00bd\3\u00be\3\u00be\5\u00be\u093d\n\u00be")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0942\n\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0949\n\u00c0")
        buf.write("\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u094f\n\u00c0")
        buf.write("\7\u00c0\u0951\n\u00c0\f\u00c0\16\u00c0\u0954\13\u00c0")
        buf.write("\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1")
        buf.write("\u095c\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\5\u00c4\u0995\n\u00c4\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u099e\n\u00c5")
        buf.write("\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\2$\f\26 \62<>@BDFHJLNPXdv\u00ac\u00d0\u00d6\u00e2\u00e6")
        buf.write("\u00ee\u0104\u0108\u010c\u011a\u012e\u0132\u013a\u0158")
        buf.write("\u0164\u017e\u00c9\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjln")
        buf.write("prtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write("\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6")
        buf.write("\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8")
        buf.write("\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa")
        buf.write("\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c")
        buf.write("\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e")
        buf.write("\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130")
        buf.write("\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142")
        buf.write("\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154")
        buf.write("\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166")
        buf.write("\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178")
        buf.write("\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a")
        buf.write("\u018c\u018e\2\r\4\2\\\\``\4\2VX\\_\7\2\37\37**\64\64")
        buf.write("::AA\5\2\35\35\'\'KK\4\2\21\21MM\4\2\\\\qq\5\2\20\20=")
        buf.write("=HH\4\2!!\60\60\3\2\61\63\4\2  CC\3\2\u0089\u008c\2\u0ac7")
        buf.write("\2\u0191\3\2\2\2\4\u019d\3\2\2\2\6\u01a1\3\2\2\2\b\u01ac")
        buf.write("\3\2\2\2\n\u01ae\3\2\2\2\f\u01bf\3\2\2\2\16\u01d0\3\2")
        buf.write("\2\2\20\u01d6\3\2\2\2\22\u01e2\3\2\2\2\24\u01e4\3\2\2")
        buf.write("\2\26\u01e6\3\2\2\2\30\u01f8\3\2\2\2\32\u01fe\3\2\2\2")
        buf.write("\34\u0205\3\2\2\2\36\u0207\3\2\2\2 \u0256\3\2\2\2\"\u0283")
        buf.write("\3\2\2\2$\u029b\3\2\2\2&\u02b9\3\2\2\2(\u02bb\3\2\2\2")
        buf.write("*\u02d5\3\2\2\2,\u02d7\3\2\2\2.\u02db\3\2\2\2\60\u02e4")
        buf.write("\3\2\2\2\62\u02e6\3\2\2\2\64\u02ff\3\2\2\2\66\u030d\3")
        buf.write("\2\2\28\u030f\3\2\2\2:\u031a\3\2\2\2<\u031c\3\2\2\2>\u032a")
        buf.write("\3\2\2\2@\u033b\3\2\2\2B\u0349\3\2\2\2D\u0358\3\2\2\2")
        buf.write("F\u036c\3\2\2\2H\u037a\3\2\2\2J\u0385\3\2\2\2L\u0390\3")
        buf.write("\2\2\2N\u039b\3\2\2\2P\u03a6\3\2\2\2R\u03b8\3\2\2\2T\u03c0")
        buf.write("\3\2\2\2V\u03cd\3\2\2\2X\u03cf\3\2\2\2Z\u03da\3\2\2\2")
        buf.write("\\\u03f6\3\2\2\2^\u040c\3\2\2\2`\u040f\3\2\2\2b\u0413")
        buf.write("\3\2\2\2d\u0419\3\2\2\2f\u0437\3\2\2\2h\u0449\3\2\2\2")
        buf.write("j\u046e\3\2\2\2l\u0472\3\2\2\2n\u0475\3\2\2\2p\u047c\3")
        buf.write("\2\2\2r\u048e\3\2\2\2t\u0490\3\2\2\2v\u0492\3\2\2\2x\u04a5")
        buf.write("\3\2\2\2z\u04af\3\2\2\2|\u04b1\3\2\2\2~\u04c8\3\2\2\2")
        buf.write("\u0080\u04ca\3\2\2\2\u0082\u04d2\3\2\2\2\u0084\u04d4\3")
        buf.write("\2\2\2\u0086\u04dd\3\2\2\2\u0088\u04e6\3\2\2\2\u008a\u04e8")
        buf.write("\3\2\2\2\u008c\u04ea\3\2\2\2\u008e\u04ec\3\2\2\2\u0090")
        buf.write("\u04f1\3\2\2\2\u0092\u04f7\3\2\2\2\u0094\u0500\3\2\2\2")
        buf.write("\u0096\u0509\3\2\2\2\u0098\u0522\3\2\2\2\u009a\u0528\3")
        buf.write("\2\2\2\u009c\u0533\3\2\2\2\u009e\u054d\3\2\2\2\u00a0\u054f")
        buf.write("\3\2\2\2\u00a2\u055e\3\2\2\2\u00a4\u0573\3\2\2\2\u00a6")
        buf.write("\u0575\3\2\2\2\u00a8\u0584\3\2\2\2\u00aa\u0586\3\2\2\2")
        buf.write("\u00ac\u0589\3\2\2\2\u00ae\u0599\3\2\2\2\u00b0\u059b\3")
        buf.write("\2\2\2\u00b2\u059f\3\2\2\2\u00b4\u05a1\3\2\2\2\u00b6\u05a5")
        buf.write("\3\2\2\2\u00b8\u05a9\3\2\2\2\u00ba\u05ac\3\2\2\2\u00bc")
        buf.write("\u05b5\3\2\2\2\u00be\u05be\3\2\2\2\u00c0\u05c6\3\2\2\2")
        buf.write("\u00c2\u05c8\3\2\2\2\u00c4\u05ca\3\2\2\2\u00c6\u05d1\3")
        buf.write("\2\2\2\u00c8\u05e2\3\2\2\2\u00ca\u05e5\3\2\2\2\u00cc\u05ef")
        buf.write("\3\2\2\2\u00ce\u05ff\3\2\2\2\u00d0\u0601\3\2\2\2\u00d2")
        buf.write("\u0612\3\2\2\2\u00d4\u0624\3\2\2\2\u00d6\u062d\3\2\2\2")
        buf.write("\u00d8\u063e\3\2\2\2\u00da\u0644\3\2\2\2\u00dc\u0646\3")
        buf.write("\2\2\2\u00de\u064a\3\2\2\2\u00e0\u064c\3\2\2\2\u00e2\u0650")
        buf.write("\3\2\2\2\u00e4\u0667\3\2\2\2\u00e6\u0669\3\2\2\2\u00e8")
        buf.write("\u0674\3\2\2\2\u00ea\u067d\3\2\2\2\u00ec\u0683\3\2\2\2")
        buf.write("\u00ee\u068e\3\2\2\2\u00f0\u06a0\3\2\2\2\u00f2\u06af\3")
        buf.write("\2\2\2\u00f4\u06cb\3\2\2\2\u00f6\u06cd\3\2\2\2\u00f8\u06d1")
        buf.write("\3\2\2\2\u00fa\u06d3\3\2\2\2\u00fc\u06d6\3\2\2\2\u00fe")
        buf.write("\u06da\3\2\2\2\u0100\u06e6\3\2\2\2\u0102\u06ed\3\2\2\2")
        buf.write("\u0104\u06fd\3\2\2\2\u0106\u0713\3\2\2\2\u0108\u0715\3")
        buf.write("\2\2\2\u010a\u0732\3\2\2\2\u010c\u0734\3\2\2\2\u010e\u075e")
        buf.write("\3\2\2\2\u0110\u0761\3\2\2\2\u0112\u0777\3\2\2\2\u0114")
        buf.write("\u077e\3\2\2\2\u0116\u0783\3\2\2\2\u0118\u0787\3\2\2\2")
        buf.write("\u011a\u0789\3\2\2\2\u011c\u07a2\3\2\2\2\u011e\u07a6\3")
        buf.write("\2\2\2\u0120\u07a8\3\2\2\2\u0122\u07c1\3\2\2\2\u0124\u07c4")
        buf.write("\3\2\2\2\u0126\u07c8\3\2\2\2\u0128\u07ca\3\2\2\2\u012a")
        buf.write("\u07d5\3\2\2\2\u012c\u07e7\3\2\2\2\u012e\u07e9\3\2\2\2")
        buf.write("\u0130\u0807\3\2\2\2\u0132\u0809\3\2\2\2\u0134\u0813\3")
        buf.write("\2\2\2\u0136\u0815\3\2\2\2\u0138\u0819\3\2\2\2\u013a\u081c")
        buf.write("\3\2\2\2\u013c\u0841\3\2\2\2\u013e\u0848\3\2\2\2\u0140")
        buf.write("\u084a\3\2\2\2\u0142\u084c\3\2\2\2\u0144\u084e\3\2\2\2")
        buf.write("\u0146\u0851\3\2\2\2\u0148\u0855\3\2\2\2\u014a\u0859\3")
        buf.write("\2\2\2\u014c\u0867\3\2\2\2\u014e\u0873\3\2\2\2\u0150\u0877")
        buf.write("\3\2\2\2\u0152\u0879\3\2\2\2\u0154\u0881\3\2\2\2\u0156")
        buf.write("\u0883\3\2\2\2\u0158\u0889\3\2\2\2\u015a\u0896\3\2\2\2")
        buf.write("\u015c\u08c8\3\2\2\2\u015e\u08ca\3\2\2\2\u0160\u08e0\3")
        buf.write("\2\2\2\u0162\u08e2\3\2\2\2\u0164\u08e4\3\2\2\2\u0166\u08f7")
        buf.write("\3\2\2\2\u0168\u0904\3\2\2\2\u016a\u0907\3\2\2\2\u016c")
        buf.write("\u090c\3\2\2\2\u016e\u0911\3\2\2\2\u0170\u0915\3\2\2\2")
        buf.write("\u0172\u091c\3\2\2\2\u0174\u0920\3\2\2\2\u0176\u0934\3")
        buf.write("\2\2\2\u0178\u0936\3\2\2\2\u017a\u093c\3\2\2\2\u017c\u093e")
        buf.write("\3\2\2\2\u017e\u0945\3\2\2\2\u0180\u095b\3\2\2\2\u0182")
        buf.write("\u095d\3\2\2\2\u0184\u0960\3\2\2\2\u0186\u0994\3\2\2\2")
        buf.write("\u0188\u099d\3\2\2\2\u018a\u099f\3\2\2\2\u018c\u09a1\3")
        buf.write("\2\2\2\u018e\u09a3\3\2\2\2\u0190\u0192\5v<\2\u0191\u0190")
        buf.write("\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0193\3\2\2\2\u0193")
        buf.write("\u0194\7\2\2\3\u0194\3\3\2\2\2\u0195\u019e\5\u0188\u00c5")
        buf.write("\2\u0196\u019e\7@\2\2\u0197\u0198\7P\2\2\u0198\u0199\5")
        buf.write("X-\2\u0199\u019a\7Q\2\2\u019a\u019e\3\2\2\2\u019b\u019e")
        buf.write("\5\6\4\2\u019c\u019e\5\16\b\2\u019d\u0195\3\2\2\2\u019d")
        buf.write("\u0196\3\2\2\2\u019d\u0197\3\2\2\2\u019d\u019b\3\2\2\2")
        buf.write("\u019d\u019c\3\2\2\2\u019e\5\3\2\2\2\u019f\u01a2\5\b\5")
        buf.write("\2\u01a0\u01a2\5\n\6\2\u01a1\u019f\3\2\2\2\u01a1\u01a0")
        buf.write("\3\2\2\2\u01a2\7\3\2\2\2\u01a3\u01ad\7\177\2\2\u01a4\u01ad")
        buf.write("\5\u0152\u00aa\2\u01a5\u01ad\5\u0144\u00a3\2\u01a6\u01ad")
        buf.write("\5\u0154\u00ab\2\u01a7\u01a8\7^\2\2\u01a8\u01ad\5\u011e")
        buf.write("\u0090\2\u01a9\u01aa\7^\2\2\u01aa\u01ad\5\u009cO\2\u01ab")
        buf.write("\u01ad\5\u0160\u00b1\2\u01ac\u01a3\3\2\2\2\u01ac\u01a4")
        buf.write("\3\2\2\2\u01ac\u01a5\3\2\2\2\u01ac\u01a6\3\2\2\2\u01ac")
        buf.write("\u01a7\3\2\2\2\u01ac\u01a9\3\2\2\2\u01ac\u01ab\3\2\2\2")
        buf.write("\u01ad\t\3\2\2\2\u01ae\u01b0\5\f\7\2\u01af\u01b1\7?\2")
        buf.write("\2\u01b0\u01af\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b2")
        buf.write("\3\2\2\2\u01b2\u01b3\5\b\5\2\u01b3\13\3\2\2\2\u01b4\u01b5")
        buf.write("\b\7\1\2\u01b5\u01c0\7z\2\2\u01b6\u01b7\5\u009aN\2\u01b7")
        buf.write("\u01b8\7z\2\2\u01b8\u01c0\3\2\2\2\u01b9\u01ba\5\u00b2")
        buf.write("Z\2\u01ba\u01bb\7z\2\2\u01bb\u01c0\3\2\2\2\u01bc\u01bd")
        buf.write("\5\u009cO\2\u01bd\u01be\7z\2\2\u01be\u01c0\3\2\2\2\u01bf")
        buf.write("\u01b4\3\2\2\2\u01bf\u01b6\3\2\2\2\u01bf\u01b9\3\2\2\2")
        buf.write("\u01bf\u01bc\3\2\2\2\u01c0\u01cd\3\2\2\2\u01c1\u01c2\f")
        buf.write("\4\2\2\u01c2\u01c3\7\177\2\2\u01c3\u01cc\7z\2\2\u01c4")
        buf.write("\u01c6\f\3\2\2\u01c5\u01c7\7?\2\2\u01c6\u01c5\3\2\2\2")
        buf.write("\u01c6\u01c7\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9\5")
        buf.write("\u015e\u00b0\2\u01c9\u01ca\7z\2\2\u01ca\u01cc\3\2\2\2")
        buf.write("\u01cb\u01c1\3\2\2\2\u01cb\u01c4\3\2\2\2\u01cc\u01cf\3")
        buf.write("\2\2\2\u01cd\u01cb\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\r")
        buf.write("\3\2\2\2\u01cf\u01cd\3\2\2\2\u01d0\u01d2\5\20\t\2\u01d1")
        buf.write("\u01d3\5\36\20\2\u01d2\u01d1\3\2\2\2\u01d2\u01d3\3\2\2")
        buf.write("\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5\5b\62\2\u01d5\17\3")
        buf.write("\2\2\2\u01d6\u01d8\7R\2\2\u01d7\u01d9\5\22\n\2\u01d8\u01d7")
        buf.write("\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01da\3\2\2\2\u01da")
        buf.write("\u01db\7S\2\2\u01db\21\3\2\2\2\u01dc\u01e3\5\24\13\2\u01dd")
        buf.write("\u01e3\5\26\f\2\u01de\u01df\5\24\13\2\u01df\u01e0\7u\2")
        buf.write("\2\u01e0\u01e1\5\26\f\2\u01e1\u01e3\3\2\2\2\u01e2\u01dc")
        buf.write("\3\2\2\2\u01e2\u01dd\3\2\2\2\u01e2\u01de\3\2\2\2\u01e3")
        buf.write("\23\3\2\2\2\u01e4\u01e5\t\2\2\2\u01e5\25\3\2\2\2\u01e6")
        buf.write("\u01e7\b\f\1\2\u01e7\u01e9\5\30\r\2\u01e8\u01ea\7~\2\2")
        buf.write("\u01e9\u01e8\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01f3\3")
        buf.write("\2\2\2\u01eb\u01ec\f\3\2\2\u01ec\u01ed\7u\2\2\u01ed\u01ef")
        buf.write("\5\30\r\2\u01ee\u01f0\7~\2\2\u01ef\u01ee\3\2\2\2\u01ef")
        buf.write("\u01f0\3\2\2\2\u01f0\u01f2\3\2\2\2\u01f1\u01eb\3\2\2\2")
        buf.write("\u01f2\u01f5\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f4\3")
        buf.write("\2\2\2\u01f4\27\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f6\u01f9")
        buf.write("\5\32\16\2\u01f7\u01f9\5\34\17\2\u01f8\u01f6\3\2\2\2\u01f8")
        buf.write("\u01f7\3\2\2\2\u01f9\31\3\2\2\2\u01fa\u01ff\7\177\2\2")
        buf.write("\u01fb\u01fc\7\\\2\2\u01fc\u01ff\7\177\2\2\u01fd\u01ff")
        buf.write("\7@\2\2\u01fe\u01fa\3\2\2\2\u01fe\u01fb\3\2\2\2\u01fe")
        buf.write("\u01fd\3\2\2\2\u01ff\33\3\2\2\2\u0200\u0201\7\177\2\2")
        buf.write("\u0201\u0206\5\u0114\u008b\2\u0202\u0203\7\\\2\2\u0203")
        buf.write("\u0204\7\177\2\2\u0204\u0206\5\u0114\u008b\2\u0205\u0200")
        buf.write("\3\2\2\2\u0205\u0202\3\2\2\2\u0206\35\3\2\2\2\u0207\u0208")
        buf.write("\7P\2\2\u0208\u0209\5\u010a\u0086\2\u0209\u020b\7Q\2\2")
        buf.write("\u020a\u020c\7*\2\2\u020b\u020a\3\2\2\2\u020b\u020c\3")
        buf.write("\2\2\2\u020c\u020e\3\2\2\2\u020d\u020f\5\u017a\u00be\2")
        buf.write("\u020e\u020d\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0211\3")
        buf.write("\2\2\2\u0210\u0212\5\u00d0i\2\u0211\u0210\3\2\2\2\u0211")
        buf.write("\u0212\3\2\2\2\u0212\u0214\3\2\2\2\u0213\u0215\5\u00f2")
        buf.write("z\2\u0214\u0213\3\2\2\2\u0214\u0215\3\2\2\2\u0215\37\3")
        buf.write("\2\2\2\u0216\u0217\b\21\1\2\u0217\u0257\5\4\3\2\u0218")
        buf.write("\u0219\5\u0098M\2\u0219\u021b\7P\2\2\u021a\u021c\5\"\22")
        buf.write("\2\u021b\u021a\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021d")
        buf.write("\3\2\2\2\u021d\u021e\7Q\2\2\u021e\u0257\3\2\2\2\u021f")
        buf.write("\u0220\5\u0168\u00b5\2\u0220\u0222\7P\2\2\u0221\u0223")
        buf.write("\5\"\22\2\u0222\u0221\3\2\2\2\u0222\u0223\3\2\2\2\u0223")
        buf.write("\u0224\3\2\2\2\u0224\u0225\7Q\2\2\u0225\u0257\3\2\2\2")
        buf.write("\u0226\u0227\5\u0098M\2\u0227\u0228\5\u011c\u008f\2\u0228")
        buf.write("\u0257\3\2\2\2\u0229\u022a\5\u0168\u00b5\2\u022a\u022b")
        buf.write("\5\u011c\u008f\2\u022b\u0257\3\2\2\2\u022c\u022d\7\32")
        buf.write("\2\2\u022d\u022e\7a\2\2\u022e\u022f\5\u00fe\u0080\2\u022f")
        buf.write("\u0230\7b\2\2\u0230\u0231\7P\2\2\u0231\u0232\5X-\2\u0232")
        buf.write("\u0233\7Q\2\2\u0233\u0257\3\2\2\2\u0234\u0235\7<\2\2\u0235")
        buf.write("\u0236\7a\2\2\u0236\u0237\5\u00fe\u0080\2\u0237\u0238")
        buf.write("\7b\2\2\u0238\u0239\7P\2\2\u0239\u023a\5X-\2\u023a\u023b")
        buf.write("\7Q\2\2\u023b\u0257\3\2\2\2\u023c\u023d\7\65\2\2\u023d")
        buf.write("\u023e\7a\2\2\u023e\u023f\5\u00fe\u0080\2\u023f\u0240")
        buf.write("\7b\2\2\u0240\u0241\7P\2\2\u0241\u0242\5X-\2\u0242\u0243")
        buf.write("\7Q\2\2\u0243\u0257\3\2\2\2\u0244\u0245\7\23\2\2\u0245")
        buf.write("\u0246\7a\2\2\u0246\u0247\5\u00fe\u0080\2\u0247\u0248")
        buf.write("\7b\2\2\u0248\u0249\7P\2\2\u0249\u024a\5X-\2\u024a\u024b")
        buf.write("\7Q\2\2\u024b\u0257\3\2\2\2\u024c\u024d\7F\2\2\u024d\u024e")
        buf.write("\7P\2\2\u024e\u024f\5X-\2\u024f\u0250\7Q\2\2\u0250\u0257")
        buf.write("\3\2\2\2\u0251\u0252\7F\2\2\u0252\u0253\7P\2\2\u0253\u0254")
        buf.write("\5\u00fe\u0080\2\u0254\u0255\7Q\2\2\u0255\u0257\3\2\2")
        buf.write("\2\u0256\u0216\3\2\2\2\u0256\u0218\3\2\2\2\u0256\u021f")
        buf.write("\3\2\2\2\u0256\u0226\3\2\2\2\u0256\u0229\3\2\2\2\u0256")
        buf.write("\u022c\3\2\2\2\u0256\u0234\3\2\2\2\u0256\u023c\3\2\2\2")
        buf.write("\u0256\u0244\3\2\2\2\u0256\u024c\3\2\2\2\u0256\u0251\3")
        buf.write("\2\2\2\u0257\u0280\3\2\2\2\u0258\u0259\f\25\2\2\u0259")
        buf.write("\u025a\7R\2\2\u025a\u025b\5X-\2\u025b\u025c\7S\2\2\u025c")
        buf.write("\u027f\3\2\2\2\u025d\u025e\f\24\2\2\u025e\u025f\7R\2\2")
        buf.write("\u025f\u0260\5\u011c\u008f\2\u0260\u0261\7S\2\2\u0261")
        buf.write("\u027f\3\2\2\2\u0262\u0263\f\23\2\2\u0263\u0265\7P\2\2")
        buf.write("\u0264\u0266\5\"\22\2\u0265\u0264\3\2\2\2\u0265\u0266")
        buf.write("\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u027f\7Q\2\2\u0268")
        buf.write("\u0269\f\16\2\2\u0269\u026b\7|\2\2\u026a\u026c\7?\2\2")
        buf.write("\u026b\u026a\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026d\3")
        buf.write("\2\2\2\u026d\u027f\5\6\4\2\u026e\u026f\f\r\2\2\u026f\u0271")
        buf.write("\7w\2\2\u0270\u0272\7?\2\2\u0271\u0270\3\2\2\2\u0271\u0272")
        buf.write("\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u027f\5\6\4\2\u0274")
        buf.write("\u0275\f\f\2\2\u0275\u0276\7|\2\2\u0276\u027f\5$\23\2")
        buf.write("\u0277\u0278\f\13\2\2\u0278\u0279\7w\2\2\u0279\u027f\5")
        buf.write("$\23\2\u027a\u027b\f\n\2\2\u027b\u027f\7s\2\2\u027c\u027d")
        buf.write("\f\t\2\2\u027d\u027f\7t\2\2\u027e\u0258\3\2\2\2\u027e")
        buf.write("\u025d\3\2\2\2\u027e\u0262\3\2\2\2\u027e\u0268\3\2\2\2")
        buf.write("\u027e\u026e\3\2\2\2\u027e\u0274\3\2\2\2\u027e\u0277\3")
        buf.write("\2\2\2\u027e\u027a\3\2\2\2\u027e\u027c\3\2\2\2\u027f\u0282")
        buf.write("\3\2\2\2\u0280\u027e\3\2\2\2\u0280\u0281\3\2\2\2\u0281")
        buf.write("!\3\2\2\2\u0282\u0280\3\2\2\2\u0283\u0284\5\u011a\u008e")
        buf.write("\2\u0284#\3\2\2\2\u0285\u0287\5\f\7\2\u0286\u0285\3\2")
        buf.write("\2\2\u0286\u0287\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u0289")
        buf.write("\5\u009aN\2\u0289\u028a\7z\2\2\u028a\u028b\7^\2\2\u028b")
        buf.write("\u028c\5\u009aN\2\u028c\u029c\3\2\2\2\u028d\u028e\5\f")
        buf.write("\7\2\u028e\u028f\7?\2\2\u028f\u0290\5\u015e\u00b0\2\u0290")
        buf.write("\u0291\7z\2\2\u0291\u0292\7^\2\2\u0292\u0293\5\u009aN")
        buf.write("\2\u0293\u029c\3\2\2\2\u0294\u0296\5\f\7\2\u0295\u0294")
        buf.write("\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0297\3\2\2\2\u0297")
        buf.write("\u0298\7^\2\2\u0298\u029c\5\u009aN\2\u0299\u029a\7^\2")
        buf.write("\2\u029a\u029c\5\u009cO\2\u029b\u0286\3\2\2\2\u029b\u028d")
        buf.write("\3\2\2\2\u029b\u0295\3\2\2\2\u029b\u0299\3\2\2\2\u029c")
        buf.write("%\3\2\2\2\u029d\u02ba\5 \21\2\u029e\u029f\7s\2\2\u029f")
        buf.write("\u02ba\5:\36\2\u02a0\u02a1\7t\2\2\u02a1\u02ba\5:\36\2")
        buf.write("\u02a2\u02a3\5(\25\2\u02a3\u02a4\5:\36\2\u02a4\u02ba\3")
        buf.write("\2\2\2\u02a5\u02a6\79\2\2\u02a6\u02ba\5&\24\2\u02a7\u02a8")
        buf.write("\79\2\2\u02a8\u02a9\7P\2\2\u02a9\u02aa\5\u00fe\u0080\2")
        buf.write("\u02aa\u02ab\7Q\2\2\u02ab\u02ba\3\2\2\2\u02ac\u02ad\7")
        buf.write("9\2\2\u02ad\u02ae\7~\2\2\u02ae\u02af\7P\2\2\u02af\u02b0")
        buf.write("\7\177\2\2\u02b0\u02ba\7Q\2\2\u02b1\u02b2\7\6\2\2\u02b2")
        buf.write("\u02b3\7P\2\2\u02b3\u02b4\5\u00fe\u0080\2\u02b4\u02b5")
        buf.write("\7Q\2\2\u02b5\u02ba\3\2\2\2\u02b6\u02ba\58\35\2\u02b7")
        buf.write("\u02ba\5*\26\2\u02b8\u02ba\5\66\34\2\u02b9\u029d\3\2\2")
        buf.write("\2\u02b9\u029e\3\2\2\2\u02b9\u02a0\3\2\2\2\u02b9\u02a2")
        buf.write("\3\2\2\2\u02b9\u02a5\3\2\2\2\u02b9\u02a7\3\2\2\2\u02b9")
        buf.write("\u02ac\3\2\2\2\u02b9\u02b1\3\2\2\2\u02b9\u02b6\3\2\2\2")
        buf.write("\u02b9\u02b7\3\2\2\2\u02b9\u02b8\3\2\2\2\u02ba\'\3\2\2")
        buf.write("\2\u02bb\u02bc\t\3\2\2\u02bc)\3\2\2\2\u02bd\u02bf\7z\2")
        buf.write("\2\u02be\u02bd\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c0")
        buf.write("\3\2\2\2\u02c0\u02c2\7,\2\2\u02c1\u02c3\5,\27\2\u02c2")
        buf.write("\u02c1\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c4\3\2\2\2")
        buf.write("\u02c4\u02c6\5.\30\2\u02c5\u02c7\5\64\33\2\u02c6\u02c5")
        buf.write("\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02d6\3\2\2\2\u02c8")
        buf.write("\u02ca\7z\2\2\u02c9\u02c8\3\2\2\2\u02c9\u02ca\3\2\2\2")
        buf.write("\u02ca\u02cb\3\2\2\2\u02cb\u02cd\7,\2\2\u02cc\u02ce\5")
        buf.write(",\27\2\u02cd\u02cc\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02cf")
        buf.write("\3\2\2\2\u02cf\u02d0\7P\2\2\u02d0\u02d1\5\u00fe\u0080")
        buf.write("\2\u02d1\u02d3\7Q\2\2\u02d2\u02d4\5\64\33\2\u02d3\u02d2")
        buf.write("\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d6\3\2\2\2\u02d5")
        buf.write("\u02be\3\2\2\2\u02d5\u02c9\3\2\2\2\u02d6+\3\2\2\2\u02d7")
        buf.write("\u02d8\7P\2\2\u02d8\u02d9\5\"\22\2\u02d9\u02da\7Q\2\2")
        buf.write("\u02da-\3\2\2\2\u02db\u02dd\5\u0094K\2\u02dc\u02de\5\60")
        buf.write("\31\2\u02dd\u02dc\3\2\2\2\u02dd\u02de\3\2\2\2\u02de/\3")
        buf.write("\2\2\2\u02df\u02e1\5\u00f4{\2\u02e0\u02e2\5\60\31\2\u02e1")
        buf.write("\u02e0\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e5\3\2\2\2")
        buf.write("\u02e3\u02e5\5\62\32\2\u02e4\u02df\3\2\2\2\u02e4\u02e3")
        buf.write("\3\2\2\2\u02e5\61\3\2\2\2\u02e6\u02e7\b\32\1\2\u02e7\u02e8")
        buf.write("\7R\2\2\u02e8\u02e9\5X-\2\u02e9\u02eb\7S\2\2\u02ea\u02ec")
        buf.write("\5\u00d0i\2\u02eb\u02ea\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec")
        buf.write("\u02f6\3\2\2\2\u02ed\u02ee\f\3\2\2\u02ee\u02ef\7R\2\2")
        buf.write("\u02ef\u02f0\5Z.\2\u02f0\u02f2\7S\2\2\u02f1\u02f3\5\u00d0")
        buf.write("i\2\u02f2\u02f1\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f5")
        buf.write("\3\2\2\2\u02f4\u02ed\3\2\2\2\u02f5\u02f8\3\2\2\2\u02f6")
        buf.write("\u02f4\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\63\3\2\2\2\u02f8")
        buf.write("\u02f6\3\2\2\2\u02f9\u02fb\7P\2\2\u02fa\u02fc\5\"\22\2")
        buf.write("\u02fb\u02fa\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fd\3")
        buf.write("\2\2\2\u02fd\u0300\7Q\2\2\u02fe\u0300\5\u011c\u008f\2")
        buf.write("\u02ff\u02f9\3\2\2\2\u02ff\u02fe\3\2\2\2\u0300\65\3\2")
        buf.write("\2\2\u0301\u0303\7z\2\2\u0302\u0301\3\2\2\2\u0302\u0303")
        buf.write("\3\2\2\2\u0303\u0304\3\2\2\2\u0304\u0305\7\27\2\2\u0305")
        buf.write("\u030e\5:\36\2\u0306\u0308\7z\2\2\u0307\u0306\3\2\2\2")
        buf.write("\u0307\u0308\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u030a\7")
        buf.write("\27\2\2\u030a\u030b\7R\2\2\u030b\u030c\7S\2\2\u030c\u030e")
        buf.write("\5:\36\2\u030d\u0302\3\2\2\2\u030d\u0307\3\2\2\2\u030e")
        buf.write("\67\3\2\2\2\u030f\u0310\7-\2\2\u0310\u0311\7P\2\2\u0311")
        buf.write("\u0312\5X-\2\u0312\u0313\7Q\2\2\u03139\3\2\2\2\u0314\u031b")
        buf.write("\5&\24\2\u0315\u0316\7P\2\2\u0316\u0317\5\u00fe\u0080")
        buf.write("\2\u0317\u0318\7Q\2\2\u0318\u0319\5:\36\2\u0319\u031b")
        buf.write("\3\2\2\2\u031a\u0314\3\2\2\2\u031a\u0315\3\2\2\2\u031b")
        buf.write(";\3\2\2\2\u031c\u031d\b\37\1\2\u031d\u031e\5:\36\2\u031e")
        buf.write("\u0327\3\2\2\2\u031f\u0320\f\4\2\2\u0320\u0321\7}\2\2")
        buf.write("\u0321\u0326\5:\36\2\u0322\u0323\f\3\2\2\u0323\u0324\7")
        buf.write("v\2\2\u0324\u0326\5:\36\2\u0325\u031f\3\2\2\2\u0325\u0322")
        buf.write("\3\2\2\2\u0326\u0329\3\2\2\2\u0327\u0325\3\2\2\2\u0327")
        buf.write("\u0328\3\2\2\2\u0328=\3\2\2\2\u0329\u0327\3\2\2\2\u032a")
        buf.write("\u032b\b \1\2\u032b\u032c\5<\37\2\u032c\u0338\3\2\2\2")
        buf.write("\u032d\u032e\f\5\2\2\u032e\u032f\7X\2\2\u032f\u0337\5")
        buf.write("<\37\2\u0330\u0331\f\4\2\2\u0331\u0332\7Y\2\2\u0332\u0337")
        buf.write("\5<\37\2\u0333\u0334\f\3\2\2\u0334\u0335\7Z\2\2\u0335")
        buf.write("\u0337\5<\37\2\u0336\u032d\3\2\2\2\u0336\u0330\3\2\2\2")
        buf.write("\u0336\u0333\3\2\2\2\u0337\u033a\3\2\2\2\u0338\u0336\3")
        buf.write("\2\2\2\u0338\u0339\3\2\2\2\u0339?\3\2\2\2\u033a\u0338")
        buf.write("\3\2\2\2\u033b\u033c\b!\1\2\u033c\u033d\5> \2\u033d\u0346")
        buf.write("\3\2\2\2\u033e\u033f\f\4\2\2\u033f\u0340\7V\2\2\u0340")
        buf.write("\u0345\5> \2\u0341\u0342\f\3\2\2\u0342\u0343\7W\2\2\u0343")
        buf.write("\u0345\5> \2\u0344\u033e\3\2\2\2\u0344\u0341\3\2\2\2\u0345")
        buf.write("\u0348\3\2\2\2\u0346\u0344\3\2\2\2\u0346\u0347\3\2\2\2")
        buf.write("\u0347A\3\2\2\2\u0348\u0346\3\2\2\2\u0349\u034a\b\"\1")
        buf.write("\2\u034a\u034b\5@!\2\u034b\u0355\3\2\2\2\u034c\u034d\f")
        buf.write("\4\2\2\u034d\u034e\7k\2\2\u034e\u0354\5@!\2\u034f\u0350")
        buf.write("\f\3\2\2\u0350\u0351\5\u0182\u00c2\2\u0351\u0352\5@!\2")
        buf.write("\u0352\u0354\3\2\2\2\u0353\u034c\3\2\2\2\u0353\u034f\3")
        buf.write("\2\2\2\u0354\u0357\3\2\2\2\u0355\u0353\3\2\2\2\u0355\u0356")
        buf.write("\3\2\2\2\u0356C\3\2\2\2\u0357\u0355\3\2\2\2\u0358\u0359")
        buf.write("\b#\1\2\u0359\u035a\5B\"\2\u035a\u0369\3\2\2\2\u035b\u035c")
        buf.write("\f\6\2\2\u035c\u035d\7a\2\2\u035d\u0368\5B\"\2\u035e\u035f")
        buf.write("\f\5\2\2\u035f\u0360\7b\2\2\u0360\u0368\5B\"\2\u0361\u0362")
        buf.write("\f\4\2\2\u0362\u0363\7o\2\2\u0363\u0368\5B\"\2\u0364\u0365")
        buf.write("\f\3\2\2\u0365\u0366\7p\2\2\u0366\u0368\5B\"\2\u0367\u035b")
        buf.write("\3\2\2\2\u0367\u035e\3\2\2\2\u0367\u0361\3\2\2\2\u0367")
        buf.write("\u0364\3\2\2\2\u0368\u036b\3\2\2\2\u0369\u0367\3\2\2\2")
        buf.write("\u0369\u036a\3\2\2\2\u036aE\3\2\2\2\u036b\u0369\3\2\2")
        buf.write("\2\u036c\u036d\b$\1\2\u036d\u036e\5D#\2\u036e\u0377\3")
        buf.write("\2\2\2\u036f\u0370\f\4\2\2\u0370\u0371\7m\2\2\u0371\u0376")
        buf.write("\5D#\2\u0372\u0373\f\3\2\2\u0373\u0374\7n\2\2\u0374\u0376")
        buf.write("\5D#\2\u0375\u036f\3\2\2\2\u0375\u0372\3\2\2\2\u0376\u0379")
        buf.write("\3\2\2\2\u0377\u0375\3\2\2\2\u0377\u0378\3\2\2\2\u0378")
        buf.write("G\3\2\2\2\u0379\u0377\3\2\2\2\u037a\u037b\b%\1\2\u037b")
        buf.write("\u037c\5F$\2\u037c\u0382\3\2\2\2\u037d\u037e\f\3\2\2\u037e")
        buf.write("\u037f\7\\\2\2\u037f\u0381\5F$\2\u0380\u037d\3\2\2\2\u0381")
        buf.write("\u0384\3\2\2\2\u0382\u0380\3\2\2\2\u0382\u0383\3\2\2\2")
        buf.write("\u0383I\3\2\2\2\u0384\u0382\3\2\2\2\u0385\u0386\b&\1\2")
        buf.write("\u0386\u0387\5H%\2\u0387\u038d\3\2\2\2\u0388\u0389\f\3")
        buf.write("\2\2\u0389\u038a\7[\2\2\u038a\u038c\5H%\2\u038b\u0388")
        buf.write("\3\2\2\2\u038c\u038f\3\2\2\2\u038d\u038b\3\2\2\2\u038d")
        buf.write("\u038e\3\2\2\2\u038eK\3\2\2\2\u038f\u038d\3\2\2\2\u0390")
        buf.write("\u0391\b\'\1\2\u0391\u0392\5J&\2\u0392\u0398\3\2\2\2\u0393")
        buf.write("\u0394\f\3\2\2\u0394\u0395\7]\2\2\u0395\u0397\5J&\2\u0396")
        buf.write("\u0393\3\2\2\2\u0397\u039a\3\2\2\2\u0398\u0396\3\2\2\2")
        buf.write("\u0398\u0399\3\2\2\2\u0399M\3\2\2\2\u039a\u0398\3\2\2")
        buf.write("\2\u039b\u039c\b(\1\2\u039c\u039d\5L\'\2\u039d\u03a3\3")
        buf.write("\2\2\2\u039e\u039f\f\3\2\2\u039f\u03a0\7q\2\2\u03a0\u03a2")
        buf.write("\5L\'\2\u03a1\u039e\3\2\2\2\u03a2\u03a5\3\2\2\2\u03a3")
        buf.write("\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4O\3\2\2\2\u03a5")
        buf.write("\u03a3\3\2\2\2\u03a6\u03a7\b)\1\2\u03a7\u03a8\5N(\2\u03a8")
        buf.write("\u03ae\3\2\2\2\u03a9\u03aa\f\3\2\2\u03aa\u03ab\7r\2\2")
        buf.write("\u03ab\u03ad\5N(\2\u03ac\u03a9\3\2\2\2\u03ad\u03b0\3\2")
        buf.write("\2\2\u03ae\u03ac\3\2\2\2\u03ae\u03af\3\2\2\2\u03afQ\3")
        buf.write("\2\2\2\u03b0\u03ae\3\2\2\2\u03b1\u03b9\5P)\2\u03b2\u03b3")
        buf.write("\5P)\2\u03b3\u03b4\7x\2\2\u03b4\u03b5\5X-\2\u03b5\u03b6")
        buf.write("\7y\2\2\u03b6\u03b7\5T+\2\u03b7\u03b9\3\2\2\2\u03b8\u03b1")
        buf.write("\3\2\2\2\u03b8\u03b2\3\2\2\2\u03b9S\3\2\2\2\u03ba\u03c1")
        buf.write("\5R*\2\u03bb\u03bc\5P)\2\u03bc\u03bd\5V,\2\u03bd\u03be")
        buf.write("\5\u0118\u008d\2\u03be\u03c1\3\2\2\2\u03bf\u03c1\5\u0178")
        buf.write("\u00bd\2\u03c0\u03ba\3\2\2\2\u03c0\u03bb\3\2\2\2\u03c0")
        buf.write("\u03bf\3\2\2\2\u03c1U\3\2\2\2\u03c2\u03ce\7`\2\2\u03c3")
        buf.write("\u03ce\7e\2\2\u03c4\u03ce\7f\2\2\u03c5\u03ce\7g\2\2\u03c6")
        buf.write("\u03ce\7c\2\2\u03c7\u03ce\7d\2\2\u03c8\u03ce\5\u0184\u00c3")
        buf.write("\2\u03c9\u03ce\7l\2\2\u03ca\u03ce\7i\2\2\u03cb\u03ce\7")
        buf.write("h\2\2\u03cc\u03ce\7j\2\2\u03cd\u03c2\3\2\2\2\u03cd\u03c3")
        buf.write("\3\2\2\2\u03cd\u03c4\3\2\2\2\u03cd\u03c5\3\2\2\2\u03cd")
        buf.write("\u03c6\3\2\2\2\u03cd\u03c7\3\2\2\2\u03cd\u03c8\3\2\2\2")
        buf.write("\u03cd\u03c9\3\2\2\2\u03cd\u03ca\3\2\2\2\u03cd\u03cb\3")
        buf.write("\2\2\2\u03cd\u03cc\3\2\2\2\u03ceW\3\2\2\2\u03cf\u03d0")
        buf.write("\b-\1\2\u03d0\u03d1\5T+\2\u03d1\u03d7\3\2\2\2\u03d2\u03d3")
        buf.write("\f\3\2\2\u03d3\u03d4\7u\2\2\u03d4\u03d6\5T+\2\u03d5\u03d2")
        buf.write("\3\2\2\2\u03d6\u03d9\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d7")
        buf.write("\u03d8\3\2\2\2\u03d8Y\3\2\2\2\u03d9\u03d7\3\2\2\2\u03da")
        buf.write("\u03db\5R*\2\u03db[\3\2\2\2\u03dc\u03f7\5^\60\2\u03dd")
        buf.write("\u03df\5\u00d0i\2\u03de\u03dd\3\2\2\2\u03de\u03df\3\2")
        buf.write("\2\2\u03df\u03e0\3\2\2\2\u03e0\u03f7\5`\61\2\u03e1\u03e3")
        buf.write("\5\u00d0i\2\u03e2\u03e1\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3")
        buf.write("\u03e4\3\2\2\2\u03e4\u03f7\5b\62\2\u03e5\u03e7\5\u00d0")
        buf.write("i\2\u03e6\u03e5\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e8")
        buf.write("\3\2\2\2\u03e8\u03f7\5f\64\2\u03e9\u03eb\5\u00d0i\2\u03ea")
        buf.write("\u03e9\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ec\3\2\2\2")
        buf.write("\u03ec\u03f7\5j\66\2\u03ed\u03ef\5\u00d0i\2\u03ee\u03ed")
        buf.write("\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0")
        buf.write("\u03f7\5r:\2\u03f1\u03f7\5t;\2\u03f2\u03f4\5\u00d0i\2")
        buf.write("\u03f3\u03f2\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f5\3")
        buf.write("\2\2\2\u03f5\u03f7\5\u016e\u00b8\2\u03f6\u03dc\3\2\2\2")
        buf.write("\u03f6\u03de\3\2\2\2\u03f6\u03e2\3\2\2\2\u03f6\u03e6\3")
        buf.write("\2\2\2\u03f6\u03ea\3\2\2\2\u03f6\u03ee\3\2\2\2\u03f6\u03f1")
        buf.write("\3\2\2\2\u03f6\u03f3\3\2\2\2\u03f7]\3\2\2\2\u03f8\u03fa")
        buf.write("\5\u00d0i\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa")
        buf.write("\u03fb\3\2\2\2\u03fb\u03fc\7\177\2\2\u03fc\u03fd\7y\2")
        buf.write("\2\u03fd\u040d\5\\/\2\u03fe\u0400\5\u00d0i\2\u03ff\u03fe")
        buf.write("\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0401\3\2\2\2\u0401")
        buf.write("\u0402\7\13\2\2\u0402\u0403\5Z.\2\u0403\u0404\7y\2\2\u0404")
        buf.write("\u0405\5\\/\2\u0405\u040d\3\2\2\2\u0406\u0408\5\u00d0")
        buf.write("i\2\u0407\u0406\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u0409")
        buf.write("\3\2\2\2\u0409\u040a\7\26\2\2\u040a\u040b\7y\2\2\u040b")
        buf.write("\u040d\5\\/\2\u040c\u03f9\3\2\2\2\u040c\u03ff\3\2\2\2")
        buf.write("\u040c\u0407\3\2\2\2\u040d_\3\2\2\2\u040e\u0410\5X-\2")
        buf.write("\u040f\u040e\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0411\3")
        buf.write("\2\2\2\u0411\u0412\7{\2\2\u0412a\3\2\2\2\u0413\u0415\7")
        buf.write("T\2\2\u0414\u0416\5d\63\2\u0415\u0414\3\2\2\2\u0415\u0416")
        buf.write("\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0418\7U\2\2\u0418")
        buf.write("c\3\2\2\2\u0419\u041a\b\63\1\2\u041a\u041b\5\\/\2\u041b")
        buf.write("\u0420\3\2\2\2\u041c\u041d\f\3\2\2\u041d\u041f\5\\/\2")
        buf.write("\u041e\u041c\3\2\2\2\u041f\u0422\3\2\2\2\u0420\u041e\3")
        buf.write("\2\2\2\u0420\u0421\3\2\2\2\u0421e\3\2\2\2\u0422\u0420")
        buf.write("\3\2\2\2\u0423\u0424\7&\2\2\u0424\u0425\7P\2\2\u0425\u0426")
        buf.write("\5h\65\2\u0426\u0427\7Q\2\2\u0427\u0428\5\\/\2\u0428\u0438")
        buf.write("\3\2\2\2\u0429\u042a\7&\2\2\u042a\u042b\7P\2\2\u042b\u042c")
        buf.write("\5h\65\2\u042c\u042d\7Q\2\2\u042d\u042e\5\\/\2\u042e\u042f")
        buf.write("\7\33\2\2\u042f\u0430\5\\/\2\u0430\u0438\3\2\2\2\u0431")
        buf.write("\u0432\7>\2\2\u0432\u0433\7P\2\2\u0433\u0434\5h\65\2\u0434")
        buf.write("\u0435\7Q\2\2\u0435\u0436\5\\/\2\u0436\u0438\3\2\2\2\u0437")
        buf.write("\u0423\3\2\2\2\u0437\u0429\3\2\2\2\u0437\u0431\3\2\2\2")
        buf.write("\u0438g\3\2\2\2\u0439\u044a\5X-\2\u043a\u043c\5\u00d0")
        buf.write("i\2\u043b\u043a\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043d")
        buf.write("\3\2\2\2\u043d\u043e\5\u0088E\2\u043e\u043f\5\u00eav\2")
        buf.write("\u043f\u0440\7`\2\2\u0440\u0441\5\u0118\u008d\2\u0441")
        buf.write("\u044a\3\2\2\2\u0442\u0444\5\u00d0i\2\u0443\u0442\3\2")
        buf.write("\2\2\u0443\u0444\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0446")
        buf.write("\5\u0088E\2\u0446\u0447\5\u00eav\2\u0447\u0448\5\u011c")
        buf.write("\u008f\2\u0448\u044a\3\2\2\2\u0449\u0439\3\2\2\2\u0449")
        buf.write("\u043b\3\2\2\2\u0449\u0443\3\2\2\2\u044ai\3\2\2\2\u044b")
        buf.write("\u044c\7O\2\2\u044c\u044d\7P\2\2\u044d\u044e\5h\65\2\u044e")
        buf.write("\u044f\7Q\2\2\u044f\u0450\5\\/\2\u0450\u046f\3\2\2\2\u0451")
        buf.write("\u0452\7\30\2\2\u0452\u0453\5\\/\2\u0453\u0454\7O\2\2")
        buf.write("\u0454\u0455\7P\2\2\u0455\u0456\5X-\2\u0456\u0457\7Q\2")
        buf.write("\2\u0457\u0458\7{\2\2\u0458\u046f\3\2\2\2\u0459\u045a")
        buf.write("\7#\2\2\u045a\u045b\7P\2\2\u045b\u045d\5l\67\2\u045c\u045e")
        buf.write("\5h\65\2\u045d\u045c\3\2\2\2\u045d\u045e\3\2\2\2\u045e")
        buf.write("\u045f\3\2\2\2\u045f\u0461\7{\2\2\u0460\u0462\5X-\2\u0461")
        buf.write("\u0460\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u0463\3\2\2\2")
        buf.write("\u0463\u0464\7Q\2\2\u0464\u0465\5\\/\2\u0465\u046f\3\2")
        buf.write("\2\2\u0466\u0467\7#\2\2\u0467\u0468\7P\2\2\u0468\u0469")
        buf.write("\5n8\2\u0469\u046a\7y\2\2\u046a\u046b\5p9\2\u046b\u046c")
        buf.write("\7Q\2\2\u046c\u046d\5\\/\2\u046d\u046f\3\2\2\2\u046e\u044b")
        buf.write("\3\2\2\2\u046e\u0451\3\2\2\2\u046e\u0459\3\2\2\2\u046e")
        buf.write("\u0466\3\2\2\2\u046fk\3\2\2\2\u0470\u0473\5`\61\2\u0471")
        buf.write("\u0473\5~@\2\u0472\u0470\3\2\2\2\u0472\u0471\3\2\2\2\u0473")
        buf.write("m\3\2\2\2\u0474\u0476\5\u00d0i\2\u0475\u0474\3\2\2\2\u0475")
        buf.write("\u0476\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u0478\5\u0088")
        buf.write("E\2\u0478\u0479\5\u00eav\2\u0479o\3\2\2\2\u047a\u047d")
        buf.write("\5X-\2\u047b\u047d\5\u011c\u008f\2\u047c\u047a\3\2\2\2")
        buf.write("\u047c\u047b\3\2\2\2\u047dq\3\2\2\2\u047e\u047f\7\n\2")
        buf.write("\2\u047f\u048f\7{\2\2\u0480\u0481\7\24\2\2\u0481\u048f")
        buf.write("\7{\2\2\u0482\u0484\7\66\2\2\u0483\u0485\5X-\2\u0484\u0483")
        buf.write("\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0486\3\2\2\2\u0486")
        buf.write("\u048f\7{\2\2\u0487\u0488\7\66\2\2\u0488\u0489\5\u011c")
        buf.write("\u008f\2\u0489\u048a\7{\2\2\u048a\u048f\3\2\2\2\u048b")
        buf.write("\u048c\7%\2\2\u048c\u048d\7\177\2\2\u048d\u048f\7{\2\2")
        buf.write("\u048e\u047e\3\2\2\2\u048e\u0480\3\2\2\2\u048e\u0482\3")
        buf.write("\2\2\2\u048e\u0487\3\2\2\2\u048e\u048b\3\2\2\2\u048fs")
        buf.write("\3\2\2\2\u0490\u0491\5z>\2\u0491u\3\2\2\2\u0492\u0493")
        buf.write("\b<\1\2\u0493\u0494\5x=\2\u0494\u0499\3\2\2\2\u0495\u0496")
        buf.write("\f\3\2\2\u0496\u0498\5x=\2\u0497\u0495\3\2\2\2\u0498\u049b")
        buf.write("\3\2\2\2\u0499\u0497\3\2\2\2\u0499\u049a\3\2\2\2\u049a")
        buf.write("w\3\2\2\2\u049b\u0499\3\2\2\2\u049c\u04a6\5z>\2\u049d")
        buf.write("\u04a6\5\u0110\u0089\2\u049e\u04a6\5\u0156\u00ac\2\u049f")
        buf.write("\u04a6\5\u016a\u00b6\2\u04a0\u04a6\5\u016c\u00b7\2\u04a1")
        buf.write("\u04a6\5\u00ceh\2\u04a2\u04a6\5\u00b6\\\2\u04a3\u04a6")
        buf.write("\5\u0082B\2\u04a4\u04a6\5\u0084C\2\u04a5\u049c\3\2\2\2")
        buf.write("\u04a5\u049d\3\2\2\2\u04a5\u049e\3\2\2\2\u04a5\u049f\3")
        buf.write("\2\2\2\u04a5\u04a0\3\2\2\2\u04a5\u04a1\3\2\2\2\u04a5\u04a2")
        buf.write("\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a5\u04a4\3\2\2\2\u04a6")
        buf.write("y\3\2\2\2\u04a7\u04b0\5~@\2\u04a8\u04b0\5\u00ccg\2\u04a9")
        buf.write("\u04b0\5\u00c4c\2\u04aa\u04b0\5\u00c8e\2\u04ab\u04b0\5")
        buf.write("\u00caf\2\u04ac\u04b0\5\u0080A\2\u04ad\u04b0\5|?\2\u04ae")
        buf.write("\u04b0\5\u00a6T\2\u04af\u04a7\3\2\2\2\u04af\u04a8\3\2")
        buf.write("\2\2\u04af\u04a9\3\2\2\2\u04af\u04aa\3\2\2\2\u04af\u04ab")
        buf.write("\3\2\2\2\u04af\u04ac\3\2\2\2\u04af\u04ad\3\2\2\2\u04af")
        buf.write("\u04ae\3\2\2\2\u04b0{\3\2\2\2\u04b1\u04b2\7J\2\2\u04b2")
        buf.write("\u04b4\7\177\2\2\u04b3\u04b5\5\u00d0i\2\u04b4\u04b3\3")
        buf.write("\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u04b7")
        buf.write("\7`\2\2\u04b7\u04b8\5\u00fe\u0080\2\u04b8\u04b9\7{\2\2")
        buf.write("\u04b9}\3\2\2\2\u04ba\u04bc\5\u0088E\2\u04bb\u04ba\3\2")
        buf.write("\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04be\3\2\2\2\u04bd\u04bf")
        buf.write("\5\u00e6t\2\u04be\u04bd\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf")
        buf.write("\u04c0\3\2\2\2\u04c0\u04c9\7{\2\2\u04c1\u04c3\5\u00d0")
        buf.write("i\2\u04c2\u04c4\5\u0088E\2\u04c3\u04c2\3\2\2\2\u04c3\u04c4")
        buf.write("\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c6\5\u00e6t\2\u04c6")
        buf.write("\u04c7\7{\2\2\u04c7\u04c9\3\2\2\2\u04c8\u04bb\3\2\2\2")
        buf.write("\u04c8\u04c1\3\2\2\2\u04c9\177\3\2\2\2\u04ca\u04cb\7;")
        buf.write("\2\2\u04cb\u04cc\7P\2\2\u04cc\u04cd\5Z.\2\u04cd\u04ce")
        buf.write("\7u\2\2\u04ce\u04cf\7\u0088\2\2\u04cf\u04d0\7Q\2\2\u04d0")
        buf.write("\u04d1\7{\2\2\u04d1\u0081\3\2\2\2\u04d2\u04d3\7{\2\2\u04d3")
        buf.write("\u0083\3\2\2\2\u04d4\u04d5\5\u00d0i\2\u04d5\u04d6\7{\2")
        buf.write("\2\u04d6\u0085\3\2\2\2\u04d7\u04de\5\u008aF\2\u04d8\u04de")
        buf.write("\5\u0090I\2\u04d9\u04de\5\u008cG\2\u04da\u04de\7$\2\2")
        buf.write("\u04db\u04de\7E\2\2\u04dc\u04de\7\22\2\2\u04dd\u04d7\3")
        buf.write("\2\2\2\u04dd\u04d8\3\2\2\2\u04dd\u04d9\3\2\2\2\u04dd\u04da")
        buf.write("\3\2\2\2\u04dd\u04db\3\2\2\2\u04dd\u04dc\3\2\2\2\u04de")
        buf.write("\u0087\3\2\2\2\u04df\u04e1\5\u0086D\2\u04e0\u04e2\5\u00d0")
        buf.write("i\2\u04e1\u04e0\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04e7")
        buf.write("\3\2\2\2\u04e3\u04e4\5\u0086D\2\u04e4\u04e5\5\u0088E\2")
        buf.write("\u04e5\u04e7\3\2\2\2\u04e6\u04df\3\2\2\2\u04e6\u04e3\3")
        buf.write("\2\2\2\u04e7\u0089\3\2\2\2\u04e8\u04e9\t\4\2\2\u04e9\u008b")
        buf.write("\3\2\2\2\u04ea\u04eb\t\5\2\2\u04eb\u008d\3\2\2\2\u04ec")
        buf.write("\u04ed\7\177\2\2\u04ed\u008f\3\2\2\2\u04ee\u04f2\5\u0092")
        buf.write("J\2\u04ef\u04f2\5\u0120\u0091\2\u04f0\u04f2\5\u00a2R\2")
        buf.write("\u04f1\u04ee\3\2\2\2\u04f1\u04ef\3\2\2\2\u04f1\u04f0\3")
        buf.write("\2\2\2\u04f2\u0091\3\2\2\2\u04f3\u04f8\5\u0098M\2\u04f4")
        buf.write("\u04f8\5\u009eP\2\u04f5\u04f8\5\u0168\u00b5\2\u04f6\u04f8")
        buf.write("\5\u00f8}\2\u04f7\u04f3\3\2\2\2\u04f7\u04f4\3\2\2\2\u04f7")
        buf.write("\u04f5\3\2\2\2\u04f7\u04f6\3\2\2\2\u04f8\u0093\3\2\2\2")
        buf.write("\u04f9\u04fb\5\u0090I\2\u04fa\u04fc\5\u00d0i\2\u04fb\u04fa")
        buf.write("\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u0501\3\2\2\2\u04fd")
        buf.write("\u04fe\5\u0090I\2\u04fe\u04ff\5\u0094K\2\u04ff\u0501\3")
        buf.write("\2\2\2\u0500\u04f9\3\2\2\2\u0500\u04fd\3\2\2\2\u0501\u0095")
        buf.write("\3\2\2\2\u0502\u0504\5\u0092J\2\u0503\u0505\5\u00d0i\2")
        buf.write("\u0504\u0503\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u050a\3")
        buf.write("\2\2\2\u0506\u0507\5\u0092J\2\u0507\u0508\5\u0096L\2\u0508")
        buf.write("\u050a\3\2\2\2\u0509\u0502\3\2\2\2\u0509\u0506\3\2\2\2")
        buf.write("\u050a\u0097\3\2\2\2\u050b\u050d\5\f\7\2\u050c\u050b\3")
        buf.write("\2\2\2\u050c\u050d\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u0523")
        buf.write("\5\u009aN\2\u050f\u0510\5\f\7\2\u0510\u0511\7?\2\2\u0511")
        buf.write("\u0512\5\u015e\u00b0\2\u0512\u0523\3\2\2\2\u0513\u0523")
        buf.write("\7\r\2\2\u0514\u0523\7\16\2\2\u0515\u0523\7\17\2\2\u0516")
        buf.write("\u0523\7N\2\2\u0517\u0523\7\t\2\2\u0518\u0523\7\67\2\2")
        buf.write("\u0519\u0523\7(\2\2\u051a\u0523\7)\2\2\u051b\u0523\78")
        buf.write("\2\2\u051c\u0523\7I\2\2\u051d\u0523\7\"\2\2\u051e\u0523")
        buf.write("\7\31\2\2\u051f\u0523\7L\2\2\u0520\u0523\7\b\2\2\u0521")
        buf.write("\u0523\5\u009cO\2\u0522\u050c\3\2\2\2\u0522\u050f\3\2")
        buf.write("\2\2\u0522\u0513\3\2\2\2\u0522\u0514\3\2\2\2\u0522\u0515")
        buf.write("\3\2\2\2\u0522\u0516\3\2\2\2\u0522\u0517\3\2\2\2\u0522")
        buf.write("\u0518\3\2\2\2\u0522\u0519\3\2\2\2\u0522\u051a\3\2\2\2")
        buf.write("\u0522\u051b\3\2\2\2\u0522\u051c\3\2\2\2\u0522\u051d\3")
        buf.write("\2\2\2\u0522\u051e\3\2\2\2\u0522\u051f\3\2\2\2\u0522\u0520")
        buf.write("\3\2\2\2\u0522\u0521\3\2\2\2\u0523\u0099\3\2\2\2\u0524")
        buf.write("\u0529\5\u011e\u0090\2\u0525\u0529\5\u00a0Q\2\u0526\u0529")
        buf.write("\5\u008eH\2\u0527\u0529\5\u015e\u00b0\2\u0528\u0524\3")
        buf.write("\2\2\2\u0528\u0525\3\2\2\2\u0528\u0526\3\2\2\2\u0528\u0527")
        buf.write("\3\2\2\2\u0529\u009b\3\2\2\2\u052a\u052b\7\25\2\2\u052b")
        buf.write("\u052c\7P\2\2\u052c\u052d\5X-\2\u052d\u052e\7Q\2\2\u052e")
        buf.write("\u0534\3\2\2\2\u052f\u0530\7\25\2\2\u0530\u0531\7P\2\2")
        buf.write("\u0531\u0532\7\b\2\2\u0532\u0534\7Q\2\2\u0533\u052a\3")
        buf.write("\2\2\2\u0533\u052f\3\2\2\2\u0534\u009d\3\2\2\2\u0535\u0537")
        buf.write("\5\u0128\u0095\2\u0536\u0538\5\u00d0i\2\u0537\u0536\3")
        buf.write("\2\2\2\u0537\u0538\3\2\2\2\u0538\u053a\3\2\2\2\u0539\u053b")
        buf.write("\5\f\7\2\u053a\u0539\3\2\2\2\u053a\u053b\3\2\2\2\u053b")
        buf.write("\u053c\3\2\2\2\u053c\u053d\7\177\2\2\u053d\u054e\3\2\2")
        buf.write("\2\u053e\u053f\5\u0128\u0095\2\u053f\u0540\5\u015e\u00b0")
        buf.write("\2\u0540\u054e\3\2\2\2\u0541\u0542\5\u0128\u0095\2\u0542")
        buf.write("\u0544\5\f\7\2\u0543\u0545\7?\2\2\u0544\u0543\3\2\2\2")
        buf.write("\u0544\u0545\3\2\2\2\u0545\u0546\3\2\2\2\u0546\u0547\5")
        buf.write("\u015e\u00b0\2\u0547\u054e\3\2\2\2\u0548\u054a\7\34\2")
        buf.write("\2\u0549\u054b\5\f\7\2\u054a\u0549\3\2\2\2\u054a\u054b")
        buf.write("\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054e\7\177\2\2\u054d")
        buf.write("\u0535\3\2\2\2\u054d\u053e\3\2\2\2\u054d\u0541\3\2\2\2")
        buf.write("\u054d\u0548\3\2\2\2\u054e\u009f\3\2\2\2\u054f\u0550\7")
        buf.write("\177\2\2\u0550\u00a1\3\2\2\2\u0551\u0552\5\u00a4S\2\u0552")
        buf.write("\u0554\7T\2\2\u0553\u0555\5\u00acW\2\u0554\u0553\3\2\2")
        buf.write("\2\u0554\u0555\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u0557")
        buf.write("\7U\2\2\u0557\u055f\3\2\2\2\u0558\u0559\5\u00a4S\2\u0559")
        buf.write("\u055a\7T\2\2\u055a\u055b\5\u00acW\2\u055b\u055c\7u\2")
        buf.write("\2\u055c\u055d\7U\2\2\u055d\u055f\3\2\2\2\u055e\u0551")
        buf.write("\3\2\2\2\u055e\u0558\3\2\2\2\u055f\u00a3\3\2\2\2\u0560")
        buf.write("\u0562\5\u00a8U\2\u0561\u0563\5\u00d0i\2\u0562\u0561\3")
        buf.write("\2\2\2\u0562\u0563\3\2\2\2\u0563\u0565\3\2\2\2\u0564\u0566")
        buf.write("\7\177\2\2\u0565\u0564\3\2\2\2\u0565\u0566\3\2\2\2\u0566")
        buf.write("\u0568\3\2\2\2\u0567\u0569\5\u00aaV\2\u0568\u0567\3\2")
        buf.write("\2\2\u0568\u0569\3\2\2\2\u0569\u0574\3\2\2\2\u056a\u056c")
        buf.write("\5\u00a8U\2\u056b\u056d\5\u00d0i\2\u056c\u056b\3\2\2\2")
        buf.write("\u056c\u056d\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u056f\5")
        buf.write("\f\7\2\u056f\u0571\7\177\2\2\u0570\u0572\5\u00aaV\2\u0571")
        buf.write("\u0570\3\2\2\2\u0571\u0572\3\2\2\2\u0572\u0574\3\2\2\2")
        buf.write("\u0573\u0560\3\2\2\2\u0573\u056a\3\2\2\2\u0574\u00a5\3")
        buf.write("\2\2\2\u0575\u0577\5\u00a8U\2\u0576\u0578\5\u00d0i\2\u0577")
        buf.write("\u0576\3\2\2\2\u0577\u0578\3\2\2\2\u0578\u0579\3\2\2\2")
        buf.write("\u0579\u057b\7\177\2\2\u057a\u057c\5\u00aaV\2\u057b\u057a")
        buf.write("\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u057d\3\2\2\2\u057d")
        buf.write("\u057e\7{\2\2\u057e\u00a7\3\2\2\2\u057f\u0585\7\34\2\2")
        buf.write("\u0580\u0581\7\34\2\2\u0581\u0585\7\20\2\2\u0582\u0583")
        buf.write("\7\34\2\2\u0583\u0585\7=\2\2\u0584\u057f\3\2\2\2\u0584")
        buf.write("\u0580\3\2\2\2\u0584\u0582\3\2\2\2\u0585\u00a9\3\2\2\2")
        buf.write("\u0586\u0587\7y\2\2\u0587\u0588\5\u0094K\2\u0588\u00ab")
        buf.write("\3\2\2\2\u0589\u058a\bW\1\2\u058a\u058b\5\u00aeX\2\u058b")
        buf.write("\u0591\3\2\2\2\u058c\u058d\f\3\2\2\u058d\u058e\7u\2\2")
        buf.write("\u058e\u0590\5\u00aeX\2\u058f\u058c\3\2\2\2\u0590\u0593")
        buf.write("\3\2\2\2\u0591\u058f\3\2\2\2\u0591\u0592\3\2\2\2\u0592")
        buf.write("\u00ad\3\2\2\2\u0593\u0591\3\2\2\2\u0594\u059a\5\u00b0")
        buf.write("Y\2\u0595\u0596\5\u00b0Y\2\u0596\u0597\7`\2\2\u0597\u0598")
        buf.write("\5Z.\2\u0598\u059a\3\2\2\2\u0599\u0594\3\2\2\2\u0599\u0595")
        buf.write("\3\2\2\2\u059a\u00af\3\2\2\2\u059b\u059c\7\177\2\2\u059c")
        buf.write("\u00b1\3\2\2\2\u059d\u05a0\5\u00b4[\2\u059e\u05a0\5\u00c2")
        buf.write("b\2\u059f\u059d\3\2\2\2\u059f\u059e\3\2\2\2\u05a0\u00b3")
        buf.write("\3\2\2\2\u05a1\u05a2\7\177\2\2\u05a2\u00b5\3\2\2\2\u05a3")
        buf.write("\u05a6\5\u00b8]\2\u05a4\u05a6\5\u00be`\2\u05a5\u05a3\3")
        buf.write("\2\2\2\u05a5\u05a4\3\2\2\2\u05a6\u00b7\3\2\2\2\u05a7\u05aa")
        buf.write("\5\u00ba^\2\u05a8\u05aa\5\u00bc_\2\u05a9\u05a7\3\2\2\2")
        buf.write("\u05a9\u05a8\3\2\2\2\u05aa\u00b9\3\2\2\2\u05ab\u05ad\7")
        buf.write("\'\2\2\u05ac\u05ab\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05ae")
        buf.write("\3\2\2\2\u05ae\u05af\7+\2\2\u05af\u05b0\7\177\2\2\u05b0")
        buf.write("\u05b1\7T\2\2\u05b1\u05b2\5\u00c0a\2\u05b2\u05b3\7U\2")
        buf.write("\2\u05b3\u00bb\3\2\2\2\u05b4\u05b6\7\'\2\2\u05b5\u05b4")
        buf.write("\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7")
        buf.write("\u05b8\7+\2\2\u05b8\u05b9\5\u00b4[\2\u05b9\u05ba\7T\2")
        buf.write("\2\u05ba\u05bb\5\u00c0a\2\u05bb\u05bc\7U\2\2\u05bc\u00bd")
        buf.write("\3\2\2\2\u05bd\u05bf\7\'\2\2\u05be\u05bd\3\2\2\2\u05be")
        buf.write("\u05bf\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c1\7+\2\2")
        buf.write("\u05c1\u05c2\7T\2\2\u05c2\u05c3\5\u00c0a\2\u05c3\u05c4")
        buf.write("\7U\2\2\u05c4\u00bf\3\2\2\2\u05c5\u05c7\5v<\2\u05c6\u05c5")
        buf.write("\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u00c1\3\2\2\2\u05c8")
        buf.write("\u05c9\7\177\2\2\u05c9\u00c3\3\2\2\2\u05ca\u05cb\7+\2")
        buf.write("\2\u05cb\u05cc\7\177\2\2\u05cc\u05cd\7`\2\2\u05cd\u05ce")
        buf.write("\5\u00c6d\2\u05ce\u05cf\7{\2\2\u05cf\u00c5\3\2\2\2\u05d0")
        buf.write("\u05d2\5\f\7\2\u05d1\u05d0\3\2\2\2\u05d1\u05d2\3\2\2\2")
        buf.write("\u05d2\u05d3\3\2\2\2\u05d3\u05d4\5\u00b2Z\2\u05d4\u00c7")
        buf.write("\3\2\2\2\u05d5\u05d7\7J\2\2\u05d6\u05d8\7G\2\2\u05d7\u05d6")
        buf.write("\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9")
        buf.write("\u05da\5\f\7\2\u05da\u05db\5\b\5\2\u05db\u05dc\7{\2\2")
        buf.write("\u05dc\u05e3\3\2\2\2\u05dd\u05de\7J\2\2\u05de\u05df\7")
        buf.write("z\2\2\u05df\u05e0\5\b\5\2\u05e0\u05e1\7{\2\2\u05e1\u05e3")
        buf.write("\3\2\2\2\u05e2\u05d5\3\2\2\2\u05e2\u05dd\3\2\2\2\u05e3")
        buf.write("\u00c9\3\2\2\2\u05e4\u05e6\5\u00d0i\2\u05e5\u05e4\3\2")
        buf.write("\2\2\u05e5\u05e6\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\u05e8")
        buf.write("\7J\2\2\u05e8\u05ea\7+\2\2\u05e9\u05eb\5\f\7\2\u05ea\u05e9")
        buf.write("\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec")
        buf.write("\u05ed\5\u00b2Z\2\u05ed\u05ee\7{\2\2\u05ee\u00cb\3\2\2")
        buf.write("\2\u05ef\u05f0\7\7\2\2\u05f0\u05f1\7P\2\2\u05f1\u05f2")
        buf.write("\7\u0088\2\2\u05f2\u05f3\7Q\2\2\u05f3\u05f4\7{\2\2\u05f4")
        buf.write("\u00cd\3\2\2\2\u05f5\u05f6\7\37\2\2\u05f6\u05f7\7\u0088")
        buf.write("\2\2\u05f7\u05f9\7T\2\2\u05f8\u05fa\5v<\2\u05f9\u05f8")
        buf.write("\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb")
        buf.write("\u0600\7U\2\2\u05fc\u05fd\7\37\2\2\u05fd\u05fe\7\u0088")
        buf.write("\2\2\u05fe\u0600\5x=\2\u05ff\u05f5\3\2\2\2\u05ff\u05fc")
        buf.write("\3\2\2\2\u0600\u00cf\3\2\2\2\u0601\u0602\bi\1\2\u0602")
        buf.write("\u0603\5\u00d2j\2\u0603\u0608\3\2\2\2\u0604\u0605\f\3")
        buf.write("\2\2\u0605\u0607\5\u00d2j\2\u0606\u0604\3\2\2\2\u0607")
        buf.write("\u060a\3\2\2\2\u0608\u0606\3\2\2\2\u0608\u0609\3\2\2\2")
        buf.write("\u0609\u00d1\3\2\2\2\u060a\u0608\3\2\2\2\u060b\u060c\7")
        buf.write("R\2\2\u060c\u060d\7R\2\2\u060d\u060e\5\u00d6l\2\u060e")
        buf.write("\u060f\7S\2\2\u060f\u0610\7S\2\2\u0610\u0613\3\2\2\2\u0611")
        buf.write("\u0613\5\u00d4k\2\u0612\u060b\3\2\2\2\u0612\u0611\3\2")
        buf.write("\2\2\u0613\u00d3\3\2\2\2\u0614\u0615\7\5\2\2\u0615\u0616")
        buf.write("\7P\2\2\u0616\u0618\5\u00fe\u0080\2\u0617\u0619\7~\2\2")
        buf.write("\u0618\u0617\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u061a\3")
        buf.write("\2\2\2\u061a\u061b\7Q\2\2\u061b\u0625\3\2\2\2\u061c\u061d")
        buf.write("\7\5\2\2\u061d\u061e\7P\2\2\u061e\u0620\5Z.\2\u061f\u0621")
        buf.write("\7~\2\2\u0620\u061f\3\2\2\2\u0620\u0621\3\2\2\2\u0621")
        buf.write("\u0622\3\2\2\2\u0622\u0623\7Q\2\2\u0623\u0625\3\2\2\2")
        buf.write("\u0624\u0614\3\2\2\2\u0624\u061c\3\2\2\2\u0625\u00d5\3")
        buf.write("\2\2\2\u0626\u0628\bl\1\2\u0627\u0629\5\u00d8m\2\u0628")
        buf.write("\u0627\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062e\3\2\2\2")
        buf.write("\u062a\u062b\5\u00d8m\2\u062b\u062c\7~\2\2\u062c\u062e")
        buf.write("\3\2\2\2\u062d\u0626\3\2\2\2\u062d\u062a\3\2\2\2\u062e")
        buf.write("\u063b\3\2\2\2\u062f\u0630\f\5\2\2\u0630\u0632\7u\2\2")
        buf.write("\u0631\u0633\5\u00d8m\2\u0632\u0631\3\2\2\2\u0632\u0633")
        buf.write("\3\2\2\2\u0633\u063a\3\2\2\2\u0634\u0635\f\3\2\2\u0635")
        buf.write("\u0636\7u\2\2\u0636\u0637\5\u00d8m\2\u0637\u0638\7~\2")
        buf.write("\2\u0638\u063a\3\2\2\2\u0639\u062f\3\2\2\2\u0639\u0634")
        buf.write("\3\2\2\2\u063a\u063d\3\2\2\2\u063b\u0639\3\2\2\2\u063b")
        buf.write("\u063c\3\2\2\2\u063c\u00d7\3\2\2\2\u063d\u063b\3\2\2\2")
        buf.write("\u063e\u0640\5\u00dan\2\u063f\u0641\5\u00e0q\2\u0640\u063f")
        buf.write("\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u00d9\3\2\2\2\u0642")
        buf.write("\u0645\7\177\2\2\u0643\u0645\5\u00dco\2\u0644\u0642\3")
        buf.write("\2\2\2\u0644\u0643\3\2\2\2\u0645\u00db\3\2\2\2\u0646\u0647")
        buf.write("\5\u00dep\2\u0647\u0648\7z\2\2\u0648\u0649\7\177\2\2\u0649")
        buf.write("\u00dd\3\2\2\2\u064a\u064b\7\177\2\2\u064b\u00df\3\2\2")
        buf.write("\2\u064c\u064d\7P\2\2\u064d\u064e\5\u00e2r\2\u064e\u064f")
        buf.write("\7Q\2\2\u064f\u00e1\3\2\2\2\u0650\u0652\br\1\2\u0651\u0653")
        buf.write("\5\u00e4s\2\u0652\u0651\3\2\2\2\u0652\u0653\3\2\2\2\u0653")
        buf.write("\u0658\3\2\2\2\u0654\u0655\f\3\2\2\u0655\u0657\5\u00e4")
        buf.write("s\2\u0656\u0654\3\2\2\2\u0657\u065a\3\2\2\2\u0658\u0656")
        buf.write("\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u00e3\3\2\2\2\u065a")
        buf.write("\u0658\3\2\2\2\u065b\u065c\7P\2\2\u065c\u065d\5\u00e2")
        buf.write("r\2\u065d\u065e\7Q\2\2\u065e\u0668\3\2\2\2\u065f\u0660")
        buf.write("\7R\2\2\u0660\u0661\5\u00e2r\2\u0661\u0662\7S\2\2\u0662")
        buf.write("\u0668\3\2\2\2\u0663\u0664\7T\2\2\u0664\u0665\5\u00e2")
        buf.write("r\2\u0665\u0666\7U\2\2\u0666\u0668\3\2\2\2\u0667\u065b")
        buf.write("\3\2\2\2\u0667\u065f\3\2\2\2\u0667\u0663\3\2\2\2\u0668")
        buf.write("\u00e5\3\2\2\2\u0669\u066a\bt\1\2\u066a\u066b\5\u00e8")
        buf.write("u\2\u066b\u0671\3\2\2\2\u066c\u066d\f\3\2\2\u066d\u066e")
        buf.write("\7u\2\2\u066e\u0670\5\u00e8u\2\u066f\u066c\3\2\2\2\u0670")
        buf.write("\u0673\3\2\2\2\u0671\u066f\3\2\2\2\u0671\u0672\3\2\2\2")
        buf.write("\u0672\u00e7\3\2\2\2\u0673\u0671\3\2\2\2\u0674\u0676\5")
        buf.write("\u00eav\2\u0675\u0677\5\u0114\u008b\2\u0676\u0675\3\2")
        buf.write("\2\2\u0676\u0677\3\2\2\2\u0677\u00e9\3\2\2\2\u0678\u067e")
        buf.write("\5\u00ecw\2\u0679\u067a\5\u00eex\2\u067a\u067b\5\u00f0")
        buf.write("y\2\u067b\u067c\5\u00f2z\2\u067c\u067e\3\2\2\2\u067d\u0678")
        buf.write("\3\2\2\2\u067d\u0679\3\2\2\2\u067e\u00eb\3\2\2\2\u067f")
        buf.write("\u0684\5\u00eex\2\u0680\u0681\5\u00f4{\2\u0681\u0682\5")
        buf.write("\u00ecw\2\u0682\u0684\3\2\2\2\u0683\u067f\3\2\2\2\u0683")
        buf.write("\u0680\3\2\2\2\u0684\u00ed\3\2\2\2\u0685\u0686\bx\1\2")
        buf.write("\u0686\u0688\5\u00fc\177\2\u0687\u0689\5\u00d0i\2\u0688")
        buf.write("\u0687\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u068f\3\2\2\2")
        buf.write("\u068a\u068b\7P\2\2\u068b\u068c\5\u00ecw\2\u068c\u068d")
        buf.write("\7Q\2\2\u068d\u068f\3\2\2\2\u068e\u0685\3\2\2\2\u068e")
        buf.write("\u068a\3\2\2\2\u068f\u069d\3\2\2\2\u0690\u0691\f\5\2\2")
        buf.write("\u0691\u069c\5\u00f0y\2\u0692\u0693\f\4\2\2\u0693\u0695")
        buf.write("\7R\2\2\u0694\u0696\5Z.\2\u0695\u0694\3\2\2\2\u0695\u0696")
        buf.write("\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0699\7S\2\2\u0698")
        buf.write("\u069a\5\u00d0i\2\u0699\u0698\3\2\2\2\u0699\u069a\3\2")
        buf.write("\2\2\u069a\u069c\3\2\2\2\u069b\u0690\3\2\2\2\u069b\u0692")
        buf.write("\3\2\2\2\u069c\u069f\3\2\2\2\u069d\u069b\3\2\2\2\u069d")
        buf.write("\u069e\3\2\2\2\u069e\u00ef\3\2\2\2\u069f\u069d\3\2\2\2")
        buf.write("\u06a0\u06a1\7P\2\2\u06a1\u06a2\5\u010a\u0086\2\u06a2")
        buf.write("\u06a4\7Q\2\2\u06a3\u06a5\5\u00f6|\2\u06a4\u06a3\3\2\2")
        buf.write("\2\u06a4\u06a5\3\2\2\2\u06a5\u06a7\3\2\2\2\u06a6\u06a8")
        buf.write("\5\u00fa~\2\u06a7\u06a6\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8")
        buf.write("\u06aa\3\2\2\2\u06a9\u06ab\5\u017a\u00be\2\u06aa\u06a9")
        buf.write("\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab\u06ad\3\2\2\2\u06ac")
        buf.write("\u06ae\5\u00d0i\2\u06ad\u06ac\3\2\2\2\u06ad\u06ae\3\2")
        buf.write("\2\2\u06ae\u00f1\3\2\2\2\u06af\u06b0\7w\2\2\u06b0\u06b2")
        buf.write("\5\u0096L\2\u06b1\u06b3\5\u0100\u0081\2\u06b2\u06b1\3")
        buf.write("\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u00f3\3\2\2\2\u06b4\u06b6")
        buf.write("\7X\2\2\u06b5\u06b7\5\u00d0i\2\u06b6\u06b5\3\2\2\2\u06b6")
        buf.write("\u06b7\3\2\2\2\u06b7\u06b9\3\2\2\2\u06b8\u06ba\5\u00f6")
        buf.write("|\2\u06b9\u06b8\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06cc")
        buf.write("\3\2\2\2\u06bb\u06bd\7\\\2\2\u06bc\u06be\5\u00d0i\2\u06bd")
        buf.write("\u06bc\3\2\2\2\u06bd\u06be\3\2\2\2\u06be\u06cc\3\2\2\2")
        buf.write("\u06bf\u06c1\7q\2\2\u06c0\u06c2\5\u00d0i\2\u06c1\u06c0")
        buf.write("\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06cc\3\2\2\2\u06c3")
        buf.write("\u06c4\5\f\7\2\u06c4\u06c6\7X\2\2\u06c5\u06c7\5\u00d0")
        buf.write("i\2\u06c6\u06c5\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06c9")
        buf.write("\3\2\2\2\u06c8\u06ca\5\u00f6|\2\u06c9\u06c8\3\2\2\2\u06c9")
        buf.write("\u06ca\3\2\2\2\u06ca\u06cc\3\2\2\2\u06cb\u06b4\3\2\2\2")
        buf.write("\u06cb\u06bb\3\2\2\2\u06cb\u06bf\3\2\2\2\u06cb\u06c3\3")
        buf.write("\2\2\2\u06cc\u00f5\3\2\2\2\u06cd\u06cf\5\u00f8}\2\u06ce")
        buf.write("\u06d0\5\u00f6|\2\u06cf\u06ce\3\2\2\2\u06cf\u06d0\3\2")
        buf.write("\2\2\u06d0\u00f7\3\2\2\2\u06d1\u06d2\t\6\2\2\u06d2\u00f9")
        buf.write("\3\2\2\2\u06d3\u06d4\t\7\2\2\u06d4\u00fb\3\2\2\2\u06d5")
        buf.write("\u06d7\7~\2\2\u06d6\u06d5\3\2\2\2\u06d6\u06d7\3\2\2\2")
        buf.write("\u06d7\u06d8\3\2\2\2\u06d8\u06d9\5\6\4\2\u06d9\u00fd\3")
        buf.write("\2\2\2\u06da\u06dc\5\u0094K\2\u06db\u06dd\5\u0100\u0081")
        buf.write("\2\u06dc\u06db\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u00ff")
        buf.write("\3\2\2\2\u06de\u06e7\5\u0102\u0082\2\u06df\u06e1\5\u0104")
        buf.write("\u0083\2\u06e0\u06df\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1")
        buf.write("\u06e2\3\2\2\2\u06e2\u06e3\5\u00f0y\2\u06e3\u06e4\5\u00f2")
        buf.write("z\2\u06e4\u06e7\3\2\2\2\u06e5\u06e7\5\u0106\u0084\2\u06e6")
        buf.write("\u06de\3\2\2\2\u06e6\u06e0\3\2\2\2\u06e6\u06e5\3\2\2\2")
        buf.write("\u06e7\u0101\3\2\2\2\u06e8\u06ee\5\u0104\u0083\2\u06e9")
        buf.write("\u06eb\5\u00f4{\2\u06ea\u06ec\5\u0102\u0082\2\u06eb\u06ea")
        buf.write("\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ee\3\2\2\2\u06ed")
        buf.write("\u06e8\3\2\2\2\u06ed\u06e9\3\2\2\2\u06ee\u0103\3\2\2\2")
        buf.write("\u06ef\u06f0\b\u0083\1\2\u06f0\u06fe\5\u00f0y\2\u06f1")
        buf.write("\u06f3\7R\2\2\u06f2\u06f4\5Z.\2\u06f3\u06f2\3\2\2\2\u06f3")
        buf.write("\u06f4\3\2\2\2\u06f4\u06f5\3\2\2\2\u06f5\u06f7\7S\2\2")
        buf.write("\u06f6\u06f8\5\u00d0i\2\u06f7\u06f6\3\2\2\2\u06f7\u06f8")
        buf.write("\3\2\2\2\u06f8\u06fe\3\2\2\2\u06f9\u06fa\7P\2\2\u06fa")
        buf.write("\u06fb\5\u0102\u0082\2\u06fb\u06fc\7Q\2\2\u06fc\u06fe")
        buf.write("\3\2\2\2\u06fd\u06ef\3\2\2\2\u06fd\u06f1\3\2\2\2\u06fd")
        buf.write("\u06f9\3\2\2\2\u06fe\u070c\3\2\2\2\u06ff\u0700\f\7\2\2")
        buf.write("\u0700\u070b\5\u00f0y\2\u0701\u0702\f\5\2\2\u0702\u0704")
        buf.write("\7R\2\2\u0703\u0705\5Z.\2\u0704\u0703\3\2\2\2\u0704\u0705")
        buf.write("\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u0708\7S\2\2\u0707")
        buf.write("\u0709\5\u00d0i\2\u0708\u0707\3\2\2\2\u0708\u0709\3\2")
        buf.write("\2\2\u0709\u070b\3\2\2\2\u070a\u06ff\3\2\2\2\u070a\u0701")
        buf.write("\3\2\2\2\u070b\u070e\3\2\2\2\u070c\u070a\3\2\2\2\u070c")
        buf.write("\u070d\3\2\2\2\u070d\u0105\3\2\2\2\u070e\u070c\3\2\2\2")
        buf.write("\u070f\u0714\5\u0108\u0085\2\u0710\u0711\5\u00f4{\2\u0711")
        buf.write("\u0712\5\u0106\u0084\2\u0712\u0714\3\2\2\2\u0713\u070f")
        buf.write("\3\2\2\2\u0713\u0710\3\2\2\2\u0714\u0107\3\2\2\2\u0715")
        buf.write("\u0716\b\u0085\1\2\u0716\u0717\7~\2\2\u0717\u0725\3\2")
        buf.write("\2\2\u0718\u0719\f\5\2\2\u0719\u0724\5\u00f0y\2\u071a")
        buf.write("\u071b\f\4\2\2\u071b\u071d\7R\2\2\u071c\u071e\5Z.\2\u071d")
        buf.write("\u071c\3\2\2\2\u071d\u071e\3\2\2\2\u071e\u071f\3\2\2\2")
        buf.write("\u071f\u0721\7S\2\2\u0720\u0722\5\u00d0i\2\u0721\u0720")
        buf.write("\3\2\2\2\u0721\u0722\3\2\2\2\u0722\u0724\3\2\2\2\u0723")
        buf.write("\u0718\3\2\2\2\u0723\u071a\3\2\2\2\u0724\u0727\3\2\2\2")
        buf.write("\u0725\u0723\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0109\3")
        buf.write("\2\2\2\u0727\u0725\3\2\2\2\u0728\u072a\5\u010c\u0087\2")
        buf.write("\u0729\u0728\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u072c\3")
        buf.write("\2\2\2\u072b\u072d\7~\2\2\u072c\u072b\3\2\2\2\u072c\u072d")
        buf.write("\3\2\2\2\u072d\u0733\3\2\2\2\u072e\u072f\5\u010c\u0087")
        buf.write("\2\u072f\u0730\7u\2\2\u0730\u0731\7~\2\2\u0731\u0733\3")
        buf.write("\2\2\2\u0732\u0729\3\2\2\2\u0732\u072e\3\2\2\2\u0733\u010b")
        buf.write("\3\2\2\2\u0734\u0735\b\u0087\1\2\u0735\u0736\5\u010e\u0088")
        buf.write("\2\u0736\u073c\3\2\2\2\u0737\u0738\f\3\2\2\u0738\u0739")
        buf.write("\7u\2\2\u0739\u073b\5\u010e\u0088\2\u073a\u0737\3\2\2")
        buf.write("\2\u073b\u073e\3\2\2\2\u073c\u073a\3\2\2\2\u073c\u073d")
        buf.write("\3\2\2\2\u073d\u010d\3\2\2\2\u073e\u073c\3\2\2\2\u073f")
        buf.write("\u0741\5\u00d0i\2\u0740\u073f\3\2\2\2\u0740\u0741\3\2")
        buf.write("\2\2\u0741\u0742\3\2\2\2\u0742\u0743\5\u0088E\2\u0743")
        buf.write("\u0744\5\u00eav\2\u0744\u075f\3\2\2\2\u0745\u0747\5\u00d0")
        buf.write("i\2\u0746\u0745\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u0748")
        buf.write("\3\2\2\2\u0748\u0749\5\u0088E\2\u0749\u074a\5\u00eav\2")
        buf.write("\u074a\u074b\7`\2\2\u074b\u074c\5\u0118\u008d\2\u074c")
        buf.write("\u075f\3\2\2\2\u074d\u074f\5\u00d0i\2\u074e\u074d\3\2")
        buf.write("\2\2\u074e\u074f\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0752")
        buf.write("\5\u0088E\2\u0751\u0753\5\u0100\u0081\2\u0752\u0751\3")
        buf.write("\2\2\2\u0752\u0753\3\2\2\2\u0753\u075f\3\2\2\2\u0754\u0756")
        buf.write("\5\u00d0i\2\u0755\u0754\3\2\2\2\u0755\u0756\3\2\2\2\u0756")
        buf.write("\u0757\3\2\2\2\u0757\u0759\5\u0088E\2\u0758\u075a\5\u0100")
        buf.write("\u0081\2\u0759\u0758\3\2\2\2\u0759\u075a\3\2\2\2\u075a")
        buf.write("\u075b\3\2\2\2\u075b\u075c\7`\2\2\u075c\u075d\5\u0118")
        buf.write("\u008d\2\u075d\u075f\3\2\2\2\u075e\u0740\3\2\2\2\u075e")
        buf.write("\u0746\3\2\2\2\u075e\u074e\3\2\2\2\u075e\u0755\3\2\2\2")
        buf.write("\u075f\u010f\3\2\2\2\u0760\u0762\5\u00d0i\2\u0761\u0760")
        buf.write("\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u0764\3\2\2\2\u0763")
        buf.write("\u0765\5\u0088E\2\u0764\u0763\3\2\2\2\u0764\u0765\3\2")
        buf.write("\2\2\u0765\u0766\3\2\2\2\u0766\u0768\5\u00eav\2\u0767")
        buf.write("\u0769\5\u0132\u009a\2\u0768\u0767\3\2\2\2\u0768\u0769")
        buf.write("\3\2\2\2\u0769\u076a\3\2\2\2\u076a\u076b\5\u0112\u008a")
        buf.write("\2\u076b\u0111\3\2\2\2\u076c\u076e\5\u014a\u00a6\2\u076d")
        buf.write("\u076c\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u076f\3\2\2\2")
        buf.write("\u076f\u0778\5b\62\2\u0770\u0778\5\u0170\u00b9\2\u0771")
        buf.write("\u0772\7`\2\2\u0772\u0773\7\26\2\2\u0773\u0778\7{\2\2")
        buf.write("\u0774\u0775\7`\2\2\u0775\u0776\7\27\2\2\u0776\u0778\7")
        buf.write("{\2\2\u0777\u076d\3\2\2\2\u0777\u0770\3\2\2\2\u0777\u0771")
        buf.write("\3\2\2\2\u0777\u0774\3\2\2\2\u0778\u0113\3\2\2\2\u0779")
        buf.write("\u077f\5\u0116\u008c\2\u077a\u077b\7P\2\2\u077b\u077c")
        buf.write("\5\"\22\2\u077c\u077d\7Q\2\2\u077d\u077f\3\2\2\2\u077e")
        buf.write("\u0779\3\2\2\2\u077e\u077a\3\2\2\2\u077f\u0115\3\2\2\2")
        buf.write("\u0780\u0781\7`\2\2\u0781\u0784\5\u0118\u008d\2\u0782")
        buf.write("\u0784\5\u011c\u008f\2\u0783\u0780\3\2\2\2\u0783\u0782")
        buf.write("\3\2\2\2\u0784\u0117\3\2\2\2\u0785\u0788\5T+\2\u0786\u0788")
        buf.write("\5\u011c\u008f\2\u0787\u0785\3\2\2\2\u0787\u0786\3\2\2")
        buf.write("\2\u0788\u0119\3\2\2\2\u0789\u078a\b\u008e\1\2\u078a\u078c")
        buf.write("\5\u0118\u008d\2\u078b\u078d\7~\2\2\u078c\u078b\3\2\2")
        buf.write("\2\u078c\u078d\3\2\2\2\u078d\u0796\3\2\2\2\u078e\u078f")
        buf.write("\f\3\2\2\u078f\u0790\7u\2\2\u0790\u0792\5\u0118\u008d")
        buf.write("\2\u0791\u0793\7~\2\2\u0792\u0791\3\2\2\2\u0792\u0793")
        buf.write("\3\2\2\2\u0793\u0795\3\2\2\2\u0794\u078e\3\2\2\2\u0795")
        buf.write("\u0798\3\2\2\2\u0796\u0794\3\2\2\2\u0796\u0797\3\2\2\2")
        buf.write("\u0797\u011b\3\2\2\2\u0798\u0796\3\2\2\2\u0799\u079a\7")
        buf.write("T\2\2\u079a\u079c\5\u011a\u008e\2\u079b\u079d\7u\2\2\u079c")
        buf.write("\u079b\3\2\2\2\u079c\u079d\3\2\2\2\u079d\u079e\3\2\2\2")
        buf.write("\u079e\u079f\7U\2\2\u079f\u07a3\3\2\2\2\u07a0\u07a1\7")
        buf.write("T\2\2\u07a1\u07a3\7U\2\2\u07a2\u0799\3\2\2\2\u07a2\u07a0")
        buf.write("\3\2\2\2\u07a3\u011d\3\2\2\2\u07a4\u07a7\7\177\2\2\u07a5")
        buf.write("\u07a7\5\u015e\u00b0\2\u07a6\u07a4\3\2\2\2\u07a6\u07a5")
        buf.write("\3\2\2\2\u07a7\u011f\3\2\2\2\u07a8\u07a9\5\u0122\u0092")
        buf.write("\2\u07a9\u07ab\7T\2\2\u07aa\u07ac\5\u012a\u0096\2\u07ab")
        buf.write("\u07aa\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac\u07ad\3\2\2\2")
        buf.write("\u07ad\u07ae\7U\2\2\u07ae\u0121\3\2\2\2\u07af\u07b1\5")
        buf.write("\u0128\u0095\2\u07b0\u07b2\5\u00d0i\2\u07b1\u07b0\3\2")
        buf.write("\2\2\u07b1\u07b2\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07b5")
        buf.write("\5\u0124\u0093\2\u07b4\u07b6\5\u0126\u0094\2\u07b5\u07b4")
        buf.write("\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6\u07b8\3\2\2\2\u07b7")
        buf.write("\u07b9\5\u0138\u009d\2\u07b8\u07b7\3\2\2\2\u07b8\u07b9")
        buf.write("\3\2\2\2\u07b9\u07c2\3\2\2\2\u07ba\u07bc\5\u0128\u0095")
        buf.write("\2\u07bb\u07bd\5\u00d0i\2\u07bc\u07bb\3\2\2\2\u07bc\u07bd")
        buf.write("\3\2\2\2\u07bd\u07bf\3\2\2\2\u07be\u07c0\5\u0138\u009d")
        buf.write("\2\u07bf\u07be\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07c2")
        buf.write("\3\2\2\2\u07c1\u07af\3\2\2\2\u07c1\u07ba\3\2\2\2\u07c2")
        buf.write("\u0123\3\2\2\2\u07c3\u07c5\5\f\7\2\u07c4\u07c3\3\2\2\2")
        buf.write("\u07c4\u07c5\3\2\2\2\u07c5\u07c6\3\2\2\2\u07c6\u07c7\5")
        buf.write("\u011e\u0090\2\u07c7\u0125\3\2\2\2\u07c8\u07c9\7!\2\2")
        buf.write("\u07c9\u0127\3\2\2\2\u07ca\u07cb\t\b\2\2\u07cb\u0129\3")
        buf.write("\2\2\2\u07cc\u07ce\5\u012c\u0097\2\u07cd\u07cf\5\u012a")
        buf.write("\u0096\2\u07ce\u07cd\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf")
        buf.write("\u07d6\3\2\2\2\u07d0\u07d1\5\u0142\u00a2\2\u07d1\u07d3")
        buf.write("\7y\2\2\u07d2\u07d4\5\u012a\u0096\2\u07d3\u07d2\3\2\2")
        buf.write("\2\u07d3\u07d4\3\2\2\2\u07d4\u07d6\3\2\2\2\u07d5\u07cc")
        buf.write("\3\2\2\2\u07d5\u07d0\3\2\2\2\u07d6\u012b\3\2\2\2\u07d7")
        buf.write("\u07d9\5\u00d0i\2\u07d8\u07d7\3\2\2\2\u07d8\u07d9\3\2")
        buf.write("\2\2\u07d9\u07db\3\2\2\2\u07da\u07dc\5\u0088E\2\u07db")
        buf.write("\u07da\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07de\3\2\2\2")
        buf.write("\u07dd\u07df\5\u012e\u0098\2\u07de\u07dd\3\2\2\2\u07de")
        buf.write("\u07df\3\2\2\2\u07df\u07e0\3\2\2\2\u07e0\u07e8\7{\2\2")
        buf.write("\u07e1\u07e8\5\u0110\u0089\2\u07e2\u07e8\5\u00c8e\2\u07e3")
        buf.write("\u07e8\5\u0080A\2\u07e4\u07e8\5\u0156\u00ac\2\u07e5\u07e8")
        buf.write("\5|?\2\u07e6\u07e8\5\u0082B\2\u07e7\u07d8\3\2\2\2\u07e7")
        buf.write("\u07e1\3\2\2\2\u07e7\u07e2\3\2\2\2\u07e7\u07e3\3\2\2\2")
        buf.write("\u07e7\u07e4\3\2\2\2\u07e7\u07e5\3\2\2\2\u07e7\u07e6\3")
        buf.write("\2\2\2\u07e8\u012d\3\2\2\2\u07e9\u07ea\b\u0098\1\2\u07ea")
        buf.write("\u07eb\5\u0130\u0099\2\u07eb\u07f1\3\2\2\2\u07ec\u07ed")
        buf.write("\f\3\2\2\u07ed\u07ee\7u\2\2\u07ee\u07f0\5\u0130\u0099")
        buf.write("\2\u07ef\u07ec\3\2\2\2\u07f0\u07f3\3\2\2\2\u07f1\u07ef")
        buf.write("\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2\u012f\3\2\2\2\u07f3")
        buf.write("\u07f1\3\2\2\2\u07f4\u07f6\5\u00eav\2\u07f5\u07f7\5\u0132")
        buf.write("\u009a\2\u07f6\u07f5\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7")
        buf.write("\u07f9\3\2\2\2\u07f8\u07fa\5\u0136\u009c\2\u07f9\u07f8")
        buf.write("\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u0808\3\2\2\2\u07fb")
        buf.write("\u07fd\5\u00eav\2\u07fc\u07fe\5\u0116\u008c\2\u07fd\u07fc")
        buf.write("\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe\u0808\3\2\2\2\u07ff")
        buf.write("\u0801\7\177\2\2\u0800\u07ff\3\2\2\2\u0800\u0801\3\2\2")
        buf.write("\2\u0801\u0803\3\2\2\2\u0802\u0804\5\u00d0i\2\u0803\u0802")
        buf.write("\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u0805\3\2\2\2\u0805")
        buf.write("\u0806\7y\2\2\u0806\u0808\5Z.\2\u0807\u07f4\3\2\2\2\u0807")
        buf.write("\u07fb\3\2\2\2\u0807\u0800\3\2\2\2\u0808\u0131\3\2\2\2")
        buf.write("\u0809\u080a\b\u009a\1\2\u080a\u080b\5\u0134\u009b\2\u080b")
        buf.write("\u0810\3\2\2\2\u080c\u080d\f\3\2\2\u080d\u080f\5\u0134")
        buf.write("\u009b\2\u080e\u080c\3\2\2\2\u080f\u0812\3\2\2\2\u0810")
        buf.write("\u080e\3\2\2\2\u0810\u0811\3\2\2\2\u0811\u0133\3\2\2\2")
        buf.write("\u0812\u0810\3\2\2\2\u0813\u0814\t\t\2\2\u0814\u0135\3")
        buf.write("\2\2\2\u0815\u0816\7`\2\2\u0816\u0817\7\u0082\2\2\u0817")
        buf.write("\u0818\b\u009c\1\2\u0818\u0137\3\2\2\2\u0819\u081a\7y")
        buf.write("\2\2\u081a\u081b\5\u013a\u009e\2\u081b\u0139\3\2\2\2\u081c")
        buf.write("\u081d\b\u009e\1\2\u081d\u081f\5\u013c\u009f\2\u081e\u0820")
        buf.write("\7~\2\2\u081f\u081e\3\2\2\2\u081f\u0820\3\2\2\2\u0820")
        buf.write("\u0829\3\2\2\2\u0821\u0822\f\3\2\2\u0822\u0823\7u\2\2")
        buf.write("\u0823\u0825\5\u013c\u009f\2\u0824\u0826\7~\2\2\u0825")
        buf.write("\u0824\3\2\2\2\u0825\u0826\3\2\2\2\u0826\u0828\3\2\2\2")
        buf.write("\u0827\u0821\3\2\2\2\u0828\u082b\3\2\2\2\u0829\u0827\3")
        buf.write("\2\2\2\u0829\u082a\3\2\2\2\u082a\u013b\3\2\2\2\u082b\u0829")
        buf.write("\3\2\2\2\u082c\u082e\5\u00d0i\2\u082d\u082c\3\2\2\2\u082d")
        buf.write("\u082e\3\2\2\2\u082e\u082f\3\2\2\2\u082f\u0842\5\u0140")
        buf.write("\u00a1\2\u0830\u0832\5\u00d0i\2\u0831\u0830\3\2\2\2\u0831")
        buf.write("\u0832\3\2\2\2\u0832\u0833\3\2\2\2\u0833\u0835\7K\2\2")
        buf.write("\u0834\u0836\5\u0142\u00a2\2\u0835\u0834\3\2\2\2\u0835")
        buf.write("\u0836\3\2\2\2\u0836\u0837\3\2\2\2\u0837\u0842\5\u0140")
        buf.write("\u00a1\2\u0838\u083a\5\u00d0i\2\u0839\u0838\3\2\2\2\u0839")
        buf.write("\u083a\3\2\2\2\u083a\u083b\3\2\2\2\u083b\u083d\5\u0142")
        buf.write("\u00a2\2\u083c\u083e\7K\2\2\u083d\u083c\3\2\2\2\u083d")
        buf.write("\u083e\3\2\2\2\u083e\u083f\3\2\2\2\u083f\u0840\5\u0140")
        buf.write("\u00a1\2\u0840\u0842\3\2\2\2\u0841\u082d\3\2\2\2\u0841")
        buf.write("\u0831\3\2\2\2\u0841\u0839\3\2\2\2\u0842\u013d\3\2\2\2")
        buf.write("\u0843\u0845\5\f\7\2\u0844\u0843\3\2\2\2\u0844\u0845\3")
        buf.write("\2\2\2\u0845\u0846\3\2\2\2\u0846\u0849\5\u011e\u0090\2")
        buf.write("\u0847\u0849\5\u009cO\2\u0848\u0844\3\2\2\2\u0848\u0847")
        buf.write("\3\2\2\2\u0849\u013f\3\2\2\2\u084a\u084b\5\u013e\u00a0")
        buf.write("\2\u084b\u0141\3\2\2\2\u084c\u084d\t\n\2\2\u084d\u0143")
        buf.write("\3\2\2\2\u084e\u084f\7/\2\2\u084f\u0850\5\u0146\u00a4")
        buf.write("\2\u0850\u0145\3\2\2\2\u0851\u0853\5\u0094K\2\u0852\u0854")
        buf.write("\5\u0148\u00a5\2\u0853\u0852\3\2\2\2\u0853\u0854\3\2\2")
        buf.write("\2\u0854\u0147\3\2\2\2\u0855\u0857\5\u00f4{\2\u0856\u0858")
        buf.write("\5\u0148\u00a5\2\u0857\u0856\3\2\2\2\u0857\u0858\3\2\2")
        buf.write("\2\u0858\u0149\3\2\2\2\u0859\u085a\7y\2\2\u085a\u085b")
        buf.write("\5\u014c\u00a7\2\u085b\u014b\3\2\2\2\u085c\u085e\5\u014e")
        buf.write("\u00a8\2\u085d\u085f\7~\2\2\u085e\u085d\3\2\2\2\u085e")
        buf.write("\u085f\3\2\2\2\u085f\u0868\3\2\2\2\u0860\u0862\5\u014e")
        buf.write("\u00a8\2\u0861\u0863\7~\2\2\u0862\u0861\3\2\2\2\u0862")
        buf.write("\u0863\3\2\2\2\u0863\u0864\3\2\2\2\u0864\u0865\7u\2\2")
        buf.write("\u0865\u0866\5\u014c\u00a7\2\u0866\u0868\3\2\2\2\u0867")
        buf.write("\u085c\3\2\2\2\u0867\u0860\3\2\2\2\u0868\u014d\3\2\2\2")
        buf.write("\u0869\u086a\5\u0150\u00a9\2\u086a\u086c\7P\2\2\u086b")
        buf.write("\u086d\5\"\22\2\u086c\u086b\3\2\2\2\u086c\u086d\3\2\2")
        buf.write("\2\u086d\u086e\3\2\2\2\u086e\u086f\7Q\2\2\u086f\u0874")
        buf.write("\3\2\2\2\u0870\u0871\5\u0150\u00a9\2\u0871\u0872\5\u011c")
        buf.write("\u008f\2\u0872\u0874\3\2\2\2\u0873\u0869\3\2\2\2\u0873")
        buf.write("\u0870\3\2\2\2\u0874\u014f\3\2\2\2\u0875\u0878\5\u013e")
        buf.write("\u00a0\2\u0876\u0878\7\177\2\2\u0877\u0875\3\2\2\2\u0877")
        buf.write("\u0876\3\2\2\2\u0878\u0151\3\2\2\2\u0879\u087a\7/\2\2")
        buf.write("\u087a\u087b\5\u0186\u00c4\2\u087b\u0153\3\2\2\2\u087c")
        buf.write("\u087d\7/\2\2\u087d\u087e\7\u0088\2\2\u087e\u0882\7\177")
        buf.write("\2\2\u087f\u0880\7/\2\2\u0880\u0882\7\u008b\2\2\u0881")
        buf.write("\u087c\3\2\2\2\u0881\u087f\3\2\2\2\u0882\u0155\3\2\2\2")
        buf.write("\u0883\u0884\7?\2\2\u0884\u0885\7a\2\2\u0885\u0886\5\u0158")
        buf.write("\u00ad\2\u0886\u0887\7b\2\2\u0887\u0888\5x=\2\u0888\u0157")
        buf.write("\3\2\2\2\u0889\u088a\b\u00ad\1\2\u088a\u088b\5\u015a\u00ae")
        buf.write("\2\u088b\u0891\3\2\2\2\u088c\u088d\f\3\2\2\u088d\u088e")
        buf.write("\7u\2\2\u088e\u0890\5\u015a\u00ae\2\u088f\u088c\3\2\2")
        buf.write("\2\u0890\u0893\3\2\2\2\u0891\u088f\3\2\2\2\u0891\u0892")
        buf.write("\3\2\2\2\u0892\u0159\3\2\2\2\u0893\u0891\3\2\2\2\u0894")
        buf.write("\u0897\5\u015c\u00af\2\u0895\u0897\5\u010e\u0088\2\u0896")
        buf.write("\u0894\3\2\2\2\u0896\u0895\3\2\2\2\u0897\u015b\3\2\2\2")
        buf.write("\u0898\u089a\7\20\2\2\u0899\u089b\7~\2\2\u089a\u0899\3")
        buf.write("\2\2\2\u089a\u089b\3\2\2\2\u089b\u089d\3\2\2\2\u089c\u089e")
        buf.write("\7\177\2\2\u089d\u089c\3\2\2\2\u089d\u089e\3\2\2\2\u089e")
        buf.write("\u08c9\3\2\2\2\u089f\u08a1\7\20\2\2\u08a0\u08a2\7\177")
        buf.write("\2\2\u08a1\u08a0\3\2\2\2\u08a1\u08a2\3\2\2\2\u08a2\u08a3")
        buf.write("\3\2\2\2\u08a3\u08a4\7`\2\2\u08a4\u08c9\5\u00fe\u0080")
        buf.write("\2\u08a5\u08a7\7G\2\2\u08a6\u08a8\7~\2\2\u08a7\u08a6\3")
        buf.write("\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08aa\3\2\2\2\u08a9\u08ab")
        buf.write("\7\177\2\2\u08aa\u08a9\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab")
        buf.write("\u08c9\3\2\2\2\u08ac\u08ae\7G\2\2\u08ad\u08af\7\177\2")
        buf.write("\2\u08ae\u08ad\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b0")
        buf.write("\3\2\2\2\u08b0\u08b1\7`\2\2\u08b1\u08c9\5\u00fe\u0080")
        buf.write("\2\u08b2\u08b3\7?\2\2\u08b3\u08b4\7a\2\2\u08b4\u08b5\5")
        buf.write("\u0158\u00ad\2\u08b5\u08b6\7b\2\2\u08b6\u08b8\7\20\2\2")
        buf.write("\u08b7\u08b9\7~\2\2\u08b8\u08b7\3\2\2\2\u08b8\u08b9\3")
        buf.write("\2\2\2\u08b9\u08bb\3\2\2\2\u08ba\u08bc\7\177\2\2\u08bb")
        buf.write("\u08ba\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u08c9\3\2\2\2")
        buf.write("\u08bd\u08be\7?\2\2\u08be\u08bf\7a\2\2\u08bf\u08c0\5\u0158")
        buf.write("\u00ad\2\u08c0\u08c1\7b\2\2\u08c1\u08c3\7\20\2\2\u08c2")
        buf.write("\u08c4\7\177\2\2\u08c3\u08c2\3\2\2\2\u08c3\u08c4\3\2\2")
        buf.write("\2\u08c4\u08c5\3\2\2\2\u08c5\u08c6\7`\2\2\u08c6\u08c7")
        buf.write("\5\6\4\2\u08c7\u08c9\3\2\2\2\u08c8\u0898\3\2\2\2\u08c8")
        buf.write("\u089f\3\2\2\2\u08c8\u08a5\3\2\2\2\u08c8\u08ac\3\2\2\2")
        buf.write("\u08c8\u08b2\3\2\2\2\u08c8\u08bd\3\2\2\2\u08c9\u015d\3")
        buf.write("\2\2\2\u08ca\u08cb\5\u0162\u00b2\2\u08cb\u08cd\7a\2\2")
        buf.write("\u08cc\u08ce\5\u0164\u00b3\2\u08cd\u08cc\3\2\2\2\u08cd")
        buf.write("\u08ce\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u08d0\7b\2\2")
        buf.write("\u08d0\u015f\3\2\2\2\u08d1\u08e1\5\u015e\u00b0\2\u08d2")
        buf.write("\u08d3\5\u0152\u00aa\2\u08d3\u08d5\7a\2\2\u08d4\u08d6")
        buf.write("\5\u0164\u00b3\2\u08d5\u08d4\3\2\2\2\u08d5\u08d6\3\2\2")
        buf.write("\2\u08d6\u08d7\3\2\2\2\u08d7\u08d8\7b\2\2\u08d8\u08e1")
        buf.write("\3\2\2\2\u08d9\u08da\5\u0154\u00ab\2\u08da\u08dc\7a\2")
        buf.write("\2\u08db\u08dd\5\u0164\u00b3\2\u08dc\u08db\3\2\2\2\u08dc")
        buf.write("\u08dd\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u08df\7b\2\2")
        buf.write("\u08df\u08e1\3\2\2\2\u08e0\u08d1\3\2\2\2\u08e0\u08d2\3")
        buf.write("\2\2\2\u08e0\u08d9\3\2\2\2\u08e1\u0161\3\2\2\2\u08e2\u08e3")
        buf.write("\7\177\2\2\u08e3\u0163\3\2\2\2\u08e4\u08e5\b\u00b3\1\2")
        buf.write("\u08e5\u08e7\5\u0166\u00b4\2\u08e6\u08e8\7~\2\2\u08e7")
        buf.write("\u08e6\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u08f1\3\2\2\2")
        buf.write("\u08e9\u08ea\f\3\2\2\u08ea\u08eb\7u\2\2\u08eb\u08ed\5")
        buf.write("\u0166\u00b4\2\u08ec\u08ee\7~\2\2\u08ed\u08ec\3\2\2\2")
        buf.write("\u08ed\u08ee\3\2\2\2\u08ee\u08f0\3\2\2\2\u08ef\u08e9\3")
        buf.write("\2\2\2\u08f0\u08f3\3\2\2\2\u08f1\u08ef\3\2\2\2\u08f1\u08f2")
        buf.write("\3\2\2\2\u08f2\u0165\3\2\2\2\u08f3\u08f1\3\2\2\2\u08f4")
        buf.write("\u08f8\5\u00fe\u0080\2\u08f5\u08f8\5Z.\2\u08f6\u08f8\5")
        buf.write("\6\4\2\u08f7\u08f4\3\2\2\2\u08f7\u08f5\3\2\2\2\u08f7\u08f6")
        buf.write("\3\2\2\2\u08f8\u0167\3\2\2\2\u08f9\u08fa\7G\2\2\u08fa")
        buf.write("\u08fb\5\f\7\2\u08fb\u08fc\7\177\2\2\u08fc\u0905\3\2\2")
        buf.write("\2\u08fd\u08fe\7G\2\2\u08fe\u0900\5\f\7\2\u08ff\u0901")
        buf.write("\7?\2\2\u0900\u08ff\3\2\2\2\u0900\u0901\3\2\2\2\u0901")
        buf.write("\u0902\3\2\2\2\u0902\u0903\5\u015e\u00b0\2\u0903\u0905")
        buf.write("\3\2\2\2\u0904\u08f9\3\2\2\2\u0904\u08fd\3\2\2\2\u0905")
        buf.write("\u0169\3\2\2\2\u0906\u0908\7\37\2\2\u0907\u0906\3\2\2")
        buf.write("\2\u0907\u0908\3\2\2\2\u0908\u0909\3\2\2\2\u0909\u090a")
        buf.write("\7?\2\2\u090a\u090b\5x=\2\u090b\u016b\3\2\2\2\u090c\u090d")
        buf.write("\7?\2\2\u090d\u090e\7a\2\2\u090e\u090f\7b\2\2\u090f\u0910")
        buf.write("\5x=\2\u0910\u016d\3\2\2\2\u0911\u0912\7D\2\2\u0912\u0913")
        buf.write("\5b\62\2\u0913\u0914\5\u0172\u00ba\2\u0914\u016f\3\2\2")
        buf.write("\2\u0915\u0917\7D\2\2\u0916\u0918\5\u014a\u00a6\2\u0917")
        buf.write("\u0916\3\2\2\2\u0917\u0918\3\2\2\2\u0918\u0919\3\2\2\2")
        buf.write("\u0919\u091a\5b\62\2\u091a\u091b\5\u0172\u00ba\2\u091b")
        buf.write("\u0171\3\2\2\2\u091c\u091e\5\u0174\u00bb\2\u091d\u091f")
        buf.write("\5\u0172\u00ba\2\u091e\u091d\3\2\2\2\u091e\u091f\3\2\2")
        buf.write("\2\u091f\u0173\3\2\2\2\u0920\u0921\7\f\2\2\u0921\u0922")
        buf.write("\7P\2\2\u0922\u0923\5\u0176\u00bc\2\u0923\u0924\7Q\2\2")
        buf.write("\u0924\u0925\5b\62\2\u0925\u0175\3\2\2\2\u0926\u0928\5")
        buf.write("\u00d0i\2\u0927\u0926\3\2\2\2\u0927\u0928\3\2\2\2\u0928")
        buf.write("\u0929\3\2\2\2\u0929\u092a\5\u0094K\2\u092a\u092b\5\u00ea")
        buf.write("v\2\u092b\u0935\3\2\2\2\u092c\u092e\5\u00d0i\2\u092d\u092c")
        buf.write("\3\2\2\2\u092d\u092e\3\2\2\2\u092e\u092f\3\2\2\2\u092f")
        buf.write("\u0931\5\u0094K\2\u0930\u0932\5\u0100\u0081\2\u0931\u0930")
        buf.write("\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0935\3\2\2\2\u0933")
        buf.write("\u0935\7~\2\2\u0934\u0927\3\2\2\2\u0934\u092d\3\2\2\2")
        buf.write("\u0934\u0933\3\2\2\2\u0935\u0177\3\2\2\2\u0936\u0938\7")
        buf.write("B\2\2\u0937\u0939\5T+\2\u0938\u0937\3\2\2\2\u0938\u0939")
        buf.write("\3\2\2\2\u0939\u0179\3\2\2\2\u093a\u093d\5\u017c\u00bf")
        buf.write("\2\u093b\u093d\5\u0180\u00c1\2\u093c\u093a\3\2\2\2\u093c")
        buf.write("\u093b\3\2\2\2\u093d\u017b\3\2\2\2\u093e\u093f\7B\2\2")
        buf.write("\u093f\u0941\7P\2\2\u0940\u0942\5\u017e\u00c0\2\u0941")
        buf.write("\u0940\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0943\3\2\2\2")
        buf.write("\u0943\u0944\7Q\2\2\u0944\u017d\3\2\2\2\u0945\u0946\b")
        buf.write("\u00c0\1\2\u0946\u0948\5\u00fe\u0080\2\u0947\u0949\7~")
        buf.write("\2\2\u0948\u0947\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u0952")
        buf.write("\3\2\2\2\u094a\u094b\f\3\2\2\u094b\u094c\7u\2\2\u094c")
        buf.write("\u094e\5\u00fe\u0080\2\u094d\u094f\7~\2\2\u094e\u094d")
        buf.write("\3\2\2\2\u094e\u094f\3\2\2\2\u094f\u0951\3\2\2\2\u0950")
        buf.write("\u094a\3\2\2\2\u0951\u0954\3\2\2\2\u0952\u0950\3\2\2\2")
        buf.write("\u0952\u0953\3\2\2\2\u0953\u017f\3\2\2\2\u0954\u0952\3")
        buf.write("\2\2\2\u0955\u0956\7-\2\2\u0956\u0957\7P\2\2\u0957\u0958")
        buf.write("\5Z.\2\u0958\u0959\7Q\2\2\u0959\u095c\3\2\2\2\u095a\u095c")
        buf.write("\7-\2\2\u095b\u0955\3\2\2\2\u095b\u095a\3\2\2\2\u095c")
        buf.write("\u0181\3\2\2\2\u095d\u095e\7b\2\2\u095e\u095f\7b\2\2\u095f")
        buf.write("\u0183\3\2\2\2\u0960\u0961\7b\2\2\u0961\u0962\7b\2\2\u0962")
        buf.write("\u0963\7`\2\2\u0963\u0185\3\2\2\2\u0964\u0995\7,\2\2\u0965")
        buf.write("\u0995\7\27\2\2\u0966\u0967\7,\2\2\u0967\u0968\7R\2\2")
        buf.write("\u0968\u0995\7S\2\2\u0969\u096a\7\27\2\2\u096a\u096b\7")
        buf.write("R\2\2\u096b\u0995\7S\2\2\u096c\u0995\7V\2\2\u096d\u0995")
        buf.write("\7W\2\2\u096e\u0995\7X\2\2\u096f\u0995\7Y\2\2\u0970\u0995")
        buf.write("\7Z\2\2\u0971\u0995\7[\2\2\u0972\u0995\7\\\2\2\u0973\u0995")
        buf.write("\7]\2\2\u0974\u0995\7^\2\2\u0975\u0995\7_\2\2\u0976\u0995")
        buf.write("\7`\2\2\u0977\u0995\7a\2\2\u0978\u0995\7b\2\2\u0979\u0995")
        buf.write("\7c\2\2\u097a\u0995\7d\2\2\u097b\u0995\7e\2\2\u097c\u0995")
        buf.write("\7f\2\2\u097d\u0995\7g\2\2\u097e\u0995\7h\2\2\u097f\u0995")
        buf.write("\7i\2\2\u0980\u0995\7j\2\2\u0981\u0995\7k\2\2\u0982\u0995")
        buf.write("\5\u0182\u00c2\2\u0983\u0995\5\u0184\u00c3\2\u0984\u0995")
        buf.write("\7l\2\2\u0985\u0995\7m\2\2\u0986\u0995\7n\2\2\u0987\u0995")
        buf.write("\7o\2\2\u0988\u0995\7p\2\2\u0989\u0995\7q\2\2\u098a\u0995")
        buf.write("\7r\2\2\u098b\u0995\7s\2\2\u098c\u0995\7t\2\2\u098d\u0995")
        buf.write("\7u\2\2\u098e\u0995\7v\2\2\u098f\u0995\7w\2\2\u0990\u0991")
        buf.write("\7P\2\2\u0991\u0995\7Q\2\2\u0992\u0993\7R\2\2\u0993\u0995")
        buf.write("\7S\2\2\u0994\u0964\3\2\2\2\u0994\u0965\3\2\2\2\u0994")
        buf.write("\u0966\3\2\2\2\u0994\u0969\3\2\2\2\u0994\u096c\3\2\2\2")
        buf.write("\u0994\u096d\3\2\2\2\u0994\u096e\3\2\2\2\u0994\u096f\3")
        buf.write("\2\2\2\u0994\u0970\3\2\2\2\u0994\u0971\3\2\2\2\u0994\u0972")
        buf.write("\3\2\2\2\u0994\u0973\3\2\2\2\u0994\u0974\3\2\2\2\u0994")
        buf.write("\u0975\3\2\2\2\u0994\u0976\3\2\2\2\u0994\u0977\3\2\2\2")
        buf.write("\u0994\u0978\3\2\2\2\u0994\u0979\3\2\2\2\u0994\u097a\3")
        buf.write("\2\2\2\u0994\u097b\3\2\2\2\u0994\u097c\3\2\2\2\u0994\u097d")
        buf.write("\3\2\2\2\u0994\u097e\3\2\2\2\u0994\u097f\3\2\2\2\u0994")
        buf.write("\u0980\3\2\2\2\u0994\u0981\3\2\2\2\u0994\u0982\3\2\2\2")
        buf.write("\u0994\u0983\3\2\2\2\u0994\u0984\3\2\2\2\u0994\u0985\3")
        buf.write("\2\2\2\u0994\u0986\3\2\2\2\u0994\u0987\3\2\2\2\u0994\u0988")
        buf.write("\3\2\2\2\u0994\u0989\3\2\2\2\u0994\u098a\3\2\2\2\u0994")
        buf.write("\u098b\3\2\2\2\u0994\u098c\3\2\2\2\u0994\u098d\3\2\2\2")
        buf.write("\u0994\u098e\3\2\2\2\u0994\u098f\3\2\2\2\u0994\u0990\3")
        buf.write("\2\2\2\u0994\u0992\3\2\2\2\u0995\u0187\3\2\2\2\u0996\u099e")
        buf.write("\7\u0080\2\2\u0997\u099e\7\u0086\2\2\u0998\u099e\7\u0087")
        buf.write("\2\2\u0999\u099e\7\u0088\2\2\u099a\u099e\5\u018a\u00c6")
        buf.write("\2\u099b\u099e\5\u018c\u00c7\2\u099c\u099e\5\u018e\u00c8")
        buf.write("\2\u099d\u0996\3\2\2\2\u099d\u0997\3\2\2\2\u099d\u0998")
        buf.write("\3\2\2\2\u099d\u0999\3\2\2\2\u099d\u099a\3\2\2\2\u099d")
        buf.write("\u099b\3\2\2\2\u099d\u099c\3\2\2\2\u099e\u0189\3\2\2\2")
        buf.write("\u099f\u09a0\t\13\2\2\u09a0\u018b\3\2\2\2\u09a1\u09a2")
        buf.write("\7.\2\2\u09a2\u018d\3\2\2\2\u09a3\u09a4\t\f\2\2\u09a4")
        buf.write("\u018f\3\2\2\2\u013d\u0191\u019d\u01a1\u01ac\u01b0\u01bf")
        buf.write("\u01c6\u01cb\u01cd\u01d2\u01d8\u01e2\u01e9\u01ef\u01f3")
        buf.write("\u01f8\u01fe\u0205\u020b\u020e\u0211\u0214\u021b\u0222")
        buf.write("\u0256\u0265\u026b\u0271\u027e\u0280\u0286\u0295\u029b")
        buf.write("\u02b9\u02be\u02c2\u02c6\u02c9\u02cd\u02d3\u02d5\u02dd")
        buf.write("\u02e1\u02e4\u02eb\u02f2\u02f6\u02fb\u02ff\u0302\u0307")
        buf.write("\u030d\u031a\u0325\u0327\u0336\u0338\u0344\u0346\u0353")
        buf.write("\u0355\u0367\u0369\u0375\u0377\u0382\u038d\u0398\u03a3")
        buf.write("\u03ae\u03b8\u03c0\u03cd\u03d7\u03de\u03e2\u03e6\u03ea")
        buf.write("\u03ee\u03f3\u03f6\u03f9\u03ff\u0407\u040c\u040f\u0415")
        buf.write("\u0420\u0437\u043b\u0443\u0449\u045d\u0461\u046e\u0472")
        buf.write("\u0475\u047c\u0484\u048e\u0499\u04a5\u04af\u04b4\u04bb")
        buf.write("\u04be\u04c3\u04c8\u04dd\u04e1\u04e6\u04f1\u04f7\u04fb")
        buf.write("\u0500\u0504\u0509\u050c\u0522\u0528\u0533\u0537\u053a")
        buf.write("\u0544\u054a\u054d\u0554\u055e\u0562\u0565\u0568\u056c")
        buf.write("\u0571\u0573\u0577\u057b\u0584\u0591\u0599\u059f\u05a5")
        buf.write("\u05a9\u05ac\u05b5\u05be\u05c6\u05d1\u05d7\u05e2\u05e5")
        buf.write("\u05ea\u05f9\u05ff\u0608\u0612\u0618\u0620\u0624\u0628")
        buf.write("\u062d\u0632\u0639\u063b\u0640\u0644\u0652\u0658\u0667")
        buf.write("\u0671\u0676\u067d\u0683\u0688\u068e\u0695\u0699\u069b")
        buf.write("\u069d\u06a4\u06a7\u06aa\u06ad\u06b2\u06b6\u06b9\u06bd")
        buf.write("\u06c1\u06c6\u06c9\u06cb\u06cf\u06d6\u06dc\u06e0\u06e6")
        buf.write("\u06eb\u06ed\u06f3\u06f7\u06fd\u0704\u0708\u070a\u070c")
        buf.write("\u0713\u071d\u0721\u0723\u0725\u0729\u072c\u0732\u073c")
        buf.write("\u0740\u0746\u074e\u0752\u0755\u0759\u075e\u0761\u0764")
        buf.write("\u0768\u076d\u0777\u077e\u0783\u0787\u078c\u0792\u0796")
        buf.write("\u079c\u07a2\u07a6\u07ab\u07b1\u07b5\u07b8\u07bc\u07bf")
        buf.write("\u07c1\u07c4\u07ce\u07d3\u07d5\u07d8\u07db\u07de\u07e7")
        buf.write("\u07f1\u07f6\u07f9\u07fd\u0800\u0803\u0807\u0810\u081f")
        buf.write("\u0825\u0829\u082d\u0831\u0835\u0839\u083d\u0841\u0844")
        buf.write("\u0848\u0853\u0857\u085e\u0862\u0867\u086c\u0873\u0877")
        buf.write("\u0881\u0891\u0896\u089a\u089d\u08a1\u08a7\u08aa\u08ae")
        buf.write("\u08b8\u08bb\u08c3\u08c8\u08cd\u08d5\u08dc\u08e0\u08e7")
        buf.write("\u08ed\u08f1\u08f7\u0900\u0904\u0907\u0917\u091e\u0927")
        buf.write("\u092d\u0931\u0934\u0938\u093c\u0941\u0948\u094e\u0952")
        buf.write("\u095b\u0994\u099d")
        return buf.getvalue()


class CPP14Parser ( Parser ):

    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "'alignas'", 
                     "'alignof'", "'asm'", "'auto'", "'bool'", "'break'", 
                     "'case'", "'catch'", "'char'", "'char16_t'", "'char32_t'", 
                     "'class'", "'const'", "'constexpr'", "'const_cast'", 
                     "'continue'", "'decltype'", "'default'", "'delete'", 
                     "'do'", "'double'", "'dynamic_cast'", "'else'", "'enum'", 
                     "'explicit'", "'export'", "'extern'", "'false'", "'final'", 
                     "'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'", 
                     "'int'", "'long'", "'mutable'", "'namespace'", "'new'", 
                     "'noexcept'", "'nullptr'", "'operator'", "'override'", 
                     "'private'", "'protected'", "'public'", "'register'", 
                     "'reinterpret_cast'", "'return'", "'short'", "'signed'", 
                     "'sizeof'", "'static'", "'static_assert'", "'static_cast'", 
                     "'struct'", "'switch'", "'template'", "'this'", "'thread_local'", 
                     "'throw'", "'true'", "'try'", "'typedef'", "'typeid'", 
                     "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'", 
                     "'void'", "'volatile'", "'wchar_t'", "'while'", "'('", 
                     "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", "'!'", "'='", 
                     "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'^='", "'&='", "'|='", "'<<'", "'<<='", "'=='", "'!='", 
                     "'<='", "'>='", "'&&'", "'||'", "'++'", "'--'", "','", 
                     "'->*'", "'->'", "'?'", "':'", "'::'", "';'", "'.'", 
                     "'.*'", "'...'" ]

    symbolicNames = [ "<INVALID>", "MultiLineMacro", "Directive", "Alignas", 
                      "Alignof", "Asm", "Auto", "Bool", "Break", "Case", 
                      "Catch", "Char", "Char16", "Char32", "Class", "Const", 
                      "Constexpr", "Const_cast", "Continue", "Decltype", 
                      "Default", "Delete", "Do", "Double", "Dynamic_cast", 
                      "Else", "Enum", "Explicit", "Export", "Extern", "False", 
                      "Final", "Float", "For", "Friend", "Goto", "If", "Inline", 
                      "Int", "Long", "Mutable", "Namespace", "New", "Noexcept", 
                      "Nullptr", "Operator", "Override", "Private", "Protected", 
                      "Public", "Register", "Reinterpret_cast", "Return", 
                      "Short", "Signed", "Sizeof", "Static", "Static_assert", 
                      "Static_cast", "Struct", "Switch", "Template", "This", 
                      "Thread_local", "Throw", "True", "Try", "Typedef", 
                      "Typeid", "Typename", "Union", "Unsigned", "Using", 
                      "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen", 
                      "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
                      "RightBrace", "Plus", "Minus", "Star", "Div", "Mod", 
                      "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", 
                      "Greater", "PlusAssign", "MinusAssign", "StarAssign", 
                      "DivAssign", "ModAssign", "XorAssign", "AndAssign", 
                      "OrAssign", "LeftShift", "LeftShiftAssign", "Equal", 
                      "NotEqual", "LessEqual", "GreaterEqual", "AndAnd", 
                      "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar", 
                      "Arrow", "Question", "Colon", "Doublecolon", "Semi", 
                      "Dot", "DotStar", "Ellipsis", "Identifier", "Integerliteral", 
                      "Decimalliteral", "Octalliteral", "Hexadecimalliteral", 
                      "Binaryliteral", "Integersuffix", "Characterliteral", 
                      "Floatingliteral", "Stringliteral", "Userdefinedintegerliteral", 
                      "Userdefinedfloatingliteral", "Userdefinedstringliteral", 
                      "Userdefinedcharacterliteral", "Whitespace", "Newline", 
                      "BlockComment", "LineComment" ]

    RULE_translationunit = 0
    RULE_primaryexpression = 1
    RULE_idexpression = 2
    RULE_unqualifiedid = 3
    RULE_qualifiedid = 4
    RULE_nestednamespecifier = 5
    RULE_lambdaexpression = 6
    RULE_lambdaintroducer = 7
    RULE_lambdacapture = 8
    RULE_capturedefault = 9
    RULE_capturelist = 10
    RULE_capture = 11
    RULE_simplecapture = 12
    RULE_initcapture = 13
    RULE_lambdadeclarator = 14
    RULE_postfixexpression = 15
    RULE_expressionlist = 16
    RULE_pseudodestructorname = 17
    RULE_unaryexpression = 18
    RULE_unaryoperator = 19
    RULE_newexpression = 20
    RULE_newplacement = 21
    RULE_newtypeid = 22
    RULE_newdeclarator = 23
    RULE_noptrnewdeclarator = 24
    RULE_newinitializer = 25
    RULE_deleteexpression = 26
    RULE_noexceptexpression = 27
    RULE_castexpression = 28
    RULE_pmexpression = 29
    RULE_multiplicativeexpression = 30
    RULE_additiveexpression = 31
    RULE_shiftexpression = 32
    RULE_relationalexpression = 33
    RULE_equalityexpression = 34
    RULE_andexpression = 35
    RULE_exclusiveorexpression = 36
    RULE_inclusiveorexpression = 37
    RULE_logicalandexpression = 38
    RULE_logicalorexpression = 39
    RULE_conditionalexpression = 40
    RULE_assignmentexpression = 41
    RULE_assignmentoperator = 42
    RULE_expression = 43
    RULE_constantexpression = 44
    RULE_statement = 45
    RULE_labeledstatement = 46
    RULE_expressionstatement = 47
    RULE_compoundstatement = 48
    RULE_statementseq = 49
    RULE_selectionstatement = 50
    RULE_condition = 51
    RULE_iterationstatement = 52
    RULE_forinitstatement = 53
    RULE_forrangedeclaration = 54
    RULE_forrangeinitializer = 55
    RULE_jumpstatement = 56
    RULE_declarationstatement = 57
    RULE_declarationseq = 58
    RULE_declaration = 59
    RULE_blockdeclaration = 60
    RULE_aliasdeclaration = 61
    RULE_simpledeclaration = 62
    RULE_static_assertdeclaration = 63
    RULE_emptydeclaration = 64
    RULE_attributedeclaration = 65
    RULE_declspecifier = 66
    RULE_declspecifierseq = 67
    RULE_storageclassspecifier = 68
    RULE_functionspecifier = 69
    RULE_typedefname = 70
    RULE_typespecifier = 71
    RULE_trailingtypespecifier = 72
    RULE_typespecifierseq = 73
    RULE_trailingtypespecifierseq = 74
    RULE_simpletypespecifier = 75
    RULE_thetypename = 76
    RULE_decltypespecifier = 77
    RULE_elaboratedtypespecifier = 78
    RULE_enumname = 79
    RULE_enumspecifier = 80
    RULE_enumhead = 81
    RULE_opaqueenumdeclaration = 82
    RULE_enumkey = 83
    RULE_enumbase = 84
    RULE_enumeratorlist = 85
    RULE_enumeratordefinition = 86
    RULE_enumerator = 87
    RULE_namespacename = 88
    RULE_originalnamespacename = 89
    RULE_namespacedefinition = 90
    RULE_namednamespacedefinition = 91
    RULE_originalnamespacedefinition = 92
    RULE_extensionnamespacedefinition = 93
    RULE_unnamednamespacedefinition = 94
    RULE_namespacebody = 95
    RULE_namespacealias = 96
    RULE_namespacealiasdefinition = 97
    RULE_qualifiednamespacespecifier = 98
    RULE_usingdeclaration = 99
    RULE_usingdirective = 100
    RULE_asmdefinition = 101
    RULE_linkagespecification = 102
    RULE_attributespecifierseq = 103
    RULE_attributespecifier = 104
    RULE_alignmentspecifier = 105
    RULE_attributelist = 106
    RULE_attribute = 107
    RULE_attributetoken = 108
    RULE_attributescopedtoken = 109
    RULE_attributenamespace = 110
    RULE_attributeargumentclause = 111
    RULE_balancedtokenseq = 112
    RULE_balancedtoken = 113
    RULE_initdeclaratorlist = 114
    RULE_initdeclarator = 115
    RULE_declarator = 116
    RULE_ptrdeclarator = 117
    RULE_noptrdeclarator = 118
    RULE_parametersandqualifiers = 119
    RULE_trailingreturntype = 120
    RULE_ptroperator = 121
    RULE_cvqualifierseq = 122
    RULE_cvqualifier = 123
    RULE_refqualifier = 124
    RULE_declaratorid = 125
    RULE_thetypeid = 126
    RULE_abstractdeclarator = 127
    RULE_ptrabstractdeclarator = 128
    RULE_noptrabstractdeclarator = 129
    RULE_abstractpackdeclarator = 130
    RULE_noptrabstractpackdeclarator = 131
    RULE_parameterdeclarationclause = 132
    RULE_parameterdeclarationlist = 133
    RULE_parameterdeclaration = 134
    RULE_functiondefinition = 135
    RULE_functionbody = 136
    RULE_initializer = 137
    RULE_braceorequalinitializer = 138
    RULE_initializerclause = 139
    RULE_initializerlist = 140
    RULE_bracedinitlist = 141
    RULE_classname = 142
    RULE_classspecifier = 143
    RULE_classhead = 144
    RULE_classheadname = 145
    RULE_classvirtspecifier = 146
    RULE_classkey = 147
    RULE_memberspecification = 148
    RULE_memberdeclaration = 149
    RULE_memberdeclaratorlist = 150
    RULE_memberdeclarator = 151
    RULE_virtspecifierseq = 152
    RULE_virtspecifier = 153
    RULE_purespecifier = 154
    RULE_baseclause = 155
    RULE_basespecifierlist = 156
    RULE_basespecifier = 157
    RULE_classordecltype = 158
    RULE_basetypespecifier = 159
    RULE_accessspecifier = 160
    RULE_conversionfunctionid = 161
    RULE_conversiontypeid = 162
    RULE_conversiondeclarator = 163
    RULE_ctorinitializer = 164
    RULE_meminitializerlist = 165
    RULE_meminitializer = 166
    RULE_meminitializerid = 167
    RULE_operatorfunctionid = 168
    RULE_literaloperatorid = 169
    RULE_templatedeclaration = 170
    RULE_templateparameterlist = 171
    RULE_templateparameter = 172
    RULE_typeparameter = 173
    RULE_simpletemplateid = 174
    RULE_templateid = 175
    RULE_templatename = 176
    RULE_templateargumentlist = 177
    RULE_templateargument = 178
    RULE_typenamespecifier = 179
    RULE_explicitinstantiation = 180
    RULE_explicitspecialization = 181
    RULE_tryblock = 182
    RULE_functiontryblock = 183
    RULE_handlerseq = 184
    RULE_handler = 185
    RULE_exceptiondeclaration = 186
    RULE_throwexpression = 187
    RULE_exceptionspecification = 188
    RULE_dynamicexceptionspecification = 189
    RULE_typeidlist = 190
    RULE_noexceptspecification = 191
    RULE_rightShift = 192
    RULE_rightShiftAssign = 193
    RULE_theoperator = 194
    RULE_literal = 195
    RULE_booleanliteral = 196
    RULE_pointerliteral = 197
    RULE_userdefinedliteral = 198

    ruleNames =  [ "translationunit", "primaryexpression", "idexpression", 
                   "unqualifiedid", "qualifiedid", "nestednamespecifier", 
                   "lambdaexpression", "lambdaintroducer", "lambdacapture", 
                   "capturedefault", "capturelist", "capture", "simplecapture", 
                   "initcapture", "lambdadeclarator", "postfixexpression", 
                   "expressionlist", "pseudodestructorname", "unaryexpression", 
                   "unaryoperator", "newexpression", "newplacement", "newtypeid", 
                   "newdeclarator", "noptrnewdeclarator", "newinitializer", 
                   "deleteexpression", "noexceptexpression", "castexpression", 
                   "pmexpression", "multiplicativeexpression", "additiveexpression", 
                   "shiftexpression", "relationalexpression", "equalityexpression", 
                   "andexpression", "exclusiveorexpression", "inclusiveorexpression", 
                   "logicalandexpression", "logicalorexpression", "conditionalexpression", 
                   "assignmentexpression", "assignmentoperator", "expression", 
                   "constantexpression", "statement", "labeledstatement", 
                   "expressionstatement", "compoundstatement", "statementseq", 
                   "selectionstatement", "condition", "iterationstatement", 
                   "forinitstatement", "forrangedeclaration", "forrangeinitializer", 
                   "jumpstatement", "declarationstatement", "declarationseq", 
                   "declaration", "blockdeclaration", "aliasdeclaration", 
                   "simpledeclaration", "static_assertdeclaration", "emptydeclaration", 
                   "attributedeclaration", "declspecifier", "declspecifierseq", 
                   "storageclassspecifier", "functionspecifier", "typedefname", 
                   "typespecifier", "trailingtypespecifier", "typespecifierseq", 
                   "trailingtypespecifierseq", "simpletypespecifier", "thetypename", 
                   "decltypespecifier", "elaboratedtypespecifier", "enumname", 
                   "enumspecifier", "enumhead", "opaqueenumdeclaration", 
                   "enumkey", "enumbase", "enumeratorlist", "enumeratordefinition", 
                   "enumerator", "namespacename", "originalnamespacename", 
                   "namespacedefinition", "namednamespacedefinition", "originalnamespacedefinition", 
                   "extensionnamespacedefinition", "unnamednamespacedefinition", 
                   "namespacebody", "namespacealias", "namespacealiasdefinition", 
                   "qualifiednamespacespecifier", "usingdeclaration", "usingdirective", 
                   "asmdefinition", "linkagespecification", "attributespecifierseq", 
                   "attributespecifier", "alignmentspecifier", "attributelist", 
                   "attribute", "attributetoken", "attributescopedtoken", 
                   "attributenamespace", "attributeargumentclause", "balancedtokenseq", 
                   "balancedtoken", "initdeclaratorlist", "initdeclarator", 
                   "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
                   "trailingreturntype", "ptroperator", "cvqualifierseq", 
                   "cvqualifier", "refqualifier", "declaratorid", "thetypeid", 
                   "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator", 
                   "abstractpackdeclarator", "noptrabstractpackdeclarator", 
                   "parameterdeclarationclause", "parameterdeclarationlist", 
                   "parameterdeclaration", "functiondefinition", "functionbody", 
                   "initializer", "braceorequalinitializer", "initializerclause", 
                   "initializerlist", "bracedinitlist", "classname", "classspecifier", 
                   "classhead", "classheadname", "classvirtspecifier", "classkey", 
                   "memberspecification", "memberdeclaration", "memberdeclaratorlist", 
                   "memberdeclarator", "virtspecifierseq", "virtspecifier", 
                   "purespecifier", "baseclause", "basespecifierlist", "basespecifier", 
                   "classordecltype", "basetypespecifier", "accessspecifier", 
                   "conversionfunctionid", "conversiontypeid", "conversiondeclarator", 
                   "ctorinitializer", "meminitializerlist", "meminitializer", 
                   "meminitializerid", "operatorfunctionid", "literaloperatorid", 
                   "templatedeclaration", "templateparameterlist", "templateparameter", 
                   "typeparameter", "simpletemplateid", "templateid", "templatename", 
                   "templateargumentlist", "templateargument", "typenamespecifier", 
                   "explicitinstantiation", "explicitspecialization", "tryblock", 
                   "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
                   "throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
                   "typeidlist", "noexceptspecification", "rightShift", 
                   "rightShiftAssign", "theoperator", "literal", "booleanliteral", 
                   "pointerliteral", "userdefinedliteral" ]

    EOF = Token.EOF
    MultiLineMacro=1
    Directive=2
    Alignas=3
    Alignof=4
    Asm=5
    Auto=6
    Bool=7
    Break=8
    Case=9
    Catch=10
    Char=11
    Char16=12
    Char32=13
    Class=14
    Const=15
    Constexpr=16
    Const_cast=17
    Continue=18
    Decltype=19
    Default=20
    Delete=21
    Do=22
    Double=23
    Dynamic_cast=24
    Else=25
    Enum=26
    Explicit=27
    Export=28
    Extern=29
    False=30
    Final=31
    Float=32
    For=33
    Friend=34
    Goto=35
    If=36
    Inline=37
    Int=38
    Long=39
    Mutable=40
    Namespace=41
    New=42
    Noexcept=43
    Nullptr=44
    Operator=45
    Override=46
    Private=47
    Protected=48
    Public=49
    Register=50
    Reinterpret_cast=51
    Return=52
    Short=53
    Signed=54
    Sizeof=55
    Static=56
    Static_assert=57
    Static_cast=58
    Struct=59
    Switch=60
    Template=61
    This=62
    Thread_local=63
    Throw=64
    True=65
    Try=66
    Typedef=67
    Typeid=68
    Typename=69
    Union=70
    Unsigned=71
    Using=72
    Virtual=73
    Void=74
    Volatile=75
    Wchar=76
    While=77
    LeftParen=78
    RightParen=79
    LeftBracket=80
    RightBracket=81
    LeftBrace=82
    RightBrace=83
    Plus=84
    Minus=85
    Star=86
    Div=87
    Mod=88
    Caret=89
    And=90
    Or=91
    Tilde=92
    Not=93
    Assign=94
    Less=95
    Greater=96
    PlusAssign=97
    MinusAssign=98
    StarAssign=99
    DivAssign=100
    ModAssign=101
    XorAssign=102
    AndAssign=103
    OrAssign=104
    LeftShift=105
    LeftShiftAssign=106
    Equal=107
    NotEqual=108
    LessEqual=109
    GreaterEqual=110
    AndAnd=111
    OrOr=112
    PlusPlus=113
    MinusMinus=114
    Comma=115
    ArrowStar=116
    Arrow=117
    Question=118
    Colon=119
    Doublecolon=120
    Semi=121
    Dot=122
    DotStar=123
    Ellipsis=124
    Identifier=125
    Integerliteral=126
    Decimalliteral=127
    Octalliteral=128
    Hexadecimalliteral=129
    Binaryliteral=130
    Integersuffix=131
    Characterliteral=132
    Floatingliteral=133
    Stringliteral=134
    Userdefinedintegerliteral=135
    Userdefinedfloatingliteral=136
    Userdefinedstringliteral=137
    Userdefinedcharacterliteral=138
    Whitespace=139
    Newline=140
    BlockComment=141
    LineComment=142

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class TranslationunitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationunit" ):
                listener.enterTranslationunit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationunit" ):
                listener.exitTranslationunit(self)




    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 398
                self.declarationseq(0)


            self.state = 401
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CPP14Parser.LiteralContext,0)


        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def lambdaexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LambdaexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_primaryexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression" ):
                listener.enterPrimaryexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression" ):
                listener.exitPrimaryexpression(self)




    def primaryexpression(self):

        localctx = CPP14Parser.PrimaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryexpression)
        try:
            self.state = 411
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.False, CPP14Parser.Nullptr, CPP14Parser.True, CPP14Parser.Integerliteral, CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 403
                self.literal()
                pass
            elif token in [CPP14Parser.This]:
                self.enterOuterAlt(localctx, 2)
                self.state = 404
                self.match(CPP14Parser.This)
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 3)
                self.state = 405
                self.match(CPP14Parser.LeftParen)
                self.state = 406
                self.expression(0)
                self.state = 407
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 4)
                self.state = 409
                self.idexpression()
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 5)
                self.state = 410
                self.lambdaexpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext,0)


        def qualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiedidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_idexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdexpression" ):
                listener.enterIdexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdexpression" ):
                listener.exitIdexpression(self)




    def idexpression(self):

        localctx = CPP14Parser.IdexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idexpression)
        try:
            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 413
                self.unqualifiedid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 414
                self.qualifiedid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnqualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorfunctionidContext,0)


        def conversionfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.ConversionfunctionidContext,0)


        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext,0)


        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def templateid(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid" ):
                listener.enterUnqualifiedid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid" ):
                listener.exitUnqualifiedid(self)




    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedid)
        try:
            self.state = 426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 417
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.operatorfunctionid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 419
                self.conversionfunctionid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 420
                self.literaloperatorid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 421
                self.match(CPP14Parser.Tilde)
                self.state = 422
                self.classname()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 423
                self.match(CPP14Parser.Tilde)
                self.state = 424
                self.decltypespecifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 425
                self.templateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiedid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedid" ):
                listener.enterQualifiedid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedid" ):
                listener.exitQualifiedid(self)




    def qualifiedid(self):

        localctx = CPP14Parser.QualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_qualifiedid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.nestednamespecifier(0)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Template:
                self.state = 429
                self.match(CPP14Parser.Template)


            self.state = 432
            self.unqualifiedid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestednamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext,0)


        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier" ):
                listener.enterNestednamespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier" ):
                listener.exitNestednamespecifier(self)



    def nestednamespecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_nestednamespecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 435
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 2:
                self.state = 436
                self.thetypename()
                self.state = 437
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 3:
                self.state = 439
                self.namespacename()
                self.state = 440
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 4:
                self.state = 442
                self.decltypespecifier()
                self.state = 443
                self.match(CPP14Parser.Doublecolon)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 457
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 447
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 448
                        self.match(CPP14Parser.Identifier)
                        self.state = 449
                        self.match(CPP14Parser.Doublecolon)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 450
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 452
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14Parser.Template:
                            self.state = 451
                            self.match(CPP14Parser.Template)


                        self.state = 454
                        self.simpletemplateid()
                        self.state = 455
                        self.match(CPP14Parser.Doublecolon)
                        pass

             
                self.state = 461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LambdaexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaintroducer(self):
            return self.getTypedRuleContext(CPP14Parser.LambdaintroducerContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdaexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaexpression" ):
                listener.enterLambdaexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaexpression" ):
                listener.exitLambdaexpression(self)




    def lambdaexpression(self):

        localctx = CPP14Parser.LambdaexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lambdaexpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.lambdaintroducer()
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.LeftParen:
                self.state = 463
                self.lambdadeclarator()


            self.state = 466
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaintroducerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdacapture(self):
            return self.getTypedRuleContext(CPP14Parser.LambdacaptureContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdaintroducer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaintroducer" ):
                listener.enterLambdaintroducer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaintroducer" ):
                listener.exitLambdaintroducer(self)




    def lambdaintroducer(self):

        localctx = CPP14Parser.LambdaintroducerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lambdaintroducer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(CPP14Parser.LeftBracket)
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (CPP14Parser.This - 62)) | (1 << (CPP14Parser.And - 62)) | (1 << (CPP14Parser.Assign - 62)) | (1 << (CPP14Parser.Identifier - 62)))) != 0):
                self.state = 469
                self.lambdacapture()


            self.state = 472
            self.match(CPP14Parser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdacaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capturedefault(self):
            return self.getTypedRuleContext(CPP14Parser.CapturedefaultContext,0)


        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdacapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdacapture" ):
                listener.enterLambdacapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdacapture" ):
                listener.exitLambdacapture(self)




    def lambdacapture(self):

        localctx = CPP14Parser.LambdacaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_lambdacapture)
        try:
            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.capturedefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.capturelist(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 476
                self.capturedefault()
                self.state = 477
                self.match(CPP14Parser.Comma)
                self.state = 478
                self.capturelist(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CapturedefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_capturedefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturedefault" ):
                listener.enterCapturedefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturedefault" ):
                listener.exitCapturedefault(self)




    def capturedefault(self):

        localctx = CPP14Parser.CapturedefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_capturedefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.And or _la==CPP14Parser.Assign):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CapturelistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture(self):
            return self.getTypedRuleContext(CPP14Parser.CaptureContext,0)


        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_capturelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturelist" ):
                listener.enterCapturelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturelist" ):
                listener.exitCapturelist(self)



    def capturelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.CapturelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_capturelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.capture()
            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 486
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 497
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.CapturelistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_capturelist)
                    self.state = 489
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 490
                    self.match(CPP14Parser.Comma)
                    self.state = 491
                    self.capture()
                    self.state = 493
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 492
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 499
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplecapture(self):
            return self.getTypedRuleContext(CPP14Parser.SimplecaptureContext,0)


        def initcapture(self):
            return self.getTypedRuleContext(CPP14Parser.InitcaptureContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_capture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture" ):
                listener.enterCapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture" ):
                listener.exitCapture(self)




    def capture(self):

        localctx = CPP14Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_capture)
        try:
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 500
                self.simplecapture()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 501
                self.initcapture()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplecaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simplecapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplecapture" ):
                listener.enterSimplecapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplecapture" ):
                listener.exitSimplecapture(self)




    def simplecapture(self):

        localctx = CPP14Parser.SimplecaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_simplecapture)
        try:
            self.state = 508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [CPP14Parser.And]:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.match(CPP14Parser.And)
                self.state = 506
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [CPP14Parser.This]:
                self.enterOuterAlt(localctx, 3)
                self.state = 507
                self.match(CPP14Parser.This)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitcaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initcapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitcapture" ):
                listener.enterInitcapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitcapture" ):
                listener.exitInitcapture(self)




    def initcapture(self):

        localctx = CPP14Parser.InitcaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_initcapture)
        try:
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.match(CPP14Parser.Identifier)
                self.state = 511
                self.initializer()
                pass
            elif token in [CPP14Parser.And]:
                self.enterOuterAlt(localctx, 2)
                self.state = 512
                self.match(CPP14Parser.And)
                self.state = 513
                self.match(CPP14Parser.Identifier)
                self.state = 514
                self.initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdadeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext,0)


        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdadeclarator" ):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdadeclarator" ):
                listener.exitLambdadeclarator(self)




    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_lambdadeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(CPP14Parser.LeftParen)
            self.state = 518
            self.parameterdeclarationclause()
            self.state = 519
            self.match(CPP14Parser.RightParen)
            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Mutable:
                self.state = 520
                self.match(CPP14Parser.Mutable)


            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Noexcept or _la==CPP14Parser.Throw:
                self.state = 523
                self.exceptionspecification()


            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 526
                self.attributespecifierseq(0)


            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Arrow:
                self.state = 529
                self.trailingreturntype()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PrimaryexpressionContext,0)


        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext,0)


        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def Dynamic_cast(self):
            return self.getToken(CPP14Parser.Dynamic_cast, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Static_cast(self):
            return self.getToken(CPP14Parser.Static_cast, 0)

        def Reinterpret_cast(self):
            return self.getToken(CPP14Parser.Reinterpret_cast, 0)

        def Const_cast(self):
            return self.getToken(CPP14Parser.Const_cast, 0)

        def Typeid(self):
            return self.getToken(CPP14Parser.Typeid, 0)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)


        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression" ):
                listener.enterPostfixexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression" ):
                listener.exitPostfixexpression(self)



    def postfixexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_postfixexpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 533
                self.primaryexpression()
                pass

            elif la_ == 2:
                self.state = 534
                self.simpletypespecifier()
                self.state = 535
                self.match(CPP14Parser.LeftParen)
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 536
                    self.expressionlist()


                self.state = 539
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 3:
                self.state = 541
                self.typenamespecifier()
                self.state = 542
                self.match(CPP14Parser.LeftParen)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 543
                    self.expressionlist()


                self.state = 546
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 4:
                self.state = 548
                self.simpletypespecifier()
                self.state = 549
                self.bracedinitlist()
                pass

            elif la_ == 5:
                self.state = 551
                self.typenamespecifier()
                self.state = 552
                self.bracedinitlist()
                pass

            elif la_ == 6:
                self.state = 554
                self.match(CPP14Parser.Dynamic_cast)
                self.state = 555
                self.match(CPP14Parser.Less)
                self.state = 556
                self.thetypeid()
                self.state = 557
                self.match(CPP14Parser.Greater)
                self.state = 558
                self.match(CPP14Parser.LeftParen)
                self.state = 559
                self.expression(0)
                self.state = 560
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.state = 562
                self.match(CPP14Parser.Static_cast)
                self.state = 563
                self.match(CPP14Parser.Less)
                self.state = 564
                self.thetypeid()
                self.state = 565
                self.match(CPP14Parser.Greater)
                self.state = 566
                self.match(CPP14Parser.LeftParen)
                self.state = 567
                self.expression(0)
                self.state = 568
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                self.state = 570
                self.match(CPP14Parser.Reinterpret_cast)
                self.state = 571
                self.match(CPP14Parser.Less)
                self.state = 572
                self.thetypeid()
                self.state = 573
                self.match(CPP14Parser.Greater)
                self.state = 574
                self.match(CPP14Parser.LeftParen)
                self.state = 575
                self.expression(0)
                self.state = 576
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 9:
                self.state = 578
                self.match(CPP14Parser.Const_cast)
                self.state = 579
                self.match(CPP14Parser.Less)
                self.state = 580
                self.thetypeid()
                self.state = 581
                self.match(CPP14Parser.Greater)
                self.state = 582
                self.match(CPP14Parser.LeftParen)
                self.state = 583
                self.expression(0)
                self.state = 584
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 10:
                self.state = 586
                self.match(CPP14Parser.Typeid)
                self.state = 587
                self.match(CPP14Parser.LeftParen)
                self.state = 588
                self.expression(0)
                self.state = 589
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 11:
                self.state = 591
                self.match(CPP14Parser.Typeid)
                self.state = 592
                self.match(CPP14Parser.LeftParen)
                self.state = 593
                self.thetypeid()
                self.state = 594
                self.match(CPP14Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 638
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 636
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 598
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 599
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 600
                        self.expression(0)
                        self.state = 601
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 603
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 604
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 605
                        self.bracedinitlist()
                        self.state = 606
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 608
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 609
                        self.match(CPP14Parser.LeftParen)
                        self.state = 611
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 610
                            self.expressionlist()


                        self.state = 613
                        self.match(CPP14Parser.RightParen)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 614
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 615
                        self.match(CPP14Parser.Dot)
                        self.state = 617
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14Parser.Template:
                            self.state = 616
                            self.match(CPP14Parser.Template)


                        self.state = 619
                        self.idexpression()
                        pass

                    elif la_ == 5:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 620
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 621
                        self.match(CPP14Parser.Arrow)
                        self.state = 623
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14Parser.Template:
                            self.state = 622
                            self.match(CPP14Parser.Template)


                        self.state = 625
                        self.idexpression()
                        pass

                    elif la_ == 6:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 626
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 627
                        self.match(CPP14Parser.Dot)
                        self.state = 628
                        self.pseudodestructorname()
                        pass

                    elif la_ == 7:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 629
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 630
                        self.match(CPP14Parser.Arrow)
                        self.state = 631
                        self.pseudodestructorname()
                        pass

                    elif la_ == 8:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 632
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 633
                        self.match(CPP14Parser.PlusPlus)
                        pass

                    elif la_ == 9:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 634
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 635
                        self.match(CPP14Parser.MinusMinus)
                        pass

             
                self.state = 640
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExpressionlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionlist" ):
                listener.enterExpressionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionlist" ):
                listener.exitExpressionlist(self)




    def expressionlist(self):

        localctx = CPP14Parser.ExpressionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expressionlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.initializerlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PseudodestructornameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ThetypenameContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ThetypenameContext,i)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudodestructorname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname" ):
                listener.enterPseudodestructorname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname" ):
                listener.exitPseudodestructorname(self)




    def pseudodestructorname(self):

        localctx = CPP14Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pseudodestructorname)
        self._la = 0 # Token type
        try:
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 643
                    self.nestednamespecifier(0)


                self.state = 646
                self.thetypename()
                self.state = 647
                self.match(CPP14Parser.Doublecolon)
                self.state = 648
                self.match(CPP14Parser.Tilde)
                self.state = 649
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 651
                self.nestednamespecifier(0)
                self.state = 652
                self.match(CPP14Parser.Template)
                self.state = 653
                self.simpletemplateid()
                self.state = 654
                self.match(CPP14Parser.Doublecolon)
                self.state = 655
                self.match(CPP14Parser.Tilde)
                self.state = 656
                self.thetypename()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or _la==CPP14Parser.Doublecolon or _la==CPP14Parser.Identifier:
                    self.state = 658
                    self.nestednamespecifier(0)


                self.state = 661
                self.match(CPP14Parser.Tilde)
                self.state = 662
                self.thetypename()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 663
                self.match(CPP14Parser.Tilde)
                self.state = 664
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)


        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def unaryoperator(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryoperatorContext,0)


        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext,0)


        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def noexceptexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NoexceptexpressionContext,0)


        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext,0)


        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression" ):
                listener.enterUnaryexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression" ):
                listener.exitUnaryexpression(self)




    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_unaryexpression)
        try:
            self.state = 695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 667
                self.postfixexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 668
                self.match(CPP14Parser.PlusPlus)
                self.state = 669
                self.castexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 670
                self.match(CPP14Parser.MinusMinus)
                self.state = 671
                self.castexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 672
                self.unaryoperator()
                self.state = 673
                self.castexpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 675
                self.match(CPP14Parser.Sizeof)
                self.state = 676
                self.unaryexpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 677
                self.match(CPP14Parser.Sizeof)
                self.state = 678
                self.match(CPP14Parser.LeftParen)
                self.state = 679
                self.thetypeid()
                self.state = 680
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 682
                self.match(CPP14Parser.Sizeof)
                self.state = 683
                self.match(CPP14Parser.Ellipsis)
                self.state = 684
                self.match(CPP14Parser.LeftParen)
                self.state = 685
                self.match(CPP14Parser.Identifier)
                self.state = 686
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 687
                self.match(CPP14Parser.Alignof)
                self.state = 688
                self.match(CPP14Parser.LeftParen)
                self.state = 689
                self.thetypeid()
                self.state = 690
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 692
                self.noexceptexpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 693
                self.newexpression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 694
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator" ):
                listener.enterUnaryoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator" ):
                listener.exitUnaryoperator(self)




    def unaryoperator(self):

        localctx = CPP14Parser.UnaryoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_unaryoperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14Parser.Plus - 84)) | (1 << (CPP14Parser.Minus - 84)) | (1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (1 << (CPP14Parser.Or - 84)) | (1 << (CPP14Parser.Tilde - 84)) | (1 << (CPP14Parser.Not - 84)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def newtypeid(self):
            return self.getTypedRuleContext(CPP14Parser.NewtypeidContext,0)


        def newplacement(self):
            return self.getTypedRuleContext(CPP14Parser.NewplacementContext,0)


        def newinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.NewinitializerContext,0)


        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewexpression" ):
                listener.enterNewexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewexpression" ):
                listener.exitNewexpression(self)




    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_newexpression)
        self._la = 0 # Token type
        try:
            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Doublecolon:
                    self.state = 699
                    self.match(CPP14Parser.Doublecolon)


                self.state = 702
                self.match(CPP14Parser.New)
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.LeftParen:
                    self.state = 703
                    self.newplacement()


                self.state = 706
                self.newtypeid()
                self.state = 708
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 707
                    self.newinitializer()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Doublecolon:
                    self.state = 710
                    self.match(CPP14Parser.Doublecolon)


                self.state = 713
                self.match(CPP14Parser.New)
                self.state = 715
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 714
                    self.newplacement()


                self.state = 717
                self.match(CPP14Parser.LeftParen)
                self.state = 718
                self.thetypeid()
                self.state = 719
                self.match(CPP14Parser.RightParen)
                self.state = 721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 720
                    self.newinitializer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewplacementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newplacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewplacement" ):
                listener.enterNewplacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewplacement" ):
                listener.exitNewplacement(self)




    def newplacement(self):

        localctx = CPP14Parser.NewplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_newplacement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(CPP14Parser.LeftParen)
            self.state = 726
            self.expressionlist()
            self.state = 727
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewtypeidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newtypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewtypeid" ):
                listener.enterNewtypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewtypeid" ):
                listener.exitNewtypeid(self)




    def newtypeid(self):

        localctx = CPP14Parser.NewtypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_newtypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.typespecifierseq()
            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 730
                self.newdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext,0)


        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewdeclarator" ):
                listener.enterNewdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewdeclarator" ):
                listener.exitNewdeclarator(self)




    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_newdeclarator)
        try:
            self.state = 738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 733
                self.ptroperator()
                self.state = 735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 734
                    self.newdeclarator()


                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 737
                self.noptrnewdeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrnewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrnewdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrnewdeclarator" ):
                listener.enterNoptrnewdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrnewdeclarator" ):
                listener.exitNoptrnewdeclarator(self)



    def noptrnewdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrnewdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_noptrnewdeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(CPP14Parser.LeftBracket)
            self.state = 742
            self.expression(0)
            self.state = 743
            self.match(CPP14Parser.RightBracket)
            self.state = 745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 744
                self.attributespecifierseq(0)


            self._ctx.stop = self._input.LT(-1)
            self.state = 756
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrnewdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrnewdeclarator)
                    self.state = 747
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 748
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 749
                    self.constantexpression()
                    self.state = 750
                    self.match(CPP14Parser.RightBracket)
                    self.state = 752
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                    if la_ == 1:
                        self.state = 751
                        self.attributespecifierseq(0)

             
                self.state = 758
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NewinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewinitializer" ):
                listener.enterNewinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewinitializer" ):
                listener.exitNewinitializer(self)




    def newinitializer(self):

        localctx = CPP14Parser.NewinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_newinitializer)
        self._la = 0 # Token type
        try:
            self.state = 765
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 759
                self.match(CPP14Parser.LeftParen)
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 760
                    self.expressionlist()


                self.state = 763
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 764
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteexpression" ):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteexpression" ):
                listener.exitDeleteexpression(self)




    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_deleteexpression)
        self._la = 0 # Token type
        try:
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Doublecolon:
                    self.state = 767
                    self.match(CPP14Parser.Doublecolon)


                self.state = 770
                self.match(CPP14Parser.Delete)
                self.state = 771
                self.castexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Doublecolon:
                    self.state = 772
                    self.match(CPP14Parser.Doublecolon)


                self.state = 775
                self.match(CPP14Parser.Delete)
                self.state = 776
                self.match(CPP14Parser.LeftBracket)
                self.state = 777
                self.match(CPP14Parser.RightBracket)
                self.state = 778
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoexceptexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noexceptexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptexpression" ):
                listener.enterNoexceptexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptexpression" ):
                listener.exitNoexceptexpression(self)




    def noexceptexpression(self):

        localctx = CPP14Parser.NoexceptexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_noexceptexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(CPP14Parser.Noexcept)
            self.state = 782
            self.match(CPP14Parser.LeftParen)
            self.state = 783
            self.expression(0)
            self.state = 784
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext,0)


        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_castexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastexpression" ):
                listener.enterCastexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastexpression" ):
                listener.exitCastexpression(self)




    def castexpression(self):

        localctx = CPP14Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_castexpression)
        try:
            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.unaryexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 787
                self.match(CPP14Parser.LeftParen)
                self.state = 788
                self.thetypeid()
                self.state = 789
                self.match(CPP14Parser.RightParen)
                self.state = 790
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PmexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_pmexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmexpression" ):
                listener.enterPmexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmexpression" ):
                listener.exitPmexpression(self)



    def pmexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PmexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_pmexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.castexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 805
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 803
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 797
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 798
                        self.match(CPP14Parser.DotStar)
                        self.state = 799
                        self.castexpression()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 800
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 801
                        self.match(CPP14Parser.ArrowStar)
                        self.state = 802
                        self.castexpression()
                        pass

             
                self.state = 807
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MultiplicativeexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext,0)


        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_multiplicativeexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression" ):
                listener.enterMultiplicativeexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression" ):
                listener.exitMultiplicativeexpression(self)



    def multiplicativeexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MultiplicativeexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_multiplicativeexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.pmexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 822
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 820
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 811
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 812
                        self.match(CPP14Parser.Star)
                        self.state = 813
                        self.pmexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 814
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 815
                        self.match(CPP14Parser.Div)
                        self.state = 816
                        self.pmexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 817
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 818
                        self.match(CPP14Parser.Mod)
                        self.state = 819
                        self.pmexpression(0)
                        pass

             
                self.state = 824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext,0)


        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_additiveexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveexpression" ):
                listener.enterAdditiveexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveexpression" ):
                listener.exitAdditiveexpression(self)



    def additiveexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AdditiveexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_additiveexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.multiplicativeexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 834
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 828
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 829
                        self.match(CPP14Parser.Plus)
                        self.state = 830
                        self.multiplicativeexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 831
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 832
                        self.match(CPP14Parser.Minus)
                        self.state = 833
                        self.multiplicativeexpression(0)
                        pass

             
                self.state = 838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ShiftexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext,0)


        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext,0)


        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftexpression" ):
                listener.enterShiftexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftexpression" ):
                listener.exitShiftexpression(self)



    def shiftexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ShiftexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_shiftexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.additiveexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 851
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 849
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                        self.state = 842
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 843
                        self.match(CPP14Parser.LeftShift)
                        self.state = 844
                        self.additiveexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                        self.state = 845
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 846
                        self.rightShift()
                        self.state = 847
                        self.additiveexpression(0)
                        pass

             
                self.state = 853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RelationalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext,0)


        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression" ):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression" ):
                listener.exitRelationalexpression(self)



    def relationalexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_relationalexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.shiftexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 871
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 869
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 857
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 858
                        self.match(CPP14Parser.Less)
                        self.state = 859
                        self.shiftexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 860
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 861
                        self.match(CPP14Parser.Greater)
                        self.state = 862
                        self.shiftexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 863
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 864
                        self.match(CPP14Parser.LessEqual)
                        self.state = 865
                        self.shiftexpression(0)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 866
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 867
                        self.match(CPP14Parser.GreaterEqual)
                        self.state = 868
                        self.shiftexpression(0)
                        pass

             
                self.state = 873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext,0)


        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityexpression" ):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityexpression" ):
                listener.exitEqualityexpression(self)



    def equalityexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_equalityexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 885
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 883
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 877
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 878
                        self.match(CPP14Parser.Equal)
                        self.state = 879
                        self.relationalexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 880
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 881
                        self.match(CPP14Parser.NotEqual)
                        self.state = 882
                        self.relationalexpression(0)
                        pass

             
                self.state = 887
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AndexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext,0)


        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_andexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndexpression" ):
                listener.enterAndexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndexpression" ):
                listener.exitAndexpression(self)



    def andexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AndexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_andexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.equalityexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AndexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andexpression)
                    self.state = 891
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 892
                    self.match(CPP14Parser.And)
                    self.state = 893
                    self.equalityexpression(0) 
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext,0)


        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_exclusiveorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveorexpression" ):
                listener.enterExclusiveorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveorexpression" ):
                listener.exitExclusiveorexpression(self)



    def exclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_exclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.andexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 907
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveorexpression)
                    self.state = 902
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 903
                    self.match(CPP14Parser.Caret)
                    self.state = 904
                    self.andexpression(0) 
                self.state = 909
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext,0)


        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_inclusiveorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveorexpression" ):
                listener.enterInclusiveorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveorexpression" ):
                listener.exitInclusiveorexpression(self)



    def inclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_inclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.exclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveorexpression)
                    self.state = 913
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 914
                    self.match(CPP14Parser.Or)
                    self.state = 915
                    self.exclusiveorexpression(0) 
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalandexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext,0)


        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalandexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalandexpression" ):
                listener.enterLogicalandexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalandexpression" ):
                listener.exitLogicalandexpression(self)



    def logicalandexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalandexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_logicalandexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.inclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 929
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalandexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                    self.state = 924
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 925
                    self.match(CPP14Parser.AndAnd)
                    self.state = 926
                    self.inclusiveorexpression(0) 
                self.state = 931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext,0)


        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalorexpression" ):
                listener.enterLogicalorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalorexpression" ):
                listener.exitLogicalorexpression(self)



    def logicalorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_logicalorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.logicalandexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 940
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                    self.state = 935
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 936
                    self.match(CPP14Parser.OrOr)
                    self.state = 937
                    self.logicalandexpression(0) 
                self.state = 942
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conditionalexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalexpression" ):
                listener.enterConditionalexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalexpression" ):
                listener.exitConditionalexpression(self)




    def conditionalexpression(self):

        localctx = CPP14Parser.ConditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conditionalexpression)
        try:
            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 943
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self.logicalorexpression(0)
                self.state = 945
                self.match(CPP14Parser.Question)
                self.state = 946
                self.expression(0)
                self.state = 947
                self.match(CPP14Parser.Colon)
                self.state = 948
                self.assignmentexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext,0)


        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)


        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext,0)


        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def throwexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ThrowexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentexpression" ):
                listener.enterAssignmentexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentexpression" ):
                listener.exitAssignmentexpression(self)




    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_assignmentexpression)
        try:
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 952
                self.conditionalexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 953
                self.logicalorexpression(0)
                self.state = 954
                self.assignmentoperator()
                self.state = 955
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 957
                self.throwexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator" ):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator" ):
                listener.exitAssignmentoperator(self)




    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_assignmentoperator)
        try:
            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.match(CPP14Parser.Assign)
                pass
            elif token in [CPP14Parser.StarAssign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.match(CPP14Parser.StarAssign)
                pass
            elif token in [CPP14Parser.DivAssign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 962
                self.match(CPP14Parser.DivAssign)
                pass
            elif token in [CPP14Parser.ModAssign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 963
                self.match(CPP14Parser.ModAssign)
                pass
            elif token in [CPP14Parser.PlusAssign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 964
                self.match(CPP14Parser.PlusAssign)
                pass
            elif token in [CPP14Parser.MinusAssign]:
                self.enterOuterAlt(localctx, 6)
                self.state = 965
                self.match(CPP14Parser.MinusAssign)
                pass
            elif token in [CPP14Parser.Greater]:
                self.enterOuterAlt(localctx, 7)
                self.state = 966
                self.rightShiftAssign()
                pass
            elif token in [CPP14Parser.LeftShiftAssign]:
                self.enterOuterAlt(localctx, 8)
                self.state = 967
                self.match(CPP14Parser.LeftShiftAssign)
                pass
            elif token in [CPP14Parser.AndAssign]:
                self.enterOuterAlt(localctx, 9)
                self.state = 968
                self.match(CPP14Parser.AndAssign)
                pass
            elif token in [CPP14Parser.XorAssign]:
                self.enterOuterAlt(localctx, 10)
                self.state = 969
                self.match(CPP14Parser.XorAssign)
                pass
            elif token in [CPP14Parser.OrAssign]:
                self.enterOuterAlt(localctx, 11)
                self.state = 970
                self.match(CPP14Parser.OrAssign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 86
        self.enterRecursionRule(localctx, 86, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.assignmentexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 981
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 976
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 977
                    self.match(CPP14Parser.Comma)
                    self.state = 978
                    self.assignmentexpression() 
                self.state = 983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstantexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_constantexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantexpression" ):
                listener.enterConstantexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantexpression" ):
                listener.exitConstantexpression(self)




    def constantexpression(self):

        localctx = CPP14Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_constantexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.conditionalexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledstatement(self):
            return self.getTypedRuleContext(CPP14Parser.LabeledstatementContext,0)


        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionstatementContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def selectionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.SelectionstatementContext,0)


        def iterationstatement(self):
            return self.getTypedRuleContext(CPP14Parser.IterationstatementContext,0)


        def jumpstatement(self):
            return self.getTypedRuleContext(CPP14Parser.JumpstatementContext,0)


        def declarationstatement(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationstatementContext,0)


        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 986
                self.labeledstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 988
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 987
                    self.attributespecifierseq(0)


                self.state = 990
                self.expressionstatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 991
                    self.attributespecifierseq(0)


                self.state = 994
                self.compoundstatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 995
                    self.attributespecifierseq(0)


                self.state = 998
                self.selectionstatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 999
                    self.attributespecifierseq(0)


                self.state = 1002
                self.iterationstatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1003
                    self.attributespecifierseq(0)


                self.state = 1006
                self.jumpstatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1007
                self.declarationstatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1008
                    self.attributespecifierseq(0)


                self.state = 1011
                self.tryblock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabeledstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_labeledstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledstatement" ):
                listener.enterLabeledstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledstatement" ):
                listener.exitLabeledstatement(self)




    def labeledstatement(self):

        localctx = CPP14Parser.LabeledstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_labeledstatement)
        self._la = 0 # Token type
        try:
            self.state = 1034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1014
                    self.attributespecifierseq(0)


                self.state = 1017
                self.match(CPP14Parser.Identifier)
                self.state = 1018
                self.match(CPP14Parser.Colon)
                self.state = 1019
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1020
                    self.attributespecifierseq(0)


                self.state = 1023
                self.match(CPP14Parser.Case)
                self.state = 1024
                self.constantexpression()
                self.state = 1025
                self.match(CPP14Parser.Colon)
                self.state = 1026
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1028
                    self.attributespecifierseq(0)


                self.state = 1031
                self.match(CPP14Parser.Default)
                self.state = 1032
                self.match(CPP14Parser.Colon)
                self.state = 1033
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionstatement" ):
                listener.enterExpressionstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionstatement" ):
                listener.exitExpressionstatement(self)




    def expressionstatement(self):

        localctx = CPP14Parser.ExpressionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_expressionstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 1036
                self.expression(0)


            self.state = 1039
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompoundstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_compoundstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundstatement" ):
                listener.enterCompoundstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundstatement" ):
                listener.exitCompoundstatement(self)




    def compoundstatement(self):

        localctx = CPP14Parser.CompoundstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_compoundstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(CPP14Parser.LeftBrace)
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True - 64)) | (1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 1042
                self.statementseq(0)


            self.state = 1045
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_statementseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementseq" ):
                listener.enterStatementseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementseq" ):
                listener.exitStatementseq(self)



    def statementseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.StatementseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_statementseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.statement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1054
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.StatementseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_statementseq)
                    self.state = 1050
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1051
                    self.statement() 
                self.state = 1056
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SelectionstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext,i)


        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_selectionstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionstatement" ):
                listener.enterSelectionstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionstatement" ):
                listener.exitSelectionstatement(self)




    def selectionstatement(self):

        localctx = CPP14Parser.SelectionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_selectionstatement)
        try:
            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1057
                self.match(CPP14Parser.If)
                self.state = 1058
                self.match(CPP14Parser.LeftParen)
                self.state = 1059
                self.condition()
                self.state = 1060
                self.match(CPP14Parser.RightParen)
                self.state = 1061
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.match(CPP14Parser.If)
                self.state = 1064
                self.match(CPP14Parser.LeftParen)
                self.state = 1065
                self.condition()
                self.state = 1066
                self.match(CPP14Parser.RightParen)
                self.state = 1067
                self.statement()
                self.state = 1068
                self.match(CPP14Parser.Else)
                self.state = 1069
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1071
                self.match(CPP14Parser.Switch)
                self.state = 1072
                self.match(CPP14Parser.LeftParen)
                self.state = 1073
                self.condition()
                self.state = 1074
                self.match(CPP14Parser.RightParen)
                self.state = 1075
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.state = 1095
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1079
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1080
                    self.attributespecifierseq(0)


                self.state = 1083
                self.declspecifierseq()
                self.state = 1084
                self.declarator()
                self.state = 1085
                self.match(CPP14Parser.Assign)
                self.state = 1086
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1088
                    self.attributespecifierseq(0)


                self.state = 1091
                self.declspecifierseq()
                self.state = 1092
                self.declarator()
                self.state = 1093
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterationstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)


        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ForinitstatementContext,0)


        def forrangedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangedeclarationContext,0)


        def forrangeinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangeinitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_iterationstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationstatement" ):
                listener.enterIterationstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationstatement" ):
                listener.exitIterationstatement(self)




    def iterationstatement(self):

        localctx = CPP14Parser.IterationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_iterationstatement)
        self._la = 0 # Token type
        try:
            self.state = 1132
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1097
                self.match(CPP14Parser.While)
                self.state = 1098
                self.match(CPP14Parser.LeftParen)
                self.state = 1099
                self.condition()
                self.state = 1100
                self.match(CPP14Parser.RightParen)
                self.state = 1101
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self.match(CPP14Parser.Do)
                self.state = 1104
                self.statement()
                self.state = 1105
                self.match(CPP14Parser.While)
                self.state = 1106
                self.match(CPP14Parser.LeftParen)
                self.state = 1107
                self.expression(0)
                self.state = 1108
                self.match(CPP14Parser.RightParen)
                self.state = 1109
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1111
                self.match(CPP14Parser.For)
                self.state = 1112
                self.match(CPP14Parser.LeftParen)
                self.state = 1113
                self.forinitstatement()
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1114
                    self.condition()


                self.state = 1117
                self.match(CPP14Parser.Semi)
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1118
                    self.expression(0)


                self.state = 1121
                self.match(CPP14Parser.RightParen)
                self.state = 1122
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1124
                self.match(CPP14Parser.For)
                self.state = 1125
                self.match(CPP14Parser.LeftParen)
                self.state = 1126
                self.forrangedeclaration()
                self.state = 1127
                self.match(CPP14Parser.Colon)
                self.state = 1128
                self.forrangeinitializer()
                self.state = 1129
                self.match(CPP14Parser.RightParen)
                self.state = 1130
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForinitstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionstatementContext,0)


        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forinitstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForinitstatement" ):
                listener.enterForinitstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForinitstatement" ):
                listener.exitForinitstatement(self)




    def forinitstatement(self):

        localctx = CPP14Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_forinitstatement)
        try:
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1134
                self.expressionstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1135
                self.simpledeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForrangedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangedeclaration" ):
                listener.enterForrangedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangedeclaration" ):
                listener.exitForrangedeclaration(self)




    def forrangedeclaration(self):

        localctx = CPP14Parser.ForrangedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_forrangedeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1138
                self.attributespecifierseq(0)


            self.state = 1141
            self.declspecifierseq()
            self.state = 1142
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForrangeinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangeinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangeinitializer" ):
                listener.enterForrangeinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangeinitializer" ):
                listener.exitForrangeinitializer(self)




    def forrangeinitializer(self):

        localctx = CPP14Parser.ForrangeinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_forrangeinitializer)
        try:
            self.state = 1146
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.False, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.True, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral, CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1144
                self.expression(0)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1145
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JumpstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_jumpstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement" ):
                listener.enterJumpstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement" ):
                listener.exitJumpstatement(self)




    def jumpstatement(self):

        localctx = CPP14Parser.JumpstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_jumpstatement)
        self._la = 0 # Token type
        try:
            self.state = 1164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1148
                self.match(CPP14Parser.Break)
                self.state = 1149
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1150
                self.match(CPP14Parser.Continue)
                self.state = 1151
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1152
                self.match(CPP14Parser.Return)
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1153
                    self.expression(0)


                self.state = 1156
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1157
                self.match(CPP14Parser.Return)
                self.state = 1158
                self.bracedinitlist()
                self.state = 1159
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1161
                self.match(CPP14Parser.Goto)
                self.state = 1162
                self.match(CPP14Parser.Identifier)
                self.state = 1163
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationstatement" ):
                listener.enterDeclarationstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationstatement" ):
                listener.exitDeclarationstatement(self)




    def declarationstatement(self):

        localctx = CPP14Parser.DeclarationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_declarationstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.blockdeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationseq" ):
                listener.enterDeclarationseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationseq" ):
                listener.exitDeclarationseq(self)



    def declarationseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.DeclarationseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_declarationseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1175
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.DeclarationseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationseq)
                    self.state = 1171
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1172
                    self.declaration() 
                self.state = 1177
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext,0)


        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext,0)


        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatedeclarationContext,0)


        def explicitinstantiation(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitinstantiationContext,0)


        def explicitspecialization(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitspecializationContext,0)


        def linkagespecification(self):
            return self.getTypedRuleContext(CPP14Parser.LinkagespecificationContext,0)


        def namespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacedefinitionContext,0)


        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptydeclarationContext,0)


        def attributedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AttributedeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_declaration)
        try:
            self.state = 1187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1178
                self.blockdeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1179
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1180
                self.templatedeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1181
                self.explicitinstantiation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1182
                self.explicitspecialization()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1183
                self.linkagespecification()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1184
                self.namespacedefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1185
                self.emptydeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1186
                self.attributedeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext,0)


        def asmdefinition(self):
            return self.getTypedRuleContext(CPP14Parser.AsmdefinitionContext,0)


        def namespacealiasdefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacealiasdefinitionContext,0)


        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdeclarationContext,0)


        def usingdirective(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdirectiveContext,0)


        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.Static_assertdeclarationContext,0)


        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasdeclarationContext,0)


        def opaqueenumdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.OpaqueenumdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_blockdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration" ):
                listener.enterBlockdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration" ):
                listener.exitBlockdeclaration(self)




    def blockdeclaration(self):

        localctx = CPP14Parser.BlockdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_blockdeclaration)
        try:
            self.state = 1197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1189
                self.simpledeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1190
                self.asmdefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1191
                self.namespacealiasdefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1192
                self.usingdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1193
                self.usingdirective()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1194
                self.static_assertdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1195
                self.aliasdeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1196
                self.opaqueenumdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_aliasdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasdeclaration" ):
                listener.enterAliasdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasdeclaration" ):
                listener.exitAliasdeclaration(self)




    def aliasdeclaration(self):

        localctx = CPP14Parser.AliasdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_aliasdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(CPP14Parser.Using)
            self.state = 1200
            self.match(CPP14Parser.Identifier)
            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1201
                self.attributespecifierseq(0)


            self.state = 1204
            self.match(CPP14Parser.Assign)
            self.state = 1205
            self.thetypeid()
            self.state = 1206
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpledeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpledeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpledeclaration" ):
                listener.enterSimpledeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpledeclaration" ):
                listener.exitSimpledeclaration(self)




    def simpledeclaration(self):

        localctx = CPP14Parser.SimpledeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_simpledeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Struct, CPP14Parser.Thread_local, CPP14Parser.Typedef, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 1208
                    self.declspecifierseq()


                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or _la==CPP14Parser.Operator or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1211
                    self.initdeclaratorlist(0)


                self.state = 1214
                self.match(CPP14Parser.Semi)
                pass
            elif token in [CPP14Parser.Alignas, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1215
                self.attributespecifierseq(0)
                self.state = 1217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 1216
                    self.declspecifierseq()


                self.state = 1219
                self.initdeclaratorlist(0)
                self.state = 1220
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_assertdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_static_assertdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_assertdeclaration" ):
                listener.enterStatic_assertdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_assertdeclaration" ):
                listener.exitStatic_assertdeclaration(self)




    def static_assertdeclaration(self):

        localctx = CPP14Parser.Static_assertdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_static_assertdeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(CPP14Parser.Static_assert)
            self.state = 1225
            self.match(CPP14Parser.LeftParen)
            self.state = 1226
            self.constantexpression()
            self.state = 1227
            self.match(CPP14Parser.Comma)
            self.state = 1228
            self.match(CPP14Parser.Stringliteral)
            self.state = 1229
            self.match(CPP14Parser.RightParen)
            self.state = 1230
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmptydeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_emptydeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptydeclaration" ):
                listener.enterEmptydeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptydeclaration" ):
                listener.exitEmptydeclaration(self)




    def emptydeclaration(self):

        localctx = CPP14Parser.EmptydeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_emptydeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributedeclaration" ):
                listener.enterAttributedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributedeclaration" ):
                listener.exitAttributedeclaration(self)




    def attributedeclaration(self):

        localctx = CPP14Parser.AttributedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_attributedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.attributespecifierseq(0)
            self.state = 1235
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageclassspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.StorageclassspecifierContext,0)


        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext,0)


        def functionspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionspecifierContext,0)


        def Friend(self):
            return self.getToken(CPP14Parser.Friend, 0)

        def Typedef(self):
            return self.getToken(CPP14Parser.Typedef, 0)

        def Constexpr(self):
            return self.getToken(CPP14Parser.Constexpr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier" ):
                listener.enterDeclspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier" ):
                listener.exitDeclspecifier(self)




    def declspecifier(self):

        localctx = CPP14Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_declspecifier)
        try:
            self.state = 1243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Extern, CPP14Parser.Mutable, CPP14Parser.Register, CPP14Parser.Static, CPP14Parser.Thread_local]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1237
                self.storageclassspecifier()
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1238
                self.typespecifier()
                pass
            elif token in [CPP14Parser.Explicit, CPP14Parser.Inline, CPP14Parser.Virtual]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1239
                self.functionspecifier()
                pass
            elif token in [CPP14Parser.Friend]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1240
                self.match(CPP14Parser.Friend)
                pass
            elif token in [CPP14Parser.Typedef]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1241
                self.match(CPP14Parser.Typedef)
                pass
            elif token in [CPP14Parser.Constexpr]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1242
                self.match(CPP14Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifierseq" ):
                listener.enterDeclspecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifierseq" ):
                listener.exitDeclspecifierseq(self)




    def declspecifierseq(self):

        localctx = CPP14Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_declspecifierseq)
        try:
            self.state = 1252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self.declspecifier()
                self.state = 1247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 1246
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1249
                self.declspecifier()
                self.state = 1250
                self.declspecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StorageclassspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Register(self):
            return self.getToken(CPP14Parser.Register, 0)

        def Static(self):
            return self.getToken(CPP14Parser.Static, 0)

        def Thread_local(self):
            return self.getToken(CPP14Parser.Thread_local, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_storageclassspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier" ):
                listener.enterStorageclassspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier" ):
                listener.exitStorageclassspecifier(self)




    def storageclassspecifier(self):

        localctx = CPP14Parser.StorageclassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_storageclassspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Extern) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Thread_local))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def Explicit(self):
            return self.getToken(CPP14Parser.Explicit, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionspecifier" ):
                listener.enterFunctionspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionspecifier" ):
                listener.exitFunctionspecifier(self)




    def functionspecifier(self):

        localctx = CPP14Parser.FunctionspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_functionspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            _la = self._input.LA(1)
            if not(((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & ((1 << (CPP14Parser.Explicit - 27)) | (1 << (CPP14Parser.Inline - 27)) | (1 << (CPP14Parser.Virtual - 27)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedefnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typedefname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefname" ):
                listener.enterTypedefname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefname" ):
                listener.exitTypedefname(self)




    def typedefname(self):

        localctx = CPP14Parser.TypedefnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_typedefname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext,0)


        def classspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassspecifierContext,0)


        def enumspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.EnumspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifier" ):
                listener.enterTypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifier" ):
                listener.exitTypespecifier(self)




    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_typespecifier)
        try:
            self.state = 1263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1260
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.classspecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1262
                self.enumspecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext,0)


        def elaboratedtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ElaboratedtypespecifierContext,0)


        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext,0)


        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier" ):
                listener.enterTrailingtypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier" ):
                listener.exitTrailingtypespecifier(self)




    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_trailingtypespecifier)
        try:
            self.state = 1269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1265
                self.simpletypespecifier()
                pass
            elif token in [CPP14Parser.Class, CPP14Parser.Enum, CPP14Parser.Struct, CPP14Parser.Union]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1266
                self.elaboratedtypespecifier()
                pass
            elif token in [CPP14Parser.Typename]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1267
                self.typenamespecifier()
                pass
            elif token in [CPP14Parser.Const, CPP14Parser.Volatile]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1268
                self.cvqualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifierseq" ):
                listener.enterTypespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifierseq" ):
                listener.exitTypespecifierseq(self)




    def typespecifierseq(self):

        localctx = CPP14Parser.TypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typespecifierseq)
        try:
            self.state = 1278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1271
                self.typespecifier()
                self.state = 1273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1272
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1275
                self.typespecifier()
                self.state = 1276
                self.typespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifierseq" ):
                listener.enterTrailingtypespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifierseq" ):
                listener.exitTrailingtypespecifierseq(self)




    def trailingtypespecifierseq(self):

        localctx = CPP14Parser.TrailingtypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_trailingtypespecifierseq)
        try:
            self.state = 1287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1280
                self.trailingtypespecifier()
                self.state = 1282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 1281
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1284
                self.trailingtypespecifier()
                self.state = 1285
                self.trailingtypespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Char(self):
            return self.getToken(CPP14Parser.Char, 0)

        def Char16(self):
            return self.getToken(CPP14Parser.Char16, 0)

        def Char32(self):
            return self.getToken(CPP14Parser.Char32, 0)

        def Wchar(self):
            return self.getToken(CPP14Parser.Wchar, 0)

        def Bool(self):
            return self.getToken(CPP14Parser.Bool, 0)

        def Short(self):
            return self.getToken(CPP14Parser.Short, 0)

        def Int(self):
            return self.getToken(CPP14Parser.Int, 0)

        def Long(self):
            return self.getToken(CPP14Parser.Long, 0)

        def Signed(self):
            return self.getToken(CPP14Parser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CPP14Parser.Unsigned, 0)

        def Float(self):
            return self.getToken(CPP14Parser.Float, 0)

        def Double(self):
            return self.getToken(CPP14Parser.Double, 0)

        def Void(self):
            return self.getToken(CPP14Parser.Void, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier" ):
                listener.enterSimpletypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier" ):
                listener.exitSimpletypespecifier(self)




    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_simpletypespecifier)
        try:
            self.state = 1312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1290
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1289
                    self.nestednamespecifier(0)


                self.state = 1292
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1293
                self.nestednamespecifier(0)
                self.state = 1294
                self.match(CPP14Parser.Template)
                self.state = 1295
                self.simpletemplateid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1297
                self.match(CPP14Parser.Char)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1298
                self.match(CPP14Parser.Char16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1299
                self.match(CPP14Parser.Char32)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1300
                self.match(CPP14Parser.Wchar)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1301
                self.match(CPP14Parser.Bool)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1302
                self.match(CPP14Parser.Short)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1303
                self.match(CPP14Parser.Int)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1304
                self.match(CPP14Parser.Long)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1305
                self.match(CPP14Parser.Signed)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1306
                self.match(CPP14Parser.Unsigned)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1307
                self.match(CPP14Parser.Float)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1308
                self.match(CPP14Parser.Double)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1309
                self.match(CPP14Parser.Void)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1310
                self.match(CPP14Parser.Auto)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1311
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThetypenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def enumname(self):
            return self.getTypedRuleContext(CPP14Parser.EnumnameContext,0)


        def typedefname(self):
            return self.getTypedRuleContext(CPP14Parser.TypedefnameContext,0)


        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_thetypename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypename" ):
                listener.enterThetypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypename" ):
                listener.exitThetypename(self)




    def thetypename(self):

        localctx = CPP14Parser.ThetypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_thetypename)
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1314
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1315
                self.enumname()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1316
                self.typedefname()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1317
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecltypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_decltypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecltypespecifier" ):
                listener.enterDecltypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecltypespecifier" ):
                listener.exitDecltypespecifier(self)




    def decltypespecifier(self):

        localctx = CPP14Parser.DecltypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_decltypespecifier)
        try:
            self.state = 1329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1320
                self.match(CPP14Parser.Decltype)
                self.state = 1321
                self.match(CPP14Parser.LeftParen)
                self.state = 1322
                self.expression(0)
                self.state = 1323
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1325
                self.match(CPP14Parser.Decltype)
                self.state = 1326
                self.match(CPP14Parser.LeftParen)
                self.state = 1327
                self.match(CPP14Parser.Auto)
                self.state = 1328
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElaboratedtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elaboratedtypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier" ):
                listener.enterElaboratedtypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier" ):
                listener.exitElaboratedtypespecifier(self)




    def elaboratedtypespecifier(self):

        localctx = CPP14Parser.ElaboratedtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_elaboratedtypespecifier)
        self._la = 0 # Token type
        try:
            self.state = 1355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1331
                self.classkey()
                self.state = 1333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1332
                    self.attributespecifierseq(0)


                self.state = 1336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 1335
                    self.nestednamespecifier(0)


                self.state = 1338
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1340
                self.classkey()
                self.state = 1341
                self.simpletemplateid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1343
                self.classkey()
                self.state = 1344
                self.nestednamespecifier(0)
                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Template:
                    self.state = 1345
                    self.match(CPP14Parser.Template)


                self.state = 1348
                self.simpletemplateid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1350
                self.match(CPP14Parser.Enum)
                self.state = 1352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 1351
                    self.nestednamespecifier(0)


                self.state = 1354
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumname" ):
                listener.enterEnumname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumname" ):
                listener.exitEnumname(self)




    def enumname(self):

        localctx = CPP14Parser.EnumnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_enumname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumhead(self):
            return self.getTypedRuleContext(CPP14Parser.EnumheadContext,0)


        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumspecifier" ):
                listener.enterEnumspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumspecifier" ):
                listener.exitEnumspecifier(self)




    def enumspecifier(self):

        localctx = CPP14Parser.EnumspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_enumspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1359
                self.enumhead()
                self.state = 1360
                self.match(CPP14Parser.LeftBrace)
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 1361
                    self.enumeratorlist(0)


                self.state = 1364
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1366
                self.enumhead()
                self.state = 1367
                self.match(CPP14Parser.LeftBrace)
                self.state = 1368
                self.enumeratorlist(0)
                self.state = 1369
                self.match(CPP14Parser.Comma)
                self.state = 1370
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumheadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumhead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumhead" ):
                listener.enterEnumhead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumhead" ):
                listener.exitEnumhead(self)




    def enumhead(self):

        localctx = CPP14Parser.EnumheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_enumhead)
        self._la = 0 # Token type
        try:
            self.state = 1393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1374
                self.enumkey()
                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1375
                    self.attributespecifierseq(0)


                self.state = 1379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 1378
                    self.match(CPP14Parser.Identifier)


                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1381
                    self.enumbase()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1384
                self.enumkey()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1385
                    self.attributespecifierseq(0)


                self.state = 1388
                self.nestednamespecifier(0)
                self.state = 1389
                self.match(CPP14Parser.Identifier)
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1390
                    self.enumbase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpaqueenumdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_opaqueenumdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaqueenumdeclaration" ):
                listener.enterOpaqueenumdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaqueenumdeclaration" ):
                listener.exitOpaqueenumdeclaration(self)




    def opaqueenumdeclaration(self):

        localctx = CPP14Parser.OpaqueenumdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_opaqueenumdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.enumkey()
            self.state = 1397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1396
                self.attributespecifierseq(0)


            self.state = 1399
            self.match(CPP14Parser.Identifier)
            self.state = 1401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Colon:
                self.state = 1400
                self.enumbase()


            self.state = 1403
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumkeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumkey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey" ):
                listener.enterEnumkey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey" ):
                listener.exitEnumkey(self)




    def enumkey(self):

        localctx = CPP14Parser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_enumkey)
        try:
            self.state = 1410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1405
                self.match(CPP14Parser.Enum)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1406
                self.match(CPP14Parser.Enum)
                self.state = 1407
                self.match(CPP14Parser.Class)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1408
                self.match(CPP14Parser.Enum)
                self.state = 1409
                self.match(CPP14Parser.Struct)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumbaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumbase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumbase" ):
                listener.enterEnumbase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumbase" ):
                listener.exitEnumbase(self)




    def enumbase(self):

        localctx = CPP14Parser.EnumbaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_enumbase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.match(CPP14Parser.Colon)
            self.state = 1413
            self.typespecifierseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratordefinition(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratordefinitionContext,0)


        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorlist" ):
                listener.enterEnumeratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorlist" ):
                listener.exitEnumeratorlist(self)



    def enumeratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EnumeratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_enumeratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.enumeratordefinition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1423
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EnumeratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorlist)
                    self.state = 1418
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1419
                    self.match(CPP14Parser.Comma)
                    self.state = 1420
                    self.enumeratordefinition() 
                self.state = 1425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EnumeratordefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratordefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratordefinition" ):
                listener.enterEnumeratordefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratordefinition" ):
                listener.exitEnumeratordefinition(self)




    def enumeratordefinition(self):

        localctx = CPP14Parser.EnumeratordefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_enumeratordefinition)
        try:
            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1426
                self.enumerator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1427
                self.enumerator()
                self.state = 1428
                self.match(CPP14Parser.Assign)
                self.state = 1429
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = CPP14Parser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_enumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacenameContext,0)


        def namespacealias(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacealiasContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacename" ):
                listener.enterNamespacename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacename" ):
                listener.exitNamespacename(self)




    def namespacename(self):

        localctx = CPP14Parser.NamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_namespacename)
        try:
            self.state = 1437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1435
                self.originalnamespacename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1436
                self.namespacealias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OriginalnamespacenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_originalnamespacename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacename" ):
                listener.enterOriginalnamespacename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacename" ):
                listener.exitOriginalnamespacename(self)




    def originalnamespacename(self):

        localctx = CPP14Parser.OriginalnamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_originalnamespacename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamednamespacedefinitionContext,0)


        def unnamednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.UnnamednamespacedefinitionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacedefinition" ):
                listener.enterNamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacedefinition" ):
                listener.exitNamespacedefinition(self)




    def namespacedefinition(self):

        localctx = CPP14Parser.NamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_namespacedefinition)
        try:
            self.state = 1443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1441
                self.namednamespacedefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1442
                self.unnamednamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamednamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalnamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacedefinitionContext,0)


        def extensionnamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.ExtensionnamespacedefinitionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namednamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamednamespacedefinition" ):
                listener.enterNamednamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamednamespacedefinition" ):
                listener.exitNamednamespacedefinition(self)




    def namednamespacedefinition(self):

        localctx = CPP14Parser.NamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_namednamespacedefinition)
        try:
            self.state = 1447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1445
                self.originalnamespacedefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.extensionnamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OriginalnamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext,0)


        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_originalnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacedefinition" ):
                listener.enterOriginalnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacedefinition" ):
                listener.exitOriginalnamespacedefinition(self)




    def originalnamespacedefinition(self):

        localctx = CPP14Parser.OriginalnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_originalnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Inline:
                self.state = 1449
                self.match(CPP14Parser.Inline)


            self.state = 1452
            self.match(CPP14Parser.Namespace)
            self.state = 1453
            self.match(CPP14Parser.Identifier)
            self.state = 1454
            self.match(CPP14Parser.LeftBrace)
            self.state = 1455
            self.namespacebody()
            self.state = 1456
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtensionnamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacenameContext,0)


        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext,0)


        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_extensionnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionnamespacedefinition" ):
                listener.enterExtensionnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionnamespacedefinition" ):
                listener.exitExtensionnamespacedefinition(self)




    def extensionnamespacedefinition(self):

        localctx = CPP14Parser.ExtensionnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_extensionnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Inline:
                self.state = 1458
                self.match(CPP14Parser.Inline)


            self.state = 1461
            self.match(CPP14Parser.Namespace)
            self.state = 1462
            self.originalnamespacename()
            self.state = 1463
            self.match(CPP14Parser.LeftBrace)
            self.state = 1464
            self.namespacebody()
            self.state = 1465
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnnamednamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext,0)


        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unnamednamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamednamespacedefinition" ):
                listener.enterUnnamednamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamednamespacedefinition" ):
                listener.exitUnnamednamespacedefinition(self)




    def unnamednamespacedefinition(self):

        localctx = CPP14Parser.UnnamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_unnamednamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Inline:
                self.state = 1467
                self.match(CPP14Parser.Inline)


            self.state = 1470
            self.match(CPP14Parser.Namespace)
            self.state = 1471
            self.match(CPP14Parser.LeftBrace)
            self.state = 1472
            self.namespacebody()
            self.state = 1473
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacebodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacebody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacebody" ):
                listener.enterNamespacebody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacebody" ):
                listener.exitNamespacebody(self)




    def namespacebody(self):

        localctx = CPP14Parser.NamespacebodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_namespacebody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 1475
                self.declarationseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacealiasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacealias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealias" ):
                listener.enterNamespacealias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealias" ):
                listener.exitNamespacealias(self)




    def namespacealias(self):

        localctx = CPP14Parser.NamespacealiasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_namespacealias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacealiasdefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def qualifiednamespacespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiednamespacespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacealiasdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealiasdefinition" ):
                listener.enterNamespacealiasdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealiasdefinition" ):
                listener.exitNamespacealiasdefinition(self)




    def namespacealiasdefinition(self):

        localctx = CPP14Parser.NamespacealiasdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_namespacealiasdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.match(CPP14Parser.Namespace)
            self.state = 1481
            self.match(CPP14Parser.Identifier)
            self.state = 1482
            self.match(CPP14Parser.Assign)
            self.state = 1483
            self.qualifiednamespacespecifier()
            self.state = 1484
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiednamespacespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiednamespacespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiednamespacespecifier" ):
                listener.enterQualifiednamespacespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiednamespacespecifier" ):
                listener.exitQualifiednamespacespecifier(self)




    def qualifiednamespacespecifier(self):

        localctx = CPP14Parser.QualifiednamespacespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_qualifiednamespacespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1486
                self.nestednamespecifier(0)


            self.state = 1489
            self.namespacename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext,0)


        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_usingdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdeclaration" ):
                listener.enterUsingdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdeclaration" ):
                listener.exitUsingdeclaration(self)




    def usingdeclaration(self):

        localctx = CPP14Parser.UsingdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_usingdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1491
                self.match(CPP14Parser.Using)
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Typename:
                    self.state = 1492
                    self.match(CPP14Parser.Typename)


                self.state = 1495
                self.nestednamespecifier(0)
                self.state = 1496
                self.unqualifiedid()
                self.state = 1497
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1499
                self.match(CPP14Parser.Using)
                self.state = 1500
                self.match(CPP14Parser.Doublecolon)
                self.state = 1501
                self.unqualifiedid()
                self.state = 1502
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingdirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_usingdirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdirective" ):
                listener.enterUsingdirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdirective" ):
                listener.exitUsingdirective(self)




    def usingdirective(self):

        localctx = CPP14Parser.UsingdirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_usingdirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1506
                self.attributespecifierseq(0)


            self.state = 1509
            self.match(CPP14Parser.Using)
            self.state = 1510
            self.match(CPP14Parser.Namespace)
            self.state = 1512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1511
                self.nestednamespecifier(0)


            self.state = 1514
            self.namespacename()
            self.state = 1515
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsmdefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_asmdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmdefinition" ):
                listener.enterAsmdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmdefinition" ):
                listener.exitAsmdefinition(self)




    def asmdefinition(self):

        localctx = CPP14Parser.AsmdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_asmdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(CPP14Parser.Asm)
            self.state = 1518
            self.match(CPP14Parser.LeftParen)
            self.state = 1519
            self.match(CPP14Parser.Stringliteral)
            self.state = 1520
            self.match(CPP14Parser.RightParen)
            self.state = 1521
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinkagespecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_linkagespecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkagespecification" ):
                listener.enterLinkagespecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkagespecification" ):
                listener.exitLinkagespecification(self)




    def linkagespecification(self):

        localctx = CPP14Parser.LinkagespecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_linkagespecification)
        self._la = 0 # Token type
        try:
            self.state = 1533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1523
                self.match(CPP14Parser.Extern)
                self.state = 1524
                self.match(CPP14Parser.Stringliteral)
                self.state = 1525
                self.match(CPP14Parser.LeftBrace)
                self.state = 1527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1526
                    self.declarationseq(0)


                self.state = 1529
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1530
                self.match(CPP14Parser.Extern)
                self.state = 1531
                self.match(CPP14Parser.Stringliteral)
                self.state = 1532
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifierseq" ):
                listener.enterAttributespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifierseq" ):
                listener.exitAttributespecifierseq(self)



    def attributespecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributespecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 206
        self.enterRecursionRule(localctx, 206, self.RULE_attributespecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.attributespecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1542
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AttributespecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributespecifierseq)
                    self.state = 1538
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1539
                    self.attributespecifier() 
                self.state = 1544
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext,0)


        def alignmentspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AlignmentspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifier" ):
                listener.enterAttributespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifier" ):
                listener.exitAttributespecifier(self)




    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_attributespecifier)
        try:
            self.state = 1552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1545
                self.match(CPP14Parser.LeftBracket)
                self.state = 1546
                self.match(CPP14Parser.LeftBracket)
                self.state = 1547
                self.attributelist(0)
                self.state = 1548
                self.match(CPP14Parser.RightBracket)
                self.state = 1549
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.Alignas]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1551
                self.alignmentspecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlignmentspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_alignmentspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentspecifier" ):
                listener.enterAlignmentspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentspecifier" ):
                listener.exitAlignmentspecifier(self)




    def alignmentspecifier(self):

        localctx = CPP14Parser.AlignmentspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_alignmentspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1554
                self.match(CPP14Parser.Alignas)
                self.state = 1555
                self.match(CPP14Parser.LeftParen)
                self.state = 1556
                self.thetypeid()
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1557
                    self.match(CPP14Parser.Ellipsis)


                self.state = 1560
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1562
                self.match(CPP14Parser.Alignas)
                self.state = 1563
                self.match(CPP14Parser.LeftParen)
                self.state = 1564
                self.constantexpression()
                self.state = 1566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1565
                    self.match(CPP14Parser.Ellipsis)


                self.state = 1568
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributelistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeContext,0)


        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist" ):
                listener.enterAttributelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist" ):
                listener.exitAttributelist(self)



    def attributelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 212
        self.enterRecursionRule(localctx, 212, self.RULE_attributelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1574
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1573
                    self.attribute()


                pass

            elif la_ == 2:
                self.state = 1576
                self.attribute()
                self.state = 1577
                self.match(CPP14Parser.Ellipsis)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1593
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1591
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1581
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1582
                        self.match(CPP14Parser.Comma)
                        self.state = 1584
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                        if la_ == 1:
                            self.state = 1583
                            self.attribute()


                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1586
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1587
                        self.match(CPP14Parser.Comma)
                        self.state = 1588
                        self.attribute()
                        self.state = 1589
                        self.match(CPP14Parser.Ellipsis)
                        pass

             
                self.state = 1595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributetoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributetokenContext,0)


        def attributeargumentclause(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeargumentclauseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = CPP14Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1596
            self.attributetoken()
            self.state = 1598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1597
                self.attributeargumentclause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributetokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributescopedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributescopedtokenContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributetoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributetoken" ):
                listener.enterAttributetoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributetoken" ):
                listener.exitAttributetoken(self)




    def attributetoken(self):

        localctx = CPP14Parser.AttributetokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_attributetoken)
        try:
            self.state = 1602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1600
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1601
                self.attributescopedtoken()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributescopedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributenamespace(self):
            return self.getTypedRuleContext(CPP14Parser.AttributenamespaceContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributescopedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributescopedtoken" ):
                listener.enterAttributescopedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributescopedtoken" ):
                listener.exitAttributescopedtoken(self)




    def attributescopedtoken(self):

        localctx = CPP14Parser.AttributescopedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_attributescopedtoken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            self.attributenamespace()
            self.state = 1605
            self.match(CPP14Parser.Doublecolon)
            self.state = 1606
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributenamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributenamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributenamespace" ):
                listener.enterAttributenamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributenamespace" ):
                listener.exitAttributenamespace(self)




    def attributenamespace(self):

        localctx = CPP14Parser.AttributenamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_attributenamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeargumentclauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributeargumentclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeargumentclause" ):
                listener.enterAttributeargumentclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeargumentclause" ):
                listener.exitAttributeargumentclause(self)




    def attributeargumentclause(self):

        localctx = CPP14Parser.AttributeargumentclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_attributeargumentclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.match(CPP14Parser.LeftParen)
            self.state = 1611
            self.balancedtokenseq(0)
            self.state = 1612
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedtokenseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext,0)


        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtokenseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtokenseq" ):
                listener.enterBalancedtokenseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtokenseq" ):
                listener.exitBalancedtokenseq(self)



    def balancedtokenseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BalancedtokenseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 224
        self.enterRecursionRule(localctx, 224, self.RULE_balancedtokenseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1615
                self.balancedtoken()


            self._ctx.stop = self._input.LT(-1)
            self.state = 1622
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BalancedtokenseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_balancedtokenseq)
                    self.state = 1618
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1619
                    self.balancedtoken() 
                self.state = 1624
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken" ):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken" ):
                listener.exitBalancedtoken(self)




    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_balancedtoken)
        try:
            self.state = 1637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1625
                self.match(CPP14Parser.LeftParen)
                self.state = 1626
                self.balancedtokenseq(0)
                self.state = 1627
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1629
                self.match(CPP14Parser.LeftBracket)
                self.state = 1630
                self.balancedtokenseq(0)
                self.state = 1631
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1633
                self.match(CPP14Parser.LeftBrace)
                self.state = 1634
                self.balancedtokenseq(0)
                self.state = 1635
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorContext,0)


        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclaratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclaratorlist" ):
                listener.enterInitdeclaratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclaratorlist" ):
                listener.exitInitdeclaratorlist(self)



    def initdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 228
        self.enterRecursionRule(localctx, 228, self.RULE_initdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.initdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1647
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initdeclaratorlist)
                    self.state = 1642
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1643
                    self.match(CPP14Parser.Comma)
                    self.state = 1644
                    self.initdeclarator() 
                self.state = 1649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InitdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclarator" ):
                listener.enterInitdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclarator" ):
                listener.exitInitdeclarator(self)




    def initdeclarator(self):

        localctx = CPP14Parser.InitdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_initdeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.declarator()
            self.state = 1652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1651
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext,0)


        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_declarator)
        try:
            self.state = 1659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1654
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.noptrdeclarator(0)
                self.state = 1656
                self.parametersandqualifiers()
                self.state = 1657
                self.trailingreturntype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrdeclarator" ):
                listener.enterPtrdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrdeclarator" ):
                listener.exitPtrdeclarator(self)




    def ptrdeclarator(self):

        localctx = CPP14Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_ptrdeclarator)
        try:
            self.state = 1665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1661
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1662
                self.ptroperator()
                self.state = 1663
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaratorid(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratoridContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext,0)


        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrdeclarator" ):
                listener.enterNoptrdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrdeclarator" ):
                listener.exitNoptrdeclarator(self)



    def noptrdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 236
        self.enterRecursionRule(localctx, 236, self.RULE_noptrdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.state = 1668
                self.declaratorid()
                self.state = 1670
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1669
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 1672
                self.match(CPP14Parser.LeftParen)
                self.state = 1673
                self.ptrdeclarator()
                self.state = 1674
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1691
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1689
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1678
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1679
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1680
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1681
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1683
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.True - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1682
                            self.constantexpression()


                        self.state = 1685
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1687
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                        if la_ == 1:
                            self.state = 1686
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParametersandqualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def refqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.RefqualifierContext,0)


        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParametersandqualifiers" ):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParametersandqualifiers" ):
                listener.exitParametersandqualifiers(self)




    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_parametersandqualifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.match(CPP14Parser.LeftParen)
            self.state = 1695
            self.parameterdeclarationclause()
            self.state = 1696
            self.match(CPP14Parser.RightParen)
            self.state = 1698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1697
                self.cvqualifierseq()


            self.state = 1701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1700
                self.refqualifier()


            self.state = 1704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1703
                self.exceptionspecification()


            self.state = 1707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1706
                self.attributespecifierseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingreturntypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingreturntype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingreturntype" ):
                listener.enterTrailingreturntype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingreturntype" ):
                listener.exitTrailingreturntype(self)




    def trailingreturntype(self):

        localctx = CPP14Parser.TrailingreturntypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_trailingreturntype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.match(CPP14Parser.Arrow)
            self.state = 1710
            self.trailingtypespecifierseq()
            self.state = 1712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 1711
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtroperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ptroperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperator" ):
                listener.enterPtroperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperator" ):
                listener.exitPtroperator(self)




    def ptroperator(self):

        localctx = CPP14Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_ptroperator)
        try:
            self.state = 1737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Star]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1714
                self.match(CPP14Parser.Star)
                self.state = 1716
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1715
                    self.attributespecifierseq(0)


                self.state = 1719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1718
                    self.cvqualifierseq()


                pass
            elif token in [CPP14Parser.And]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1721
                self.match(CPP14Parser.And)
                self.state = 1723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1722
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14Parser.AndAnd]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1725
                self.match(CPP14Parser.AndAnd)
                self.state = 1727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1726
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1729
                self.nestednamespecifier(0)
                self.state = 1730
                self.match(CPP14Parser.Star)
                self.state = 1732
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1731
                    self.attributespecifierseq(0)


                self.state = 1735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1734
                    self.cvqualifierseq()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CvqualifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifierseq" ):
                listener.enterCvqualifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifierseq" ):
                listener.exitCvqualifierseq(self)




    def cvqualifierseq(self):

        localctx = CPP14Parser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1739
            self.cvqualifier()
            self.state = 1741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1740
                self.cvqualifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CvqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CPP14Parser.Const, 0)

        def Volatile(self):
            return self.getToken(CPP14Parser.Volatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifier" ):
                listener.enterCvqualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifier" ):
                listener.exitCvqualifier(self)




    def cvqualifier(self):

        localctx = CPP14Parser.CvqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_cvqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.Const or _la==CPP14Parser.Volatile):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RefqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14Parser.RULE_refqualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefqualifier" ):
                listener.enterRefqualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefqualifier" ):
                listener.exitRefqualifier(self)




    def refqualifier(self):

        localctx = CPP14Parser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_refqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.And or _la==CPP14Parser.AndAnd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratoridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declaratorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaratorid" ):
                listener.enterDeclaratorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaratorid" ):
                listener.exitDeclaratorid(self)




    def declaratorid(self):

        localctx = CPP14Parser.DeclaratoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_declaratorid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Ellipsis:
                self.state = 1747
                self.match(CPP14Parser.Ellipsis)


            self.state = 1750
            self.idexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThetypeidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_thetypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypeid" ):
                listener.enterThetypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypeid" ):
                listener.exitThetypeid(self)




    def thetypeid(self):

        localctx = CPP14Parser.ThetypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_thetypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1752
            self.typespecifierseq()
            self.state = 1754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 1753
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext,0)


        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext,0)


        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractdeclarator" ):
                listener.enterAbstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractdeclarator" ):
                listener.exitAbstractdeclarator(self)




    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_abstractdeclarator)
        try:
            self.state = 1764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1756
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1758
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1757
                    self.noptrabstractdeclarator(0)


                self.state = 1760
                self.parametersandqualifiers()
                self.state = 1761
                self.trailingreturntype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1763
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrabstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrabstractdeclarator" ):
                listener.enterPtrabstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrabstractdeclarator" ):
                listener.exitPtrabstractdeclarator(self)




    def ptrabstractdeclarator(self):

        localctx = CPP14Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_ptrabstractdeclarator)
        try:
            self.state = 1771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1766
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1767
                self.ptroperator()
                self.state = 1769
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1768
                    self.ptrabstractdeclarator()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext,0)


        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator" ):
                listener.enterNoptrabstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator" ):
                listener.exitNoptrabstractdeclarator(self)



    def noptrabstractdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 258
        self.enterRecursionRule(localctx, 258, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.state = 1774
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 1775
                self.match(CPP14Parser.LeftBracket)
                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.True - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1776
                    self.constantexpression()


                self.state = 1779
                self.match(CPP14Parser.RightBracket)
                self.state = 1781
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1780
                    self.attributespecifierseq(0)


                pass

            elif la_ == 3:
                self.state = 1783
                self.match(CPP14Parser.LeftParen)
                self.state = 1784
                self.ptrabstractdeclarator()
                self.state = 1785
                self.match(CPP14Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1802
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1800
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1789
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1790
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1791
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1792
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1794
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.True - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1793
                            self.constantexpression()


                        self.state = 1796
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1798
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                        if la_ == 1:
                            self.state = 1797
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AbstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractpackdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractpackdeclarator" ):
                listener.enterAbstractpackdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractpackdeclarator" ):
                listener.exitAbstractpackdeclarator(self)




    def abstractpackdeclarator(self):

        localctx = CPP14Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_abstractpackdeclarator)
        try:
            self.state = 1809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Ellipsis]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1805
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1806
                self.ptroperator()
                self.state = 1807
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractpackdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractpackdeclarator" ):
                listener.enterNoptrabstractpackdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractpackdeclarator" ):
                listener.exitNoptrabstractpackdeclarator(self)



    def noptrabstractpackdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 262
        self.enterRecursionRule(localctx, 262, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.match(CPP14Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1827
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1825
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1814
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1815
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1816
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1817
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1819
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.True - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1818
                            self.constantexpression()


                        self.state = 1821
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1823
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                        if la_ == 1:
                            self.state = 1822
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1829
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationclauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationclause" ):
                listener.enterParameterdeclarationclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationclause" ):
                listener.exitParameterdeclarationclause(self)




    def parameterdeclarationclause(self):

        localctx = CPP14Parser.ParameterdeclarationclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_parameterdeclarationclause)
        self._la = 0 # Token type
        try:
            self.state = 1840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1830
                    self.parameterdeclarationlist(0)


                self.state = 1834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1833
                    self.match(CPP14Parser.Ellipsis)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1836
                self.parameterdeclarationlist(0)
                self.state = 1837
                self.match(CPP14Parser.Comma)
                self.state = 1838
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterdeclarationlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext,0)


        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationlist" ):
                listener.enterParameterdeclarationlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationlist" ):
                listener.exitParameterdeclarationlist(self)



    def parameterdeclarationlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ParameterdeclarationlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 266
        self.enterRecursionRule(localctx, 266, self.RULE_parameterdeclarationlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.parameterdeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1850
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ParameterdeclarationlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterdeclarationlist)
                    self.state = 1845
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1846
                    self.match(CPP14Parser.Comma)
                    self.state = 1847
                    self.parameterdeclaration() 
                self.state = 1852
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration" ):
                listener.enterParameterdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration" ):
                listener.exitParameterdeclaration(self)




    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_parameterdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1853
                    self.attributespecifierseq(0)


                self.state = 1856
                self.declspecifierseq()
                self.state = 1857
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1859
                    self.attributespecifierseq(0)


                self.state = 1862
                self.declspecifierseq()
                self.state = 1863
                self.declarator()
                self.state = 1864
                self.match(CPP14Parser.Assign)
                self.state = 1865
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1867
                    self.attributespecifierseq(0)


                self.state = 1870
                self.declspecifierseq()
                self.state = 1872
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 1871
                    self.abstractdeclarator()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1874
                    self.attributespecifierseq(0)


                self.state = 1877
                self.declspecifierseq()
                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1878
                    self.abstractdeclarator()


                self.state = 1881
                self.match(CPP14Parser.Assign)
                self.state = 1882
                self.initializerclause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctiondefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def functionbody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionbodyContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_functiondefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondefinition" ):
                listener.enterFunctiondefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondefinition" ):
                listener.exitFunctiondefinition(self)




    def functiondefinition(self):

        localctx = CPP14Parser.FunctiondefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_functiondefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1886
                self.attributespecifierseq(0)


            self.state = 1890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 1889
                self.declspecifierseq()


            self.state = 1892
            self.declarator()
            self.state = 1894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Final or _la==CPP14Parser.Override:
                self.state = 1893
                self.virtspecifierseq(0)


            self.state = 1896
            self.functionbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionbodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.CtorinitializerContext,0)


        def functiontryblock(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiontryblockContext,0)


        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionbody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody" ):
                listener.enterFunctionbody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody" ):
                listener.exitFunctionbody(self)




    def functionbody(self):

        localctx = CPP14Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_functionbody)
        self._la = 0 # Token type
        try:
            self.state = 1909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1898
                    self.ctorinitializer()


                self.state = 1901
                self.compoundstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1902
                self.functiontryblock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1903
                self.match(CPP14Parser.Assign)
                self.state = 1904
                self.match(CPP14Parser.Default)
                self.state = 1905
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1906
                self.match(CPP14Parser.Assign)
                self.state = 1907
                self.match(CPP14Parser.Delete)
                self.state = 1908
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext,0)


        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_initializer)
        try:
            self.state = 1916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace, CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1911
                self.braceorequalinitializer()
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1912
                self.match(CPP14Parser.LeftParen)
                self.state = 1913
                self.expressionlist()
                self.state = 1914
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BraceorequalinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_braceorequalinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraceorequalinitializer" ):
                listener.enterBraceorequalinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraceorequalinitializer" ):
                listener.exitBraceorequalinitializer(self)




    def braceorequalinitializer(self):

        localctx = CPP14Parser.BraceorequalinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_braceorequalinitializer)
        try:
            self.state = 1921
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1918
                self.match(CPP14Parser.Assign)
                self.state = 1919
                self.initializerclause()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1920
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerclauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerclause" ):
                listener.enterInitializerclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerclause" ):
                listener.exitInitializerclause(self)




    def initializerclause(self):

        localctx = CPP14Parser.InitializerclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_initializerclause)
        try:
            self.state = 1925
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.False, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.True, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral, CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1923
                self.assignmentexpression()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1924
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerlist" ):
                listener.enterInitializerlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerlist" ):
                listener.exitInitializerlist(self)



    def initializerlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitializerlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 280
        self.enterRecursionRule(localctx, 280, self.RULE_initializerlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1928
            self.initializerclause()
            self.state = 1930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1929
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 1940
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitializerlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerlist)
                    self.state = 1932
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1933
                    self.match(CPP14Parser.Comma)
                    self.state = 1934
                    self.initializerclause()
                    self.state = 1936
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                    if la_ == 1:
                        self.state = 1935
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 1942
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BracedinitlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_bracedinitlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracedinitlist" ):
                listener.enterBracedinitlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracedinitlist" ):
                listener.exitBracedinitlist(self)




    def bracedinitlist(self):

        localctx = CPP14Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_bracedinitlist)
        self._la = 0 # Token type
        try:
            self.state = 1952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1943
                self.match(CPP14Parser.LeftBrace)
                self.state = 1944
                self.initializerlist(0)
                self.state = 1946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Comma:
                    self.state = 1945
                    self.match(CPP14Parser.Comma)


                self.state = 1948
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1950
                self.match(CPP14Parser.LeftBrace)
                self.state = 1951
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassname" ):
                listener.enterClassname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassname" ):
                listener.exitClassname(self)




    def classname(self):

        localctx = CPP14Parser.ClassnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_classname)
        try:
            self.state = 1956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1954
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1955
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classhead(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadContext,0)


        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassspecifier" ):
                listener.enterClassspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassspecifier" ):
                listener.exitClassspecifier(self)




    def classspecifier(self):

        localctx = CPP14Parser.ClassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_classspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1958
            self.classhead()
            self.state = 1959
            self.match(CPP14Parser.LeftBrace)
            self.state = 1961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 1960
                self.memberspecification()


            self.state = 1963
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassheadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext,0)


        def classheadname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadnameContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def classvirtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassvirtspecifierContext,0)


        def baseclause(self):
            return self.getTypedRuleContext(CPP14Parser.BaseclauseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classhead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasshead" ):
                listener.enterClasshead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasshead" ):
                listener.exitClasshead(self)




    def classhead(self):

        localctx = CPP14Parser.ClassheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_classhead)
        self._la = 0 # Token type
        try:
            self.state = 1983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1965
                self.classkey()
                self.state = 1967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1966
                    self.attributespecifierseq(0)


                self.state = 1969
                self.classheadname()
                self.state = 1971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Final:
                    self.state = 1970
                    self.classvirtspecifier()


                self.state = 1974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1973
                    self.baseclause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1976
                self.classkey()
                self.state = 1978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1977
                    self.attributespecifierseq(0)


                self.state = 1981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1980
                    self.baseclause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassheadnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classheadname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassheadname" ):
                listener.enterClassheadname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassheadname" ):
                listener.exitClassheadname(self)




    def classheadname(self):

        localctx = CPP14Parser.ClassheadnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_classheadname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1986
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 1985
                self.nestednamespecifier(0)


            self.state = 1988
            self.classname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassvirtspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classvirtspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassvirtspecifier" ):
                listener.enterClassvirtspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassvirtspecifier" ):
                listener.exitClassvirtspecifier(self)




    def classvirtspecifier(self):

        localctx = CPP14Parser.ClassvirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_classvirtspecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self.match(CPP14Parser.Final)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClasskeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classkey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasskey" ):
                listener.enterClasskey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasskey" ):
                listener.exitClasskey(self)




    def classkey(self):

        localctx = CPP14Parser.ClasskeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_classkey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            _la = self._input.LA(1)
            if not(((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & ((1 << (CPP14Parser.Class - 14)) | (1 << (CPP14Parser.Struct - 14)) | (1 << (CPP14Parser.Union - 14)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext,0)


        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext,0)


        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_memberspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberspecification" ):
                listener.enterMemberspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberspecification" ):
                listener.exitMemberspecification(self)




    def memberspecification(self):

        localctx = CPP14Parser.MemberspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_memberspecification)
        self._la = 0 # Token type
        try:
            self.state = 2003
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Static_assert, CPP14Parser.Struct, CPP14Parser.Template, CPP14Parser.Thread_local, CPP14Parser.Typedef, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Using, CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Colon, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1994
                self.memberdeclaration()
                self.state = 1996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1995
                    self.memberspecification()


                pass
            elif token in [CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1998
                self.accessspecifier()
                self.state = 1999
                self.match(CPP14Parser.Colon)
                self.state = 2001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 2000
                    self.memberspecification()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext,0)


        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext,0)


        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdeclarationContext,0)


        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.Static_assertdeclarationContext,0)


        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatedeclarationContext,0)


        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasdeclarationContext,0)


        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptydeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration" ):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration" ):
                listener.exitMemberdeclaration(self)




    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_memberdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 2005
                    self.attributespecifierseq(0)


                self.state = 2009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 2008
                    self.declspecifierseq()


                self.state = 2012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Colon - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 2011
                    self.memberdeclaratorlist(0)


                self.state = 2014
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2015
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2016
                self.usingdeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2017
                self.static_assertdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2018
                self.templatedeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2019
                self.aliasdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2020
                self.emptydeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext,0)


        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaratorlist" ):
                listener.enterMemberdeclaratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaratorlist" ):
                listener.exitMemberdeclaratorlist(self)



    def memberdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MemberdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 300
        self.enterRecursionRule(localctx, 300, self.RULE_memberdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.memberdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2031
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.MemberdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_memberdeclaratorlist)
                    self.state = 2026
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2027
                    self.match(CPP14Parser.Comma)
                    self.state = 2028
                    self.memberdeclarator() 
                self.state = 2033
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MemberdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext,0)


        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext,0)


        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclarator" ):
                listener.enterMemberdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclarator" ):
                listener.exitMemberdeclarator(self)




    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_memberdeclarator)
        self._la = 0 # Token type
        try:
            self.state = 2053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2034
                self.declarator()
                self.state = 2036
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 2035
                    self.virtspecifierseq(0)


                self.state = 2039
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
                if la_ == 1:
                    self.state = 2038
                    self.purespecifier()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2041
                self.declarator()
                self.state = 2043
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 2042
                    self.braceorequalinitializer()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 2045
                    self.match(CPP14Parser.Identifier)


                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2048
                    self.attributespecifierseq(0)


                self.state = 2051
                self.match(CPP14Parser.Colon)
                self.state = 2052
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VirtspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def virtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifierseq" ):
                listener.enterVirtspecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifierseq" ):
                listener.exitVirtspecifierseq(self)



    def virtspecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.VirtspecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 304
        self.enterRecursionRule(localctx, 304, self.RULE_virtspecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2056
            self.virtspecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2062
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.VirtspecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_virtspecifierseq)
                    self.state = 2058
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2059
                    self.virtspecifier() 
                self.state = 2064
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class VirtspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Override(self):
            return self.getToken(CPP14Parser.Override, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifier" ):
                listener.enterVirtspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifier" ):
                listener.exitVirtspecifier(self)




    def virtspecifier(self):

        localctx = CPP14Parser.VirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_virtspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.Final or _la==CPP14Parser.Override):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PurespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurespecifier" ):
                listener.enterPurespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurespecifier" ):
                listener.exitPurespecifier(self)




    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self.match(CPP14Parser.Assign)
            self.state = 2068
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if((None if localctx.val is None else localctx.val.text).compareTo("0")!=0) throw new InputMismatchException(this);
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BaseclauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_baseclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseclause" ):
                listener.enterBaseclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseclause" ):
                listener.exitBaseclause(self)




    def baseclause(self):

        localctx = CPP14Parser.BaseclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_baseclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.match(CPP14Parser.Colon)
            self.state = 2072
            self.basespecifierlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasespecifierlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierContext,0)


        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifierlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifierlist" ):
                listener.enterBasespecifierlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifierlist" ):
                listener.exitBasespecifierlist(self)



    def basespecifierlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BasespecifierlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 312
        self.enterRecursionRule(localctx, 312, self.RULE_basespecifierlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            self.basespecifier()
            self.state = 2077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.state = 2076
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2087
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BasespecifierlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basespecifierlist)
                    self.state = 2079
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2080
                    self.match(CPP14Parser.Comma)
                    self.state = 2081
                    self.basespecifier()
                    self.state = 2083
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                    if la_ == 1:
                        self.state = 2082
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 2089
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BasespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basetypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasetypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifier" ):
                listener.enterBasespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifier" ):
                listener.exitBasespecifier(self)




    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_basespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2090
                    self.attributespecifierseq(0)


                self.state = 2093
                self.basetypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2094
                    self.attributespecifierseq(0)


                self.state = 2097
                self.match(CPP14Parser.Virtual)
                self.state = 2099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0):
                    self.state = 2098
                    self.accessspecifier()


                self.state = 2101
                self.basetypespecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2102
                    self.attributespecifierseq(0)


                self.state = 2105
                self.accessspecifier()
                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Virtual:
                    self.state = 2106
                    self.match(CPP14Parser.Virtual)


                self.state = 2109
                self.basetypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassordecltypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classordecltype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassordecltype" ):
                listener.enterClassordecltype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassordecltype" ):
                listener.exitClassordecltype(self)




    def classordecltype(self):

        localctx = CPP14Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_classordecltype)
        try:
            self.state = 2118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2114
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 2113
                    self.nestednamespecifier(0)


                self.state = 2116
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2117
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasetypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_basetypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasetypespecifier" ):
                listener.enterBasetypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasetypespecifier" ):
                listener.exitBasetypespecifier(self)




    def basetypespecifier(self):

        localctx = CPP14Parser.BasetypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_basetypespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2120
            self.classordecltype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AccessspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Private(self):
            return self.getToken(CPP14Parser.Private, 0)

        def Protected(self):
            return self.getToken(CPP14Parser.Protected, 0)

        def Public(self):
            return self.getToken(CPP14Parser.Public, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_accessspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessspecifier" ):
                listener.enterAccessspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessspecifier" ):
                listener.exitAccessspecifier(self)




    def accessspecifier(self):

        localctx = CPP14Parser.AccessspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_accessspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2122
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversionfunctionidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def conversiontypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiontypeidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversionfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionfunctionid" ):
                listener.enterConversionfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionfunctionid" ):
                listener.exitConversionfunctionid(self)




    def conversionfunctionid(self):

        localctx = CPP14Parser.ConversionfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_conversionfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self.match(CPP14Parser.Operator)
            self.state = 2125
            self.conversiontypeid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversiontypeidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiontypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiontypeid" ):
                listener.enterConversiontypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiontypeid" ):
                listener.exitConversiontypeid(self)




    def conversiontypeid(self):

        localctx = CPP14Parser.ConversiontypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_conversiontypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self.typespecifierseq()
            self.state = 2129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.state = 2128
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversiondeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiondeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiondeclarator" ):
                listener.enterConversiondeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiondeclarator" ):
                listener.exitConversiondeclarator(self)




    def conversiondeclarator(self):

        localctx = CPP14Parser.ConversiondeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_conversiondeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2131
            self.ptroperator()
            self.state = 2133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.state = 2132
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CtorinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ctorinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtorinitializer" ):
                listener.enterCtorinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtorinitializer" ):
                listener.exitCtorinitializer(self)




    def ctorinitializer(self):

        localctx = CPP14Parser.CtorinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_ctorinitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            self.match(CPP14Parser.Colon)
            self.state = 2136
            self.meminitializerlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializer(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerContext,0)


        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerlist" ):
                listener.enterMeminitializerlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerlist" ):
                listener.exitMeminitializerlist(self)




    def meminitializerlist(self):

        localctx = CPP14Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_meminitializerlist)
        self._la = 0 # Token type
        try:
            self.state = 2149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2138
                self.meminitializer()
                self.state = 2140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 2139
                    self.match(CPP14Parser.Ellipsis)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2142
                self.meminitializer()
                self.state = 2144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 2143
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2146
                self.match(CPP14Parser.Comma)
                self.state = 2147
                self.meminitializerlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerid(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializeridContext,0)


        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializer" ):
                listener.enterMeminitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializer" ):
                listener.exitMeminitializer(self)




    def meminitializer(self):

        localctx = CPP14Parser.MeminitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_meminitializer)
        self._la = 0 # Token type
        try:
            self.state = 2161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2151
                self.meminitializerid()
                self.state = 2152
                self.match(CPP14Parser.LeftParen)
                self.state = 2154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 2153
                    self.expressionlist()


                self.state = 2156
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2158
                self.meminitializerid()
                self.state = 2159
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializeridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerid" ):
                listener.enterMeminitializerid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerid" ):
                listener.exitMeminitializerid(self)




    def meminitializerid(self):

        localctx = CPP14Parser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_meminitializerid)
        try:
            self.state = 2165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2163
                self.classordecltype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2164
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorfunctionidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheoperatorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_operatorfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorfunctionid" ):
                listener.enterOperatorfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorfunctionid" ):
                listener.exitOperatorfunctionid(self)




    def operatorfunctionid(self):

        localctx = CPP14Parser.OperatorfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_operatorfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            self.match(CPP14Parser.Operator)
            self.state = 2168
            self.theoperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteraloperatoridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_literaloperatorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteraloperatorid" ):
                listener.enterLiteraloperatorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteraloperatorid" ):
                listener.exitLiteraloperatorid(self)




    def literaloperatorid(self):

        localctx = CPP14Parser.LiteraloperatoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_literaloperatorid)
        try:
            self.state = 2175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2170
                self.match(CPP14Parser.Operator)
                self.state = 2171
                self.match(CPP14Parser.Stringliteral)
                self.state = 2172
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2173
                self.match(CPP14Parser.Operator)
                self.state = 2174
                self.match(CPP14Parser.Userdefinedstringliteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplatedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templatedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatedeclaration" ):
                listener.enterTemplatedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatedeclaration" ):
                listener.exitTemplatedeclaration(self)




    def templatedeclaration(self):

        localctx = CPP14Parser.TemplatedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_templatedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            self.match(CPP14Parser.Template)
            self.state = 2178
            self.match(CPP14Parser.Less)
            self.state = 2179
            self.templateparameterlist(0)
            self.state = 2180
            self.match(CPP14Parser.Greater)
            self.state = 2181
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateparameterlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext,0)


        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameterlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameterlist" ):
                listener.enterTemplateparameterlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameterlist" ):
                listener.exitTemplateparameterlist(self)



    def templateparameterlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateparameterlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 342
        self.enterRecursionRule(localctx, 342, self.RULE_templateparameterlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2184
            self.templateparameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2191
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,277,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateparameterlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateparameterlist)
                    self.state = 2186
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2187
                    self.match(CPP14Parser.Comma)
                    self.state = 2188
                    self.templateparameter() 
                self.state = 2193
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,277,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TemplateparameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TypeparameterContext,0)


        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameter" ):
                listener.enterTemplateparameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameter" ):
                listener.exitTemplateparameter(self)




    def templateparameter(self):

        localctx = CPP14Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_templateparameter)
        try:
            self.state = 2196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2194
                self.typeparameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2195
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeparameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext,0)


        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typeparameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter" ):
                listener.enterTypeparameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter" ):
                listener.exitTypeparameter(self)




    def typeparameter(self):

        localctx = CPP14Parser.TypeparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_typeparameter)
        self._la = 0 # Token type
        try:
            self.state = 2246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2198
                self.match(CPP14Parser.Class)
                self.state = 2200
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                if la_ == 1:
                    self.state = 2199
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2203
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                if la_ == 1:
                    self.state = 2202
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2205
                self.match(CPP14Parser.Class)
                self.state = 2207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 2206
                    self.match(CPP14Parser.Identifier)


                self.state = 2209
                self.match(CPP14Parser.Assign)
                self.state = 2210
                self.thetypeid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2211
                self.match(CPP14Parser.Typename)
                self.state = 2213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
                if la_ == 1:
                    self.state = 2212
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2216
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2215
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2218
                self.match(CPP14Parser.Typename)
                self.state = 2220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 2219
                    self.match(CPP14Parser.Identifier)


                self.state = 2222
                self.match(CPP14Parser.Assign)
                self.state = 2223
                self.thetypeid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2224
                self.match(CPP14Parser.Template)
                self.state = 2225
                self.match(CPP14Parser.Less)
                self.state = 2226
                self.templateparameterlist(0)
                self.state = 2227
                self.match(CPP14Parser.Greater)
                self.state = 2228
                self.match(CPP14Parser.Class)
                self.state = 2230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 2229
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                if la_ == 1:
                    self.state = 2232
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2235
                self.match(CPP14Parser.Template)
                self.state = 2236
                self.match(CPP14Parser.Less)
                self.state = 2237
                self.templateparameterlist(0)
                self.state = 2238
                self.match(CPP14Parser.Greater)
                self.state = 2239
                self.match(CPP14Parser.Class)
                self.state = 2241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 2240
                    self.match(CPP14Parser.Identifier)


                self.state = 2243
                self.match(CPP14Parser.Assign)
                self.state = 2244
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletemplateidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templatename(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatenameContext,0)


        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletemplateid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletemplateid" ):
                listener.enterSimpletemplateid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletemplateid" ):
                listener.exitSimpletemplateid(self)




    def simpletemplateid(self):

        localctx = CPP14Parser.SimpletemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_simpletemplateid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2248
            self.templatename()
            self.state = 2249
            self.match(CPP14Parser.Less)
            self.state = 2251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.True - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 2250
                self.templateargumentlist(0)


            self.state = 2253
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorfunctionidContext,0)


        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext,0)


        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateid" ):
                listener.enterTemplateid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateid" ):
                listener.exitTemplateid(self)




    def templateid(self):

        localctx = CPP14Parser.TemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_templateid)
        self._la = 0 # Token type
        try:
            self.state = 2270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2255
                self.simpletemplateid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2256
                self.operatorfunctionid()
                self.state = 2257
                self.match(CPP14Parser.Less)
                self.state = 2259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.True - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 2258
                    self.templateargumentlist(0)


                self.state = 2261
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2263
                self.literaloperatorid()
                self.state = 2264
                self.match(CPP14Parser.Less)
                self.state = 2266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.False) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.True - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 2265
                    self.templateargumentlist(0)


                self.state = 2268
                self.match(CPP14Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplatenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templatename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatename" ):
                listener.enterTemplatename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatename" ):
                listener.exitTemplatename(self)




    def templatename(self):

        localctx = CPP14Parser.TemplatenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_templatename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2272
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateargumentlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateargument(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext,0)


        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargumentlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargumentlist" ):
                listener.enterTemplateargumentlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargumentlist" ):
                listener.exitTemplateargumentlist(self)



    def templateargumentlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateargumentlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 354
        self.enterRecursionRule(localctx, 354, self.RULE_templateargumentlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2275
            self.templateargument()
            self.state = 2277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 2276
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2287
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateargumentlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateargumentlist)
                    self.state = 2279
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2280
                    self.match(CPP14Parser.Comma)
                    self.state = 2281
                    self.templateargument()
                    self.state = 2283
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                    if la_ == 1:
                        self.state = 2282
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 2289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TemplateargumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargument" ):
                listener.enterTemplateargument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargument" ):
                listener.exitTemplateargument(self)




    def templateargument(self):

        localctx = CPP14Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_templateargument)
        try:
            self.state = 2293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2290
                self.thetypeid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2291
                self.constantexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2292
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypenamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typenamespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypenamespecifier" ):
                listener.enterTypenamespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypenamespecifier" ):
                listener.exitTypenamespecifier(self)




    def typenamespecifier(self):

        localctx = CPP14Parser.TypenamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_typenamespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2295
                self.match(CPP14Parser.Typename)
                self.state = 2296
                self.nestednamespecifier(0)
                self.state = 2297
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2299
                self.match(CPP14Parser.Typename)
                self.state = 2300
                self.nestednamespecifier(0)
                self.state = 2302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Template:
                    self.state = 2301
                    self.match(CPP14Parser.Template)


                self.state = 2304
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitinstantiationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitinstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitinstantiation" ):
                listener.enterExplicitinstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitinstantiation" ):
                listener.exitExplicitinstantiation(self)




    def explicitinstantiation(self):

        localctx = CPP14Parser.ExplicitinstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_explicitinstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Extern:
                self.state = 2308
                self.match(CPP14Parser.Extern)


            self.state = 2311
            self.match(CPP14Parser.Template)
            self.state = 2312
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitspecializationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitspecialization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitspecialization" ):
                listener.enterExplicitspecialization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitspecialization" ):
                listener.exitExplicitspecialization(self)




    def explicitspecialization(self):

        localctx = CPP14Parser.ExplicitspecializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_explicitspecialization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self.match(CPP14Parser.Template)
            self.state = 2315
            self.match(CPP14Parser.Less)
            self.state = 2316
            self.match(CPP14Parser.Greater)
            self.state = 2317
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryblockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryblock" ):
                listener.enterTryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryblock" ):
                listener.exitTryblock(self)




    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_tryblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            self.match(CPP14Parser.Try)
            self.state = 2320
            self.compoundstatement()
            self.state = 2321
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctiontryblockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext,0)


        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.CtorinitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_functiontryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiontryblock" ):
                listener.enterFunctiontryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiontryblock" ):
                listener.exitFunctiontryblock(self)




    def functiontryblock(self):

        localctx = CPP14Parser.FunctiontryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_functiontryblock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2323
            self.match(CPP14Parser.Try)
            self.state = 2325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Colon:
                self.state = 2324
                self.ctorinitializer()


            self.state = 2327
            self.compoundstatement()
            self.state = 2328
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handler(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_handlerseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerseq" ):
                listener.enterHandlerseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerseq" ):
                listener.exitHandlerseq(self)




    def handlerseq(self):

        localctx = CPP14Parser.HandlerseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_handlerseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.handler()
            self.state = 2332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2331
                self.handlerseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def exceptiondeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptiondeclarationContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandler" ):
                listener.enterHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandler" ):
                listener.exitHandler(self)




    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2334
            self.match(CPP14Parser.Catch)
            self.state = 2335
            self.match(CPP14Parser.LeftParen)
            self.state = 2336
            self.exceptiondeclaration()
            self.state = 2337
            self.match(CPP14Parser.RightParen)
            self.state = 2338
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptiondeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptiondeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptiondeclaration" ):
                listener.enterExceptiondeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptiondeclaration" ):
                listener.exitExceptiondeclaration(self)




    def exceptiondeclaration(self):

        localctx = CPP14Parser.ExceptiondeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_exceptiondeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2340
                    self.attributespecifierseq(0)


                self.state = 2343
                self.typespecifierseq()
                self.state = 2344
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2346
                    self.attributespecifierseq(0)


                self.state = 2349
                self.typespecifierseq()
                self.state = 2351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 2350
                    self.abstractdeclarator()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2353
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_throwexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowexpression" ):
                listener.enterThrowexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowexpression" ):
                listener.exitThrowexpression(self)




    def throwexpression(self):

        localctx = CPP14Parser.ThrowexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_throwexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2356
            self.match(CPP14Parser.Throw)
            self.state = 2358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.state = 2357
                self.assignmentexpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicexceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.DynamicexceptionspecificationContext,0)


        def noexceptspecification(self):
            return self.getTypedRuleContext(CPP14Parser.NoexceptspecificationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptionspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionspecification" ):
                listener.enterExceptionspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionspecification" ):
                listener.exitExceptionspecification(self)




    def exceptionspecification(self):

        localctx = CPP14Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_exceptionspecification)
        try:
            self.state = 2362
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2360
                self.dynamicexceptionspecification()
                pass
            elif token in [CPP14Parser.Noexcept]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2361
                self.noexceptspecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DynamicexceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_dynamicexceptionspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicexceptionspecification" ):
                listener.enterDynamicexceptionspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicexceptionspecification" ):
                listener.exitDynamicexceptionspecification(self)




    def dynamicexceptionspecification(self):

        localctx = CPP14Parser.DynamicexceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_dynamicexceptionspecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2364
            self.match(CPP14Parser.Throw)
            self.state = 2365
            self.match(CPP14Parser.LeftParen)
            self.state = 2367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Struct))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CPP14Parser.Typename - 69)) | (1 << (CPP14Parser.Union - 69)) | (1 << (CPP14Parser.Unsigned - 69)) | (1 << (CPP14Parser.Void - 69)) | (1 << (CPP14Parser.Volatile - 69)) | (1 << (CPP14Parser.Wchar - 69)) | (1 << (CPP14Parser.Doublecolon - 69)) | (1 << (CPP14Parser.Identifier - 69)))) != 0):
                self.state = 2366
                self.typeidlist(0)


            self.state = 2369
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeidlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typeidlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidlist" ):
                listener.enterTypeidlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidlist" ):
                listener.exitTypeidlist(self)



    def typeidlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TypeidlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 380
        self.enterRecursionRule(localctx, 380, self.RULE_typeidlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2372
            self.thetypeid()
            self.state = 2374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2373
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2384
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TypeidlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeidlist)
                    self.state = 2376
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2377
                    self.match(CPP14Parser.Comma)
                    self.state = 2378
                    self.thetypeid()
                    self.state = 2380
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
                    if la_ == 1:
                        self.state = 2379
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 2386
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NoexceptspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noexceptspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptspecification" ):
                listener.enterNoexceptspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptspecification" ):
                listener.exitNoexceptspecification(self)




    def noexceptspecification(self):

        localctx = CPP14Parser.NoexceptspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_noexceptspecification)
        try:
            self.state = 2393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2387
                self.match(CPP14Parser.Noexcept)
                self.state = 2388
                self.match(CPP14Parser.LeftParen)
                self.state = 2389
                self.constantexpression()
                self.state = 2390
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2392
                self.match(CPP14Parser.Noexcept)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RightShiftContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightShift" ):
                listener.enterRightShift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightShift" ):
                listener.exitRightShift(self)




    def rightShift(self):

        localctx = CPP14Parser.RightShiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_rightShift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2395
            self.match(CPP14Parser.Greater)
            self.state = 2396
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RightShiftAssignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShiftAssign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightShiftAssign" ):
                listener.enterRightShiftAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightShiftAssign" ):
                listener.exitRightShiftAssign(self)




    def rightShiftAssign(self):

        localctx = CPP14Parser.RightShiftAssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_rightShiftAssign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2398
            self.match(CPP14Parser.Greater)
            self.state = 2399
            self.match(CPP14Parser.Greater)
            self.state = 2400
            self.match(CPP14Parser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext,0)


        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_theoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator" ):
                listener.enterTheoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator" ):
                listener.exitTheoperator(self)




    def theoperator(self):

        localctx = CPP14Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_theoperator)
        try:
            self.state = 2450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2402
                self.match(CPP14Parser.New)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2403
                self.match(CPP14Parser.Delete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2404
                self.match(CPP14Parser.New)
                self.state = 2405
                self.match(CPP14Parser.LeftBracket)
                self.state = 2406
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2407
                self.match(CPP14Parser.Delete)
                self.state = 2408
                self.match(CPP14Parser.LeftBracket)
                self.state = 2409
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2410
                self.match(CPP14Parser.Plus)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2411
                self.match(CPP14Parser.Minus)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2412
                self.match(CPP14Parser.Star)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2413
                self.match(CPP14Parser.Div)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2414
                self.match(CPP14Parser.Mod)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2415
                self.match(CPP14Parser.Caret)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2416
                self.match(CPP14Parser.And)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2417
                self.match(CPP14Parser.Or)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2418
                self.match(CPP14Parser.Tilde)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2419
                self.match(CPP14Parser.Not)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2420
                self.match(CPP14Parser.Assign)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2421
                self.match(CPP14Parser.Less)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2422
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2423
                self.match(CPP14Parser.PlusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2424
                self.match(CPP14Parser.MinusAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2425
                self.match(CPP14Parser.StarAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2426
                self.match(CPP14Parser.DivAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2427
                self.match(CPP14Parser.ModAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2428
                self.match(CPP14Parser.XorAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2429
                self.match(CPP14Parser.AndAssign)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2430
                self.match(CPP14Parser.OrAssign)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2431
                self.match(CPP14Parser.LeftShift)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2432
                self.rightShift()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2433
                self.rightShiftAssign()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2434
                self.match(CPP14Parser.LeftShiftAssign)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2435
                self.match(CPP14Parser.Equal)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2436
                self.match(CPP14Parser.NotEqual)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2437
                self.match(CPP14Parser.LessEqual)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2438
                self.match(CPP14Parser.GreaterEqual)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2439
                self.match(CPP14Parser.AndAnd)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2440
                self.match(CPP14Parser.OrOr)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2441
                self.match(CPP14Parser.PlusPlus)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2442
                self.match(CPP14Parser.MinusMinus)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2443
                self.match(CPP14Parser.Comma)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2444
                self.match(CPP14Parser.ArrowStar)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2445
                self.match(CPP14Parser.Arrow)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2446
                self.match(CPP14Parser.LeftParen)
                self.state = 2447
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2448
                self.match(CPP14Parser.LeftBracket)
                self.state = 2449
                self.match(CPP14Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integerliteral(self):
            return self.getToken(CPP14Parser.Integerliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Floatingliteral(self):
            return self.getToken(CPP14Parser.Floatingliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def booleanliteral(self):
            return self.getTypedRuleContext(CPP14Parser.BooleanliteralContext,0)


        def pointerliteral(self):
            return self.getTypedRuleContext(CPP14Parser.PointerliteralContext,0)


        def userdefinedliteral(self):
            return self.getTypedRuleContext(CPP14Parser.UserdefinedliteralContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = CPP14Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_literal)
        try:
            self.state = 2459
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Integerliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2452
                self.match(CPP14Parser.Integerliteral)
                pass
            elif token in [CPP14Parser.Characterliteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2453
                self.match(CPP14Parser.Characterliteral)
                pass
            elif token in [CPP14Parser.Floatingliteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2454
                self.match(CPP14Parser.Floatingliteral)
                pass
            elif token in [CPP14Parser.Stringliteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2455
                self.match(CPP14Parser.Stringliteral)
                pass
            elif token in [CPP14Parser.False, CPP14Parser.True]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2456
                self.booleanliteral()
                pass
            elif token in [CPP14Parser.Nullptr]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2457
                self.pointerliteral()
                pass
            elif token in [CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2458
                self.userdefinedliteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanliteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def False(self):
            return self.getToken(CPP14Parser.False, 0)

        def True(self):
            return self.getToken(CPP14Parser.True, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_booleanliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanliteral" ):
                listener.enterBooleanliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanliteral" ):
                listener.exitBooleanliteral(self)




    def booleanliteral(self):

        localctx = CPP14Parser.BooleanliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_booleanliteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2461
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.False or _la==CPP14Parser.True):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointerliteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pointerliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerliteral" ):
                listener.enterPointerliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerliteral" ):
                listener.exitPointerliteral(self)




    def pointerliteral(self):

        localctx = CPP14Parser.PointerliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_pointerliteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2463
            self.match(CPP14Parser.Nullptr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserdefinedliteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Userdefinedintegerliteral(self):
            return self.getToken(CPP14Parser.Userdefinedintegerliteral, 0)

        def Userdefinedfloatingliteral(self):
            return self.getToken(CPP14Parser.Userdefinedfloatingliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def Userdefinedcharacterliteral(self):
            return self.getToken(CPP14Parser.Userdefinedcharacterliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_userdefinedliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral" ):
                listener.enterUserdefinedliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral" ):
                listener.exitUserdefinedliteral(self)




    def userdefinedliteral(self):

        localctx = CPP14Parser.UserdefinedliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_userdefinedliteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2465
            _la = self._input.LA(1)
            if not(((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (CPP14Parser.Userdefinedintegerliteral - 135)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 135)) | (1 << (CPP14Parser.Userdefinedstringliteral - 135)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 135)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.nestednamespecifier_sempred
        self._predicates[10] = self.capturelist_sempred
        self._predicates[15] = self.postfixexpression_sempred
        self._predicates[24] = self.noptrnewdeclarator_sempred
        self._predicates[29] = self.pmexpression_sempred
        self._predicates[30] = self.multiplicativeexpression_sempred
        self._predicates[31] = self.additiveexpression_sempred
        self._predicates[32] = self.shiftexpression_sempred
        self._predicates[33] = self.relationalexpression_sempred
        self._predicates[34] = self.equalityexpression_sempred
        self._predicates[35] = self.andexpression_sempred
        self._predicates[36] = self.exclusiveorexpression_sempred
        self._predicates[37] = self.inclusiveorexpression_sempred
        self._predicates[38] = self.logicalandexpression_sempred
        self._predicates[39] = self.logicalorexpression_sempred
        self._predicates[43] = self.expression_sempred
        self._predicates[49] = self.statementseq_sempred
        self._predicates[58] = self.declarationseq_sempred
        self._predicates[85] = self.enumeratorlist_sempred
        self._predicates[103] = self.attributespecifierseq_sempred
        self._predicates[106] = self.attributelist_sempred
        self._predicates[112] = self.balancedtokenseq_sempred
        self._predicates[114] = self.initdeclaratorlist_sempred
        self._predicates[118] = self.noptrdeclarator_sempred
        self._predicates[129] = self.noptrabstractdeclarator_sempred
        self._predicates[131] = self.noptrabstractpackdeclarator_sempred
        self._predicates[133] = self.parameterdeclarationlist_sempred
        self._predicates[140] = self.initializerlist_sempred
        self._predicates[150] = self.memberdeclaratorlist_sempred
        self._predicates[152] = self.virtspecifierseq_sempred
        self._predicates[156] = self.basespecifierlist_sempred
        self._predicates[171] = self.templateparameterlist_sempred
        self._predicates[177] = self.templateargumentlist_sempred
        self._predicates[190] = self.typeidlist_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestednamespecifier_sempred(self, localctx:NestednamespecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def capturelist_sempred(self, localctx:CapturelistContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def postfixexpression_sempred(self, localctx:PostfixexpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 7)
         

    def noptrnewdeclarator_sempred(self, localctx:NoptrnewdeclaratorContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def pmexpression_sempred(self, localctx:PmexpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeexpression_sempred(self, localctx:MultiplicativeexpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def additiveexpression_sempred(self, localctx:AdditiveexpressionContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         

    def shiftexpression_sempred(self, localctx:ShiftexpressionContext, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 1)
         

    def relationalexpression_sempred(self, localctx:RelationalexpressionContext, predIndex:int):
            if predIndex == 22:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 1)
         

    def equalityexpression_sempred(self, localctx:EqualityexpressionContext, predIndex:int):
            if predIndex == 26:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def andexpression_sempred(self, localctx:AndexpressionContext, predIndex:int):
            if predIndex == 28:
                return self.precpred(self._ctx, 1)
         

    def exclusiveorexpression_sempred(self, localctx:ExclusiveorexpressionContext, predIndex:int):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def inclusiveorexpression_sempred(self, localctx:InclusiveorexpressionContext, predIndex:int):
            if predIndex == 30:
                return self.precpred(self._ctx, 1)
         

    def logicalandexpression_sempred(self, localctx:LogicalandexpressionContext, predIndex:int):
            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def logicalorexpression_sempred(self, localctx:LogicalorexpressionContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def statementseq_sempred(self, localctx:StatementseqContext, predIndex:int):
            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def declarationseq_sempred(self, localctx:DeclarationseqContext, predIndex:int):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def enumeratorlist_sempred(self, localctx:EnumeratorlistContext, predIndex:int):
            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def attributespecifierseq_sempred(self, localctx:AttributespecifierseqContext, predIndex:int):
            if predIndex == 37:
                return self.precpred(self._ctx, 1)
         

    def attributelist_sempred(self, localctx:AttributelistContext, predIndex:int):
            if predIndex == 38:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 39:
                return self.precpred(self._ctx, 1)
         

    def balancedtokenseq_sempred(self, localctx:BalancedtokenseqContext, predIndex:int):
            if predIndex == 40:
                return self.precpred(self._ctx, 1)
         

    def initdeclaratorlist_sempred(self, localctx:InitdeclaratorlistContext, predIndex:int):
            if predIndex == 41:
                return self.precpred(self._ctx, 1)
         

    def noptrdeclarator_sempred(self, localctx:NoptrdeclaratorContext, predIndex:int):
            if predIndex == 42:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 2)
         

    def noptrabstractdeclarator_sempred(self, localctx:NoptrabstractdeclaratorContext, predIndex:int):
            if predIndex == 44:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 3)
         

    def noptrabstractpackdeclarator_sempred(self, localctx:NoptrabstractpackdeclaratorContext, predIndex:int):
            if predIndex == 46:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 47:
                return self.precpred(self._ctx, 2)
         

    def parameterdeclarationlist_sempred(self, localctx:ParameterdeclarationlistContext, predIndex:int):
            if predIndex == 48:
                return self.precpred(self._ctx, 1)
         

    def initializerlist_sempred(self, localctx:InitializerlistContext, predIndex:int):
            if predIndex == 49:
                return self.precpred(self._ctx, 1)
         

    def memberdeclaratorlist_sempred(self, localctx:MemberdeclaratorlistContext, predIndex:int):
            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def virtspecifierseq_sempred(self, localctx:VirtspecifierseqContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         

    def basespecifierlist_sempred(self, localctx:BasespecifierlistContext, predIndex:int):
            if predIndex == 52:
                return self.precpred(self._ctx, 1)
         

    def templateparameterlist_sempred(self, localctx:TemplateparameterlistContext, predIndex:int):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def templateargumentlist_sempred(self, localctx:TemplateargumentlistContext, predIndex:int):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def typeidlist_sempred(self, localctx:TypeidlistContext, predIndex:int):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         




